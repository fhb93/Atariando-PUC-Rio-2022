------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    w	       =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    u	       =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    p	       =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    m	       =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    i	       =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    g	       =	g
     48  10000 ????
     49  10000 ????		00 d9	    f	       =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 4b	    logo_height =	75
     62  10000 ????
     63  10000 ????		00 0e	    logo_color =	$0E
     64  10000 ????
     65  10000 ????		00 00	    scorefade  =	0
     66  10000 ????
     67  10000 ????		00 2b	    vblank_time =	43
     68  10000 ????		00 25	    overscan_time =	37
     69  10000 ????		00 01	    PFcolors   =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    w	       =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    u	       =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    p	       =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    m	       =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    i	       =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    g	       =	g
     48  10000 ????
     49  10000 ????		00 d9	    f	       =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 4b	    logo_height =	75
     62  10000 ????
     63  10000 ????		00 0e	    logo_color =	$0E
     64  10000 ????
     65  10000 ????		00 00	    scorefade  =	0
     66  10000 ????
     67  10000 ????		00 2b	    vblank_time =	43
     68  10000 ????		00 25	    overscan_time =	37
     69  10000 ????		00 01	    PFcolors   =	1
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 3f f5 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef					      ifconst	PFcolors
    403  f0ef		       a8		      tay
    404  f0f0		       b1 f0		      lda	(pfcolortable),y
    405  f0f2					      ifnconst	backgroundchange
    406  f0f2		       85 08		      sta	COLUPF
    407  f0f4				  -	      else
    408  f0f4				  -	      sta	COLUBK
    409  f0f4					      endif
    410  f0f4				  -	      ifconst	pfrowheight
    411  f0f4				  -	      lda	#pfrowheight
    412  f0f4					      else
    413  f0f4					      ifnconst	pfres
    414  f0f4		       a9 08		      lda	#8
    415  f0f6				  -	      else
    416  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0f6					      endif
    418  f0f6					      endif
    419  f0f6		       85 9c		      sta	temp1
    420  f0f8					      endif
    421  f0f8					      ifnconst	PFcolorandheight
    422  f0f8				  -	      ifnconst	PFcolors
    423  f0f8				  -	      ifnconst	PFheights
    424  f0f8				  -	      ifnconst	no_blank_lines
    425  f0f8				  -			; read paddle 0
    426  f0f8				  -			; lo-res paddle read
    427  f0f8				  -			; bit INPT0
    428  f0f8				  -			; bmi paddleskipread
    429  f0f8				  -			; inc paddle0
    430  f0f8				  -			;donepaddleskip
    431  f0f8				  -	      sleep	10
    432  f0f8				  -	      ifconst	pfrowheight
    433  f0f8				  -	      lda	#pfrowheight
    434  f0f8				  -	      else
    435  f0f8				  -	      ifnconst	pfres
    436  f0f8				  -	      lda	#8
    437  f0f8				  -	      else
    438  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f8				  -	      endif
    440  f0f8				  -	      endif
    441  f0f8				  -	      sta	temp1
    442  f0f8				  -	      endif
    443  f0f8				  -	      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101				  -	      ifnconst	PFcolors
    459  f101				  -	      sleep	10
    460  f101					      else
    461  f101		       a0 7c		      ldy	#124
    462  f103		       b1 f0		      lda	(pfcolortable),y
    463  f105		       85 08		      sta	COLUPF
    464  f107					      endif
    465  f107
    466  f107				  -	      ifconst	PFheights
    467  f107				  -	      ldx	#1
    468  f107				  -			;sleep 4
    469  f107				  -	      sleep	3	; this was over 1 cycle
    470  f107					      else
    471  f107		       a6 ef		      ldx	playfieldpos
    472  f109							;sleep 3
      0  f109					      sleep	2	; this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    474  f10a					      endif
    475  f10a
    476  f10a		       4c 28 f1 	      jmp	enterlastkernel
    477  f10d
    478  f10d				  -	      else
    479  f10d				  -lastkernelline
    480  f10d				  -
    481  f10d				  -	      ifconst	PFheights
    482  f10d				  -	      ldx	#1
    483  f10d				  -			;sleep 5
    484  f10d				  -	      sleep	4	; this was over 1 cycle
    485  f10d				  -	      else
    486  f10d				  -	      ldx	playfieldpos
    487  f10d				  -			;sleep 4
    488  f10d				  -	      sleep	3	; this was over 1 cycle
    489  f10d				  -	      endif
    490  f10d				  -
    491  f10d				  -	      cpx	#0
    492  f10d				  -	      bne	.enterfromNBL
    493  f10d				  -	      jmp	no_blank_lines_bailout
    494  f10d					      endif
    495  f10d
    496  f10d				  -	      if	((<*)>$d5)
    497  f10d				  -	      align	256
    498  f10d					      endif
    499  f10d							; this is a kludge to prevent page wrapping - fix!!!
    500  f10d
    501  f10d				   .skipDrawlastP1
    502  f10d		       a9 00		      lda	#0
    503  f10f		       a8		      tay		; added so we don't cross a page
    504  f110		       4c 3a f1 	      jmp	.continuelastP1
    505  f113
    506  f113				   .endkerloop		; enter at cycle 59??
    507  f113
    508  f113		       ea		      nop
    509  f114
    510  f114				   .enterfromNBL
    511  f114				  -	      ifconst	pfres
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f114				  -	      sty	PF1L	;3
    514  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f114				  -	      sty	PF2L	;3
    516  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f114				  -	      sty	PF1R	; possibly too early?
    518  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f114				  -	      sty	PF2R	;3
    520  f114					      else
    521  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f117		       84 0e		      sty	PF1L	;3
    523  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11c		       84 0f		      sty	PF2L	;3
    525  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f121		       84 0e		      sty	PF1R	; possibly too early?
    527  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f126		       84 0f		      sty	PF2R	;3
    529  f128					      endif
    530  f128
    531  f128				   enterlastkernel
    532  f128		       a5 92		      lda	ballheight
    533  f12a
    534  f12a							; tya
    535  f12a		       c7 89		      dcp	bally
    536  f12c							; sleep 4
    537  f12c
    538  f12c							; sbc stack3
    539  f12c		       2a		      rol
    540  f12d		       2a		      rol
    541  f12e		       85 1f		      sta	ENABL
    542  f130
    543  f130		       a5 8f		      lda	player1height	;3
    544  f132		       c7 86		      dcp	player1y	;5
    545  f134		       90 d7		      bcc	.skipDrawlastP1
    546  f136		       a4 86		      ldy	player1y	;3
    547  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13a							; so it doesn't cross a page boundary!
    549  f13a
    550  f13a				   .continuelastP1
    551  f13a		       85 1c		      sta	GRP1	;3
    552  f13c
    553  f13c					      ifnconst	player1colors
    554  f13c		       a5 87		      lda	missile1height	;3
    555  f13e		       c7 88		      dcp	missile1y	;5
    556  f140				  -	      else
    557  f140				  -	      lda	(player1color),y
    558  f140				  -	      sta	COLUP1
    559  f140					      endif
    560  f140
    561  f140		       ca		      dex
    562  f141							;dec temp4 ; might try putting this above PF writes
    563  f141		       f0 36		      beq	endkernel
    564  f143
    565  f143
    566  f143				  -	      ifconst	pfres
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f143				  -	      sty	PF1L	;3
    569  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f143				  -	      sty	PF2L	;3
    571  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f143				  -	      sty	PF1R	; possibly too early?
    573  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f143				  -	      sty	PF2R	;3
    575  f143					      else
    576  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f146		       84 0e		      sty	PF1L	;3
    578  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14b		       84 0f		      sty	PF2L	;3
    580  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f150		       84 0e		      sty	PF1R	; possibly too early?
    582  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f155		       84 0f		      sty	PF2R	;3
    584  f157					      endif
    585  f157
    586  f157					      ifnconst	player1colors
    587  f157		       2a		      rol		;2
    588  f158		       2a		      rol		;2
    589  f159		       85 1e		      sta	ENAM1	;3
    590  f15b				  -	      else
    591  f15b				  -	      ifnconst	playercolors
    592  f15b				  -	      sleep	7
    593  f15b				  -	      else
    594  f15b				  -	      lda.w	player0colorstore
    595  f15b				  -	      sta	COLUP0
    596  f15b				  -	      endif
    597  f15b					      endif
    598  f15b
    599  f15b		       ad 8e 00 	      lda.w	player0height
    600  f15e		       c7 85		      dcp	player0y
    601  f160		       90 11		      bcc	.skipDrawlastP0
    602  f162		       a4 85		      ldy	player0y
    603  f164		       b1 8a		      lda	(player0pointer),y
    604  f166				   .continuelastP0
    605  f166		       85 1b		      sta	GRP0
    606  f168
    607  f168
    608  f168
    609  f168					      ifnconst	no_blank_lines
    610  f168		       a5 90		      lda	missile0height	;3
    611  f16a		       c7 91		      dcp	missile0y	;5
    612  f16c		       e5 f6		      sbc	stack1
    613  f16e		       85 1d		      sta	ENAM0	;3
    614  f170		       4c 13 f1 	      jmp	.endkerloop
    615  f173				  -	      else
    616  f173				  -	      ifconst	readpaddle
    617  f173				  -	      ldy	currentpaddle
    618  f173				  -	      lda	INPT0,y
    619  f173				  -	      bpl	noreadpaddle2
    620  f173				  -	      inc	paddle
    621  f173				  -	      jmp	.endkerloop
    622  f173				  -noreadpaddle2
    623  f173				  -	      sleep	4
    624  f173				  -	      jmp	.endkerloop
    625  f173				  -	      else		; no_blank_lines and no paddle reading
    626  f173				  -	      pla
    627  f173				  -	      pha		; 14 cycles in 4 bytes
    628  f173				  -	      pla
    629  f173				  -	      pha
    630  f173				  -			; sleep 14
    631  f173				  -	      jmp	.endkerloop
    632  f173				  -	      endif
    633  f173					      endif
    634  f173
    635  f173
    636  f173							; ifconst donepaddleskip
    637  f173							;paddleskipread
    638  f173							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f173							; plus we get a lo-res paddle read
    640  f173							; bmi donepaddleskip
    641  f173							; endif
    642  f173
    643  f173				   .skipDrawlastP0
    644  f173		       a9 00		      lda	#0
    645  f175		       a8		      tay
    646  f176		       4c 66 f1 	      jmp	.continuelastP0
    647  f179
    648  f179				  -	      ifconst	no_blank_lines
    649  f179				  -no_blank_lines_bailout
    650  f179				  -	      ldx	#0
    651  f179					      endif
    652  f179
    653  f179				   endkernel
    654  f179							; 6 digit score routine
    655  f179		       86 0e		      stx	PF1
    656  f17b		       86 0f		      stx	PF2
    657  f17d		       86 0d		      stx	PF0
    658  f17f		       18		      clc
    659  f180
    660  f180				  -	      ifconst	pfrowheight
    661  f180				  -	      lda	#pfrowheight+2
    662  f180					      else
    663  f180					      ifnconst	pfres
    664  f180		       a9 0a		      lda	#10
    665  f182				  -	      else
    666  f182				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f182					      endif
    668  f182					      endif
    669  f182
    670  f182		       e5 ef		      sbc	playfieldpos
    671  f184		       85 ef		      sta	playfieldpos
    672  f186		       8a		      txa
    673  f187
    674  f187				  -	      ifconst	shakescreen
    675  f187				  -	      bit	shakescreen
    676  f187				  -	      bmi	noshakescreen2
    677  f187				  -	      ldx	#$3D
    678  f187				  -noshakescreen2
    679  f187					      endif
    680  f187
    681  f187		       95 02		      sta	WSYNC,x
    682  f189
    683  f189							; STA WSYNC ;first one, need one more
    684  f189		       85 0b		      sta	REFP0
    685  f18b		       85 0c		      sta	REFP1
    686  f18d		       85 1b		      STA	GRP0
    687  f18f		       85 1c		      STA	GRP1
    688  f191							; STA PF1
    689  f191							; STA PF2
    690  f191		       85 2b		      sta	HMCLR
    691  f193		       85 1d		      sta	ENAM0
    692  f195		       85 1e		      sta	ENAM1
    693  f197		       85 1f		      sta	ENABL
    694  f199
    695  f199		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19b		       85 85		      sta	player0y
    697  f19d		       a5 9e		      lda	temp3
    698  f19f		       85 86		      sta	player1y
    699  f1a1					      ifnconst	player1colors
    700  f1a1		       a5 a1		      lda	temp6
    701  f1a3		       85 88		      sta	missile1y
    702  f1a5					      endif
    703  f1a5					      ifnconst	playercolors
    704  f1a5					      ifnconst	readpaddle
    705  f1a5		       a5 a0		      lda	temp5
    706  f1a7		       85 91		      sta	missile0y
    707  f1a9					      endif
    708  f1a9					      endif
    709  f1a9		       a5 f7		      lda	stack2
    710  f1ab		       85 89		      sta	bally
    711  f1ad
    712  f1ad							; strangely, this isn't required any more. might have
    713  f1ad							; resulted from the no_blank_lines score bounce fix
    714  f1ad							;ifconst no_blank_lines
    715  f1ad							;sta WSYNC
    716  f1ad							;endif
    717  f1ad
    718  f1ad		       ad 84 02 	      lda	INTIM
    719  f1b0		       18		      clc
    720  f1b1				  -	      ifnconst	vblank_time
    721  f1b1				  -	      adc	#43+12+87
    722  f1b1					      else
    723  f1b1		       69 8e		      adc	#vblank_time+12+87
    724  f1b3
    725  f1b3					      endif
    726  f1b3							; sta WSYNC
    727  f1b3		       8d 96 02 	      sta	TIM64T
    728  f1b6
    729  f1b6					      ifconst	minikernel
    730  f1b6		       20 67 f4 	      jsr	minikernel
    731  f1b9					      endif
    732  f1b9
    733  f1b9							; now reassign temp vars for score pointers
    734  f1b9
    735  f1b9							; score pointers contain:
    736  f1b9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b9							; swap lo2->temp1
    738  f1b9							; swap lo4->temp3
    739  f1b9							; swap lo6->temp5
    740  f1b9					      ifnconst	noscore
    741  f1b9		       a5 97		      lda	scorepointers+1
    742  f1bb							; ldy temp1
    743  f1bb		       85 9c		      sta	temp1
    744  f1bd							; sty scorepointers+1
    745  f1bd
    746  f1bd		       a5 99		      lda	scorepointers+3
    747  f1bf							; ldy temp3
    748  f1bf		       85 9e		      sta	temp3
    749  f1c1							; sty scorepointers+3
    750  f1c1
    751  f1c1
    752  f1c1		       85 2b		      sta	HMCLR
    753  f1c3		       ba		      tsx
    754  f1c4		       86 f6		      stx	stack1
    755  f1c6		       a2 e0		      ldx	#$E0
    756  f1c8		       86 20		      stx	HMP0
    757  f1ca
    758  f1ca		       a5 a3		      LDA	scorecolor
    759  f1cc		       85 06		      STA	COLUP0
    760  f1ce		       85 07		      STA	COLUP1
    761  f1d0					      ifconst	scorefade
    762  f1d0		       85 f7		      STA	stack2
    763  f1d2					      endif
    764  f1d2				  -	      ifconst	pfscore
    765  f1d2				  -	      lda	pfscorecolor
    766  f1d2				  -	      sta	COLUPF
    767  f1d2					      endif
    768  f1d2		       85 02		      sta	WSYNC
    769  f1d4		       a2 00		      ldx	#0
    770  f1d6		       86 1b		      STx	GRP0
    771  f1d8		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1da
    773  f1da		       a5 9b		      lda	scorepointers+5
    774  f1dc							; ldy temp5
    775  f1dc		       95 a0		      sta	temp5,x
    776  f1de							; sty scorepointers+5
    777  f1de		       a9 ff		      lda	#>scoretable
    778  f1e0		       85 97		      sta	scorepointers+1
    779  f1e2		       85 99		      sta	scorepointers+3
    780  f1e4		       85 9b		      sta	scorepointers+5
    781  f1e6		       85 9d		      sta	temp2
    782  f1e8		       85 9f		      sta	temp4
    783  f1ea		       85 a1		      sta	temp6
    784  f1ec		       a0 07		      LDY	#7
    785  f1ee		       84 25		      STY	VDELP0
    786  f1f0		       85 10		      STA	RESP0
    787  f1f2		       85 11		      STA	RESP1
    788  f1f4
    789  f1f4
    790  f1f4		       a9 03		      LDA	#$03
    791  f1f6		       85 04		      STA	NUSIZ0
    792  f1f8		       85 05		      STA	NUSIZ1
    793  f1fa		       85 26		      STA	VDELP1
    794  f1fc		       a9 f0		      LDA	#$F0
    795  f1fe		       85 21		      STA	HMP1
    796  f200		       b1 96		      lda	(scorepointers),y
    797  f202		       85 1b		      sta	GRP0
    798  f204		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f206		       4c 10 f2 	      jmp	beginscore
    800  f209
    801  f209
    802  f209				  -	      if	((<*)>$d4)
    803  f209				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f209					      endif
    805  f209
    806  f209				   loop2
    807  f209		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20b		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20d				  -	      ifconst	pfscore
    810  f20d				  -	      lda.w	pfscore1
    811  f20d				  -	      sta	PF1
    812  f20d					      else
    813  f20d					      ifconst	scorefade
      0  f20d					      sleep	2
      1  f20d				   .CYCLES    SET	2
      2  f20d
      3  f20d				  -	      IF	.CYCLES < 2
      4  f20d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20d				  -	      ERR
      6  f20d					      ENDIF
      7  f20d
      8  f20d				  -	      IF	.CYCLES & 1
      9  f20d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20d				  -	      nop	0
     11  f20d				  -	      ELSE
     12  f20d				  -	      bit	VSYNC
     13  f20d				  -	      ENDIF
     14  f20d				  -.CYCLES    SET	.CYCLES - 3
     15  f20d					      ENDIF
     16  f20d
     17  f20d					      REPEAT	.CYCLES / 2
     18  f20d		       ea		      nop
     19  f20e					      REPEND
    815  f20e		       c6 f7		      dec	stack2	; decrement the temporary scorecolor
    816  f210				  -	      else
    817  f210				  -	      sleep	7
    818  f210					      endif
    819  f210					      endif
    820  f210							; cycle 0
    821  f210				   beginscore
    822  f210		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f212		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f214		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f216		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f218		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21a		       9a		      txs
    828  f21b		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21d					      ifconst	scorefade
    830  f21d		       a5 f7		      lda	stack2
    831  f21f				  -	      else
    832  f21f				  -	      sleep	3
    833  f21f					      endif
    834  f21f
    835  f21f				  -	      ifconst	pfscore
    836  f21f				  -	      lda	pfscore2
    837  f21f				  -	      sta	PF1
    838  f21f					      else
    839  f21f					      ifconst	scorefade
    840  f21f		       85 06		      sta	COLUP0
    841  f221		       85 07		      sta	COLUP1
    842  f223				  -	      else
    843  f223				  -	      sleep	6
    844  f223					      endif
    845  f223					      endif
    846  f223
    847  f223		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f225		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f227		       ba		      tsx
    850  f228		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22a		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f22c		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22e		       88		      dey
    854  f22f		       10 d8		      bpl	loop2	;+2 60 180
    855  f231
    856  f231		       a6 f6		      ldx	stack1
    857  f233		       9a		      txs
    858  f234							; lda scorepointers+1
    859  f234		       a4 9c		      ldy	temp1
    860  f236							; sta temp1
    861  f236		       84 97		      sty	scorepointers+1
    862  f238
    863  f238		       a9 00		      LDA	#0
    864  f23a		       85 0e		      sta	PF1
    865  f23c		       85 1b		      STA	GRP0
    866  f23e		       85 1c		      STA	GRP1
    867  f240		       85 25		      STA	VDELP0
    868  f242		       85 26		      STA	VDELP1	;do we need these
    869  f244		       85 04		      STA	NUSIZ0
    870  f246		       85 05		      STA	NUSIZ1
    871  f248
    872  f248							; lda scorepointers+3
    873  f248		       a4 9e		      ldy	temp3
    874  f24a							; sta temp3
    875  f24a		       84 99		      sty	scorepointers+3
    876  f24c
    877  f24c							; lda scorepointers+5
    878  f24c		       a4 a0		      ldy	temp5
    879  f24e							; sta temp5
    880  f24e		       84 9b		      sty	scorepointers+5
    881  f250					      endif		;noscore
    882  f250				  -	      ifconst	readpaddle
    883  f250				  -	      lda	#%11000010
    884  f250					      else
    885  f250				  -	      ifconst	qtcontroller
    886  f250				  -	      lda	qtcontroller
    887  f250				  -	      lsr		; bit 0 in carry
    888  f250				  -	      lda	#4
    889  f250				  -	      ror		; carry into top of A
    890  f250					      else
    891  f250		       a9 02		      lda	#2
    892  f252					      endif		; qtcontroller
    893  f252					      endif		; readpaddle
    894  f252		       85 02		      sta	WSYNC
    895  f254		       85 01		      sta	VBLANK
      0  f256					      RETURN
      1  f256					      ifnconst	bankswitch
      2  f256		       60		      rts
      3  f257				  -	      else
      4  f257				  -	      jmp	BS_return
      5  f257					      endif
    897  f257				  -	      ifconst	shakescreen
    898  f257				  -doshakescreen
    899  f257				  -	      bit	shakescreen
    900  f257				  -	      bmi	noshakescreen
    901  f257				  -	      sta	WSYNC
    902  f257				  -noshakescreen
    903  f257				  -	      ldx	missile0height
    904  f257				  -	      inx
    905  f257				  -	      rts
    906  f257					      endif
    907  f257
    908  f257							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f257
    910  f257							; playfield drawing routines
    911  f257							; you get a 32x12 bitmapped display in a single color :)
    912  f257							; 0-31 and 0-11
    913  f257
    914  f257				   pfclear		; clears playfield - or fill with pattern
    915  f257				  -	      ifconst	pfres
    916  f257				  -	      ldx	#pfres*pfwidth-1
    917  f257					      else
    918  f257		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f259					      endif
    920  f259				   pfclear_loop
    921  f259					      ifnconst	superchip
    922  f259		       95 a4		      sta	playfield,x
    923  f25b				  -	      else
    924  f25b				  -	      sta	playfield-128,x
    925  f25b					      endif
    926  f25b		       ca		      dex
    927  f25c		       10 fb		      bpl	pfclear_loop
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    929  f25f
    930  f25f				   setuppointers
    931  f25f		       86 9d		      stx	temp2	; store on.off.flip value
    932  f261		       aa		      tax		; put x-value in x 
    933  f262		       4a		      lsr
    934  f263		       4a		      lsr
    935  f264		       4a		      lsr		; divide x pos by 8 
    936  f265		       85 9c		      sta	temp1
    937  f267		       98		      tya
    938  f268		       0a		      asl
    939  f269					      if	pfwidth=4
    940  f269		       0a		      asl		; multiply y pos by 4
    941  f26a					      endif		; else multiply by 2
    942  f26a		       18		      clc
    943  f26b		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26d		       a8		      tay		; put the value in y
    945  f26e		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f270		       60		      rts
    947  f271
    948  f271				   pfread
    949  f271							;x=xvalue, y=yvalue
    950  f271		       20 5f f2 	      jsr	setuppointers
    951  f274		       bd d9 f2 	      lda	setbyte,x
    952  f277		       39 a4 00 	      and	playfield,y
    953  f27a		       5d d9 f2 	      eor	setbyte,x
    954  f27d							; beq readzero
    955  f27d							; lda #1
    956  f27d							; readzero
      0  f27d					      RETURN
      1  f27d					      ifnconst	bankswitch
      2  f27d		       60		      rts
      3  f27e				  -	      else
      4  f27e				  -	      jmp	BS_return
      5  f27e					      endif
    958  f27e
    959  f27e				   pfpixel
    960  f27e							;x=xvalue, y=yvalue, a=0,1,2
    961  f27e		       20 5f f2 	      jsr	setuppointers
    962  f281
    963  f281				  -	      ifconst	bankswitch
    964  f281				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f281				  -	      beq	pixelon_r	; if "on" go to on
    966  f281				  -	      lsr
    967  f281				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f281				  -	      lda	playfield,y	; if here, it's "flip"
    969  f281				  -	      eor	setbyte,x
    970  f281				  -	      ifconst	superchip
    971  f281				  -	      sta	playfield-128,y
    972  f281				  -	      else
    973  f281				  -	      sta	playfield,y
    974  f281				  -	      endif
    975  f281				  -	      RETURN
    976  f281				  -pixelon_r
    977  f281				  -	      lda	playfield,y
    978  f281				  -	      ora	setbyte,x
    979  f281				  -	      ifconst	superchip
    980  f281				  -	      sta	playfield-128,y
    981  f281				  -	      else
    982  f281				  -	      sta	playfield,y
    983  f281				  -	      endif
    984  f281				  -	      RETURN
    985  f281				  -pixeloff_r
    986  f281				  -	      lda	setbyte,x
    987  f281				  -	      eor	#$ff
    988  f281				  -	      and	playfield,y
    989  f281				  -	      ifconst	superchip
    990  f281				  -	      sta	playfield-128,y
    991  f281				  -	      else
    992  f281				  -	      sta	playfield,y
    993  f281				  -	      endif
    994  f281				  -	      RETURN
    995  f281				  -
    996  f281					      else
    997  f281		       4c b2 f2 	      jmp	plotpoint
    998  f284					      endif
    999  f284
   1000  f284				   pfhline
   1001  f284							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f284		       20 5f f2 	      jsr	setuppointers
   1003  f287		       4c 91 f2 	      jmp	noinc
   1004  f28a				   keepgoing
   1005  f28a		       e8		      inx
   1006  f28b		       8a		      txa
   1007  f28c		       29 07		      and	#7
   1008  f28e		       d0 01		      bne	noinc
   1009  f290		       c8		      iny
   1010  f291				   noinc
   1011  f291		       20 b2 f2 	      jsr	plotpoint
   1012  f294		       e4 9e		      cpx	temp3
   1013  f296		       30 f2		      bmi	keepgoing
      0  f298					      RETURN
      1  f298					      ifnconst	bankswitch
      2  f298		       60		      rts
      3  f299				  -	      else
      4  f299				  -	      jmp	BS_return
      5  f299					      endif
   1015  f299
   1016  f299				   pfvline
   1017  f299							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f299		       20 5f f2 	      jsr	setuppointers
   1019  f29c		       84 9c		      sty	temp1	; store memory location offset
   1020  f29e		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a0		       a5 9e		      lda	temp3
   1022  f2a2		       0a		      asl
   1023  f2a3					      if	pfwidth=4
   1024  f2a3		       0a		      asl		; multiply by 4
   1025  f2a4					      endif		; else multiply by 2
   1026  f2a4		       85 9e		      sta	temp3	; store it
   1027  f2a6							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a6							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a6							; x should equal original x value
   1030  f2a6				   keepgoingy
   1031  f2a6		       20 b2 f2 	      jsr	plotpoint
   1032  f2a9		       c8		      iny
   1033  f2aa		       c8		      iny
   1034  f2ab					      if	pfwidth=4
   1035  f2ab		       c8		      iny
   1036  f2ac		       c8		      iny
   1037  f2ad					      endif
   1038  f2ad		       c4 9e		      cpy	temp3
   1039  f2af		       30 f5		      bmi	keepgoingy
      0  f2b1					      RETURN
      1  f2b1					      ifnconst	bankswitch
      2  f2b1		       60		      rts
      3  f2b2				  -	      else
      4  f2b2				  -	      jmp	BS_return
      5  f2b2					      endif
   1041  f2b2
   1042  f2b2				   plotpoint
   1043  f2b2		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b4		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b6		       4a		      lsr
   1046  f2b7		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b9		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2bc		       5d d9 f2 	      eor	setbyte,x
   1049  f2bf				  -	      ifconst	superchip
   1050  f2bf				  -	      sta	playfield-128,y
   1051  f2bf					      else
   1052  f2bf		       99 a4 00 	      sta	playfield,y
   1053  f2c2					      endif
   1054  f2c2		       60		      rts
   1055  f2c3				   pixelon
   1056  f2c3		       b9 a4 00 	      lda	playfield,y
   1057  f2c6		       1d d9 f2 	      ora	setbyte,x
   1058  f2c9				  -	      ifconst	superchip
   1059  f2c9				  -	      sta	playfield-128,y
   1060  f2c9					      else
   1061  f2c9		       99 a4 00 	      sta	playfield,y
   1062  f2cc					      endif
   1063  f2cc		       60		      rts
   1064  f2cd				   pixeloff
   1065  f2cd		       bd d9 f2 	      lda	setbyte,x
   1066  f2d0		       49 ff		      eor	#$ff
   1067  f2d2		       39 a4 00 	      and	playfield,y
   1068  f2d5				  -	      ifconst	superchip
   1069  f2d5				  -	      sta	playfield-128,y
   1070  f2d5					      else
   1071  f2d5		       99 a4 00 	      sta	playfield,y
   1072  f2d8					      endif
   1073  f2d8		       60		      rts
   1074  f2d9
   1075  f2d9				   setbyte
   1076  f2d9					      ifnconst	pfcenter
   1077  f2d9		       80		      .byte.b	$80
   1078  f2da		       40		      .byte.b	$40
   1079  f2db		       20		      .byte.b	$20
   1080  f2dc		       10		      .byte.b	$10
   1081  f2dd		       08		      .byte.b	$08
   1082  f2de		       04		      .byte.b	$04
   1083  f2df		       02		      .byte.b	$02
   1084  f2e0		       01		      .byte.b	$01
   1085  f2e1					      endif
   1086  f2e1		       01		      .byte.b	$01
   1087  f2e2		       02		      .byte.b	$02
   1088  f2e3		       04		      .byte.b	$04
   1089  f2e4		       08		      .byte.b	$08
   1090  f2e5		       10		      .byte.b	$10
   1091  f2e6		       20		      .byte.b	$20
   1092  f2e7		       40		      .byte.b	$40
   1093  f2e8		       80		      .byte.b	$80
   1094  f2e9		       80		      .byte.b	$80
   1095  f2ea		       40		      .byte.b	$40
   1096  f2eb		       20		      .byte.b	$20
   1097  f2ec		       10		      .byte.b	$10
   1098  f2ed		       08		      .byte.b	$08
   1099  f2ee		       04		      .byte.b	$04
   1100  f2ef		       02		      .byte.b	$02
   1101  f2f0		       01		      .byte.b	$01
   1102  f2f1		       01		      .byte.b	$01
   1103  f2f2		       02		      .byte.b	$02
   1104  f2f3		       04		      .byte.b	$04
   1105  f2f4		       08		      .byte.b	$08
   1106  f2f5		       10		      .byte.b	$10
   1107  f2f6		       20		      .byte.b	$20
   1108  f2f7		       40		      .byte.b	$40
   1109  f2f8		       80		      .byte.b	$80
   1110  f2f9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f9
   1112  f2f9				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f9		       d0 13		      bne	notleft
   1114  f2fb							;left
   1115  f2fb				  -	      ifconst	pfres
   1116  f2fb				  -	      ldx	#pfres*4
   1117  f2fb					      else
   1118  f2fb		       a2 30		      ldx	#48
   1119  f2fd					      endif
   1120  f2fd				   leftloop
   1121  f2fd		       b5 a3		      lda	playfield-1,x
   1122  f2ff		       4a		      lsr
   1123  f300
   1124  f300				  -	      ifconst	superchip
   1125  f300				  -	      lda	playfield-2,x
   1126  f300				  -	      rol
   1127  f300				  -	      sta	playfield-130,x
   1128  f300				  -	      lda	playfield-3,x
   1129  f300				  -	      ror
   1130  f300				  -	      sta	playfield-131,x
   1131  f300				  -	      lda	playfield-4,x
   1132  f300				  -	      rol
   1133  f300				  -	      sta	playfield-132,x
   1134  f300				  -	      lda	playfield-1,x
   1135  f300				  -	      ror
   1136  f300				  -	      sta	playfield-129,x
   1137  f300					      else
   1138  f300		       36 a2		      rol	playfield-2,x
   1139  f302		       76 a1		      ror	playfield-3,x
   1140  f304		       36 a0		      rol	playfield-4,x
   1141  f306		       76 a3		      ror	playfield-1,x
   1142  f308					      endif
   1143  f308
   1144  f308		       8a		      txa
   1145  f309		       cb 04		      sbx	#4
   1146  f30b		       d0 f0		      bne	leftloop
      0  f30d					      RETURN
      1  f30d					      ifnconst	bankswitch
      2  f30d		       60		      rts
      3  f30e				  -	      else
      4  f30e				  -	      jmp	BS_return
      5  f30e					      endif
   1148  f30e
   1149  f30e				   notleft
   1150  f30e		       4a		      lsr
   1151  f30f		       90 13		      bcc	notright
   1152  f311							;right
   1153  f311
   1154  f311				  -	      ifconst	pfres
   1155  f311				  -	      ldx	#pfres*4
   1156  f311					      else
   1157  f311		       a2 30		      ldx	#48
   1158  f313					      endif
   1159  f313				   rightloop
   1160  f313		       b5 a0		      lda	playfield-4,x
   1161  f315		       4a		      lsr
   1162  f316				  -	      ifconst	superchip
   1163  f316				  -	      lda	playfield-3,x
   1164  f316				  -	      rol
   1165  f316				  -	      sta	playfield-131,x
   1166  f316				  -	      lda	playfield-2,x
   1167  f316				  -	      ror
   1168  f316				  -	      sta	playfield-130,x
   1169  f316				  -	      lda	playfield-1,x
   1170  f316				  -	      rol
   1171  f316				  -	      sta	playfield-129,x
   1172  f316				  -	      lda	playfield-4,x
   1173  f316				  -	      ror
   1174  f316				  -	      sta	playfield-132,x
   1175  f316					      else
   1176  f316		       36 a1		      rol	playfield-3,x
   1177  f318		       76 a2		      ror	playfield-2,x
   1178  f31a		       36 a3		      rol	playfield-1,x
   1179  f31c		       76 a0		      ror	playfield-4,x
   1180  f31e					      endif
   1181  f31e		       8a		      txa
   1182  f31f		       cb 04		      sbx	#4
   1183  f321		       d0 f0		      bne	rightloop
      0  f323					      RETURN
      1  f323					      ifnconst	bankswitch
      2  f323		       60		      rts
      3  f324				  -	      else
      4  f324				  -	      jmp	BS_return
      5  f324					      endif
   1185  f324
   1186  f324				   notright
   1187  f324		       4a		      lsr
   1188  f325		       90 49		      bcc	notup
   1189  f327							;up
   1190  f327		       4a		      lsr
   1191  f328		       90 02		      bcc	onedecup
   1192  f32a		       c6 ef		      dec	playfieldpos
   1193  f32c				   onedecup
   1194  f32c		       c6 ef		      dec	playfieldpos
   1195  f32e		       f0 02		      beq	shiftdown
   1196  f330		       10 3d		      bpl	noshiftdown2
   1197  f332				   shiftdown
   1198  f332				  -	      ifconst	pfrowheight
   1199  f332				  -	      lda	#pfrowheight
   1200  f332					      else
   1201  f332					      ifnconst	pfres
   1202  f332		       a9 08		      lda	#8
   1203  f334				  -	      else
   1204  f334				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f334					      endif
   1206  f334					      endif
   1207  f334
   1208  f334		       85 ef		      sta	playfieldpos
   1209  f336		       a5 a7		      lda	playfield+3
   1210  f338		       85 9f		      sta	temp4
   1211  f33a		       a5 a6		      lda	playfield+2
   1212  f33c		       85 9e		      sta	temp3
   1213  f33e		       a5 a5		      lda	playfield+1
   1214  f340		       85 9d		      sta	temp2
   1215  f342		       a5 a4		      lda	playfield
   1216  f344		       85 9c		      sta	temp1
   1217  f346		       a2 00		      ldx	#0
   1218  f348				   up2
   1219  f348		       b5 a8		      lda	playfield+4,x
   1220  f34a				  -	      ifconst	superchip
   1221  f34a				  -	      sta	playfield-128,x
   1222  f34a				  -	      lda	playfield+5,x
   1223  f34a				  -	      sta	playfield-127,x
   1224  f34a				  -	      lda	playfield+6,x
   1225  f34a				  -	      sta	playfield-126,x
   1226  f34a				  -	      lda	playfield+7,x
   1227  f34a				  -	      sta	playfield-125,x
   1228  f34a					      else
   1229  f34a		       95 a4		      sta	playfield,x
   1230  f34c		       b5 a9		      lda	playfield+5,x
   1231  f34e		       95 a5		      sta	playfield+1,x
   1232  f350		       b5 aa		      lda	playfield+6,x
   1233  f352		       95 a6		      sta	playfield+2,x
   1234  f354		       b5 ab		      lda	playfield+7,x
   1235  f356		       95 a7		      sta	playfield+3,x
   1236  f358					      endif
   1237  f358		       8a		      txa
   1238  f359		       cb fc		      sbx	#252
   1239  f35b				  -	      ifconst	pfres
   1240  f35b				  -	      cpx	#(pfres-1)*4
   1241  f35b					      else
   1242  f35b		       e0 2c		      cpx	#44
   1243  f35d					      endif
   1244  f35d		       d0 e9		      bne	up2
   1245  f35f
   1246  f35f		       a5 9f		      lda	temp4
   1247  f361
   1248  f361				  -	      ifconst	superchip
   1249  f361				  -	      ifconst	pfres
   1250  f361				  -	      sta	playfield+pfres*4-129
   1251  f361				  -	      lda	temp3
   1252  f361				  -	      sta	playfield+pfres*4-130
   1253  f361				  -	      lda	temp2
   1254  f361				  -	      sta	playfield+pfres*4-131
   1255  f361				  -	      lda	temp1
   1256  f361				  -	      sta	playfield+pfres*4-132
   1257  f361				  -	      else
   1258  f361				  -	      sta	playfield+47-128
   1259  f361				  -	      lda	temp3
   1260  f361				  -	      sta	playfield+46-128
   1261  f361				  -	      lda	temp2
   1262  f361				  -	      sta	playfield+45-128
   1263  f361				  -	      lda	temp1
   1264  f361				  -	      sta	playfield+44-128
   1265  f361				  -	      endif
   1266  f361					      else
   1267  f361				  -	      ifconst	pfres
   1268  f361				  -	      sta	playfield+pfres*4-1
   1269  f361				  -	      lda	temp3
   1270  f361				  -	      sta	playfield+pfres*4-2
   1271  f361				  -	      lda	temp2
   1272  f361				  -	      sta	playfield+pfres*4-3
   1273  f361				  -	      lda	temp1
   1274  f361				  -	      sta	playfield+pfres*4-4
   1275  f361					      else
   1276  f361		       85 d3		      sta	playfield+47
   1277  f363		       a5 9e		      lda	temp3
   1278  f365		       85 d2		      sta	playfield+46
   1279  f367		       a5 9d		      lda	temp2
   1280  f369		       85 d1		      sta	playfield+45
   1281  f36b		       a5 9c		      lda	temp1
   1282  f36d		       85 d0		      sta	playfield+44
   1283  f36f					      endif
   1284  f36f					      endif
   1285  f36f				   noshiftdown2
      0  f36f					      RETURN
      1  f36f					      ifnconst	bankswitch
      2  f36f		       60		      rts
      3  f370				  -	      else
      4  f370				  -	      jmp	BS_return
      5  f370					      endif
   1287  f370
   1288  f370
   1289  f370				   notup
   1290  f370							;down
   1291  f370		       4a		      lsr
   1292  f371		       b0 02		      bcs	oneincup
   1293  f373		       e6 ef		      inc	playfieldpos
   1294  f375				   oneincup
   1295  f375		       e6 ef		      inc	playfieldpos
   1296  f377		       a5 ef		      lda	playfieldpos
   1297  f379
   1298  f379				  -	      ifconst	pfrowheight
   1299  f379				  -	      cmp	#pfrowheight+1
   1300  f379					      else
   1301  f379					      ifnconst	pfres
   1302  f379		       c9 09		      cmp	#9
   1303  f37b				  -	      else
   1304  f37b				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37b					      endif
   1306  f37b					      endif
   1307  f37b
   1308  f37b		       90 3b		      bcc	noshiftdown
   1309  f37d		       a9 01		      lda	#1
   1310  f37f		       85 ef		      sta	playfieldpos
   1311  f381
   1312  f381				  -	      ifconst	pfres
   1313  f381				  -	      lda	playfield+pfres*4-1
   1314  f381				  -	      sta	temp4
   1315  f381				  -	      lda	playfield+pfres*4-2
   1316  f381				  -	      sta	temp3
   1317  f381				  -	      lda	playfield+pfres*4-3
   1318  f381				  -	      sta	temp2
   1319  f381				  -	      lda	playfield+pfres*4-4
   1320  f381					      else
   1321  f381		       a5 d3		      lda	playfield+47
   1322  f383		       85 9f		      sta	temp4
   1323  f385		       a5 d2		      lda	playfield+46
   1324  f387		       85 9e		      sta	temp3
   1325  f389		       a5 d1		      lda	playfield+45
   1326  f38b		       85 9d		      sta	temp2
   1327  f38d		       a5 d0		      lda	playfield+44
   1328  f38f					      endif
   1329  f38f
   1330  f38f		       85 9c		      sta	temp1
   1331  f391
   1332  f391				  -	      ifconst	pfres
   1333  f391				  -	      ldx	#(pfres-1)*4
   1334  f391					      else
   1335  f391		       a2 2c		      ldx	#44
   1336  f393					      endif
   1337  f393				   down2
   1338  f393		       b5 a3		      lda	playfield-1,x
   1339  f395				  -	      ifconst	superchip
   1340  f395				  -	      sta	playfield-125,x
   1341  f395				  -	      lda	playfield-2,x
   1342  f395				  -	      sta	playfield-126,x
   1343  f395				  -	      lda	playfield-3,x
   1344  f395				  -	      sta	playfield-127,x
   1345  f395				  -	      lda	playfield-4,x
   1346  f395				  -	      sta	playfield-128,x
   1347  f395					      else
   1348  f395		       95 a7		      sta	playfield+3,x
   1349  f397		       b5 a2		      lda	playfield-2,x
   1350  f399		       95 a6		      sta	playfield+2,x
   1351  f39b		       b5 a1		      lda	playfield-3,x
   1352  f39d		       95 a5		      sta	playfield+1,x
   1353  f39f		       b5 a0		      lda	playfield-4,x
   1354  f3a1		       95 a4		      sta	playfield,x
   1355  f3a3					      endif
   1356  f3a3		       8a		      txa
   1357  f3a4		       cb 04		      sbx	#4
   1358  f3a6		       d0 eb		      bne	down2
   1359  f3a8
   1360  f3a8		       a5 9f		      lda	temp4
   1361  f3aa				  -	      ifconst	superchip
   1362  f3aa				  -	      sta	playfield-125
   1363  f3aa				  -	      lda	temp3
   1364  f3aa				  -	      sta	playfield-126
   1365  f3aa				  -	      lda	temp2
   1366  f3aa				  -	      sta	playfield-127
   1367  f3aa				  -	      lda	temp1
   1368  f3aa				  -	      sta	playfield-128
   1369  f3aa					      else
   1370  f3aa		       85 a7		      sta	playfield+3
   1371  f3ac		       a5 9e		      lda	temp3
   1372  f3ae		       85 a6		      sta	playfield+2
   1373  f3b0		       a5 9d		      lda	temp2
   1374  f3b2		       85 a5		      sta	playfield+1
   1375  f3b4		       a5 9c		      lda	temp1
   1376  f3b6		       85 a4		      sta	playfield
   1377  f3b8					      endif
   1378  f3b8				   noshiftdown
      0  f3b8					      RETURN
      1  f3b8					      ifnconst	bankswitch
      2  f3b8		       60		      rts
      3  f3b9				  -	      else
      4  f3b9				  -	      jmp	BS_return
      5  f3b9					      endif
   1380  f3b9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b9
   1382  f3b9							;standard routines needed for pretty much all games
   1383  f3b9							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b9							; repositioning code and score pointer setup moved to overscan
   1385  f3b9							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b9
   1387  f3b9				   randomize
   1388  f3b9		       a5 a2		      lda	rand
   1389  f3bb		       4a		      lsr
   1390  f3bc					      ifconst	rand16
   1391  f3bc		       26 e5		      rol	rand16
   1392  f3be					      endif
   1393  f3be		       90 02		      bcc	noeor
   1394  f3c0		       49 b4		      eor	#$B4
   1395  f3c2				   noeor
   1396  f3c2		       85 a2		      sta	rand
   1397  f3c4					      ifconst	rand16
   1398  f3c4		       45 e5		      eor	rand16
   1399  f3c6					      endif
      0  f3c6					      RETURN
      1  f3c6					      ifnconst	bankswitch
      2  f3c6		       60		      rts
      3  f3c7				  -	      else
      4  f3c7				  -	      jmp	BS_return
      5  f3c7					      endif
   1401  f3c7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c7
   1403  f3c7				   drawscreen
   1404  f3c7				  -	      ifconst	debugscore
   1405  f3c7				  -	      ldx	#14
   1406  f3c7				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c7				  -
   1408  f3c7				  -	      ifconst	mincycles
   1409  f3c7				  -	      lda	mincycles
   1410  f3c7				  -	      cmp	INTIM
   1411  f3c7				  -	      lda	mincycles
   1412  f3c7				  -	      bcc	nochange
   1413  f3c7				  -	      lda	INTIM
   1414  f3c7				  -	      sta	mincycles
   1415  f3c7				  -nochange
   1416  f3c7				  -	      endif
   1417  f3c7				  -
   1418  f3c7				  -			; cmp #$2B
   1419  f3c7				  -			; bcs no_cycles_left
   1420  f3c7				  -	      bmi	cycles_left
   1421  f3c7				  -	      ldx	#64
   1422  f3c7				  -	      eor	#$ff	;make negative
   1423  f3c7				  -cycles_left
   1424  f3c7				  -	      stx	scorecolor
   1425  f3c7				  -	      and	#$7f	; clear sign bit
   1426  f3c7				  -	      tax
   1427  f3c7				  -	      lda	scorebcd,x
   1428  f3c7				  -	      sta	score+2
   1429  f3c7				  -	      lda	scorebcd1,x
   1430  f3c7				  -	      sta	score+1
   1431  f3c7				  -	      jmp	done_debugscore
   1432  f3c7				  -scorebcd
   1433  f3c7				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c7				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c7				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c7				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c7				  -scorebcd1
   1438  f3c7				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c7				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c7				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c7				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c7				  -done_debugscore
   1443  f3c7					      endif
   1444  f3c7
   1445  f3c7				  -	      ifconst	debugcycles
   1446  f3c7				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c7				  -			; cmp #$2B
   1448  f3c7				  -			; BCC overscan
   1449  f3c7				  -	      bmi	overscan
   1450  f3c7				  -	      sta	COLUBK
   1451  f3c7				  -	      bcs	doneoverscan
   1452  f3c7					      endif
   1453  f3c7
   1454  f3c7				   overscan
   1455  f3c7				  -	      ifconst	interlaced
   1456  f3c7				  -	      PHP
   1457  f3c7				  -	      PLA
   1458  f3c7				  -	      EOR	#4	; flip interrupt bit
   1459  f3c7				  -	      PHA
   1460  f3c7				  -	      PLP
   1461  f3c7				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c7				  -	      TAX		; save it for later
   1463  f3c7					      endif
   1464  f3c7
   1465  f3c7				   overscanloop
   1466  f3c7		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ca		       30 fb		      bmi	overscanloop
   1468  f3cc				   doneoverscan
   1469  f3cc
   1470  f3cc							;do VSYNC
   1471  f3cc
   1472  f3cc				  -	      ifconst	interlaced
   1473  f3cc				  -	      CPX	#4
   1474  f3cc				  -	      BNE	oddframevsync
   1475  f3cc					      endif
   1476  f3cc
   1477  f3cc		       a9 02		      lda	#2
   1478  f3ce		       85 02		      sta	WSYNC
   1479  f3d0		       85 00		      sta	VSYNC
   1480  f3d2		       85 02		      STA	WSYNC
   1481  f3d4		       85 02		      STA	WSYNC
   1482  f3d6		       4a		      lsr
   1483  f3d7		       85 02		      STA	WSYNC
   1484  f3d9		       85 00		      STA	VSYNC
   1485  f3db		       85 01		      sta	VBLANK
   1486  f3dd				  -	      ifnconst	overscan_time
   1487  f3dd				  -	      lda	#37+128
   1488  f3dd					      else
   1489  f3dd		       a9 a5		      lda	#overscan_time+128
   1490  f3df					      endif
   1491  f3df		       8d 96 02 	      sta	TIM64T
   1492  f3e2
   1493  f3e2				  -	      ifconst	interlaced
   1494  f3e2				  -	      jmp	postsync
   1495  f3e2				  -
   1496  f3e2				  -oddframevsync
   1497  f3e2				  -	      sta	WSYNC
   1498  f3e2				  -
   1499  f3e2				  -	      LDA	($80,X)	; 11 waste
   1500  f3e2				  -	      LDA	($80,X)	; 11 waste
   1501  f3e2				  -	      LDA	($80,X)	; 11 waste
   1502  f3e2				  -
   1503  f3e2				  -	      lda	#2
   1504  f3e2				  -	      sta	VSYNC
   1505  f3e2				  -	      sta	WSYNC
   1506  f3e2				  -	      sta	WSYNC
   1507  f3e2				  -	      sta	WSYNC
   1508  f3e2				  -
   1509  f3e2				  -	      LDA	($80,X)	; 11 waste
   1510  f3e2				  -	      LDA	($80,X)	; 11 waste
   1511  f3e2				  -	      LDA	($80,X)	; 11 waste
   1512  f3e2				  -
   1513  f3e2				  -	      lda	#0
   1514  f3e2				  -	      sta	VSYNC
   1515  f3e2				  -	      sta	VBLANK
   1516  f3e2				  -	      ifnconst	overscan_time
   1517  f3e2				  -	      lda	#37+128
   1518  f3e2				  -	      else
   1519  f3e2				  -	      lda	#overscan_time+128
   1520  f3e2				  -	      endif
   1521  f3e2				  -	      sta	TIM64T
   1522  f3e2				  -
   1523  f3e2				  -postsync
   1524  f3e2					      endif
   1525  f3e2
   1526  f3e2				  -	      ifconst	legacy
   1527  f3e2				  -	      if	legacy < 100
   1528  f3e2				  -	      ldx	#4
   1529  f3e2				  -adjustloop
   1530  f3e2				  -	      lda	player0x,x
   1531  f3e2				  -	      sec
   1532  f3e2				  -	      sbc	#14	;?
   1533  f3e2				  -	      sta	player0x,x
   1534  f3e2				  -	      dex
   1535  f3e2				  -	      bpl	adjustloop
   1536  f3e2				  -	      endif
   1537  f3e2					      endif
   1538  f3e2				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e2				  -	      repeat	($fa-(<*))
   1540  f3e2				  -	      nop
   1541  f3e2				  -	      repend
   1542  f3e2					      endif
   1543  f3e2		       85 02		      sta	WSYNC
   1544  f3e4		       a2 04		      ldx	#4
      0  f3e6					      SLEEP	3
      1  f3e6				   .CYCLES    SET	3
      2  f3e6
      3  f3e6				  -	      IF	.CYCLES < 2
      4  f3e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e6				  -	      ERR
      6  f3e6					      ENDIF
      7  f3e6
      8  f3e6					      IF	.CYCLES & 1
      9  f3e6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e6		       04 00		      nop	0
     11  f3e8				  -	      ELSE
     12  f3e8				  -	      bit	VSYNC
     13  f3e8					      ENDIF
     14  f3e8				   .CYCLES    SET	.CYCLES - 3
     15  f3e8					      ENDIF
     16  f3e8
     17  f3e8				  -	      REPEAT	.CYCLES / 2
     18  f3e8				  -	      nop
     19  f3e8					      REPEND
   1546  f3e8				   HorPosLoop		; 5
   1547  f3e8		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ea		       38		      sec		;+2 11
   1549  f3eb				   DivideLoop
   1550  f3eb		       e9 0f		      sbc	#15
   1551  f3ed		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3ef		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f1		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f3		       85 02		      sta	WSYNC
   1555  f3f5		       ca		      dex
   1556  f3f6		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f8							; 4
   1558  f3f8
   1559  f3f8		       a2 04		      ldx	#4
   1560  f3fa		       b4 9c		      ldy	temp1,X
   1561  f3fc		       b9 58 f3 	      lda	repostable-256,Y
   1562  f3ff		       95 20		      sta	HMP0,X	;+14 18
   1563  f401
   1564  f401		       ca		      dex
   1565  f402		       b4 9c		      ldy	temp1,X
   1566  f404		       b9 58 f3 	      lda	repostable-256,Y
   1567  f407		       95 20		      sta	HMP0,X	;+14 32
   1568  f409
   1569  f409		       ca		      dex
   1570  f40a		       b4 9c		      ldy	temp1,X
   1571  f40c		       b9 58 f3 	      lda	repostable-256,Y
   1572  f40f		       95 20		      sta	HMP0,X	;+14 46
   1573  f411
   1574  f411		       ca		      dex
   1575  f412		       b4 9c		      ldy	temp1,X
   1576  f414		       b9 58 f3 	      lda	repostable-256,Y
   1577  f417		       95 20		      sta	HMP0,X	;+14 60
   1578  f419
   1579  f419		       ca		      dex
   1580  f41a		       b4 9c		      ldy	temp1,X
   1581  f41c		       b9 58 f3 	      lda	repostable-256,Y
   1582  f41f		       95 20		      sta	HMP0,X	;+14 74
   1583  f421
   1584  f421		       85 02		      sta	WSYNC
   1585  f423
   1586  f423		       85 2a		      sta	HMOVE	;+3 3
   1587  f425
   1588  f425
   1589  f425				  -	      ifconst	legacy
   1590  f425				  -	      if	legacy < 100
   1591  f425				  -	      ldx	#4
   1592  f425				  -adjustloop2
   1593  f425				  -	      lda	player0x,x
   1594  f425				  -	      clc
   1595  f425				  -	      adc	#14	;?
   1596  f425				  -	      sta	player0x,x
   1597  f425				  -	      dex
   1598  f425				  -	      bpl	adjustloop2
   1599  f425				  -	      endif
   1600  f425					      endif
   1601  f425
   1602  f425
   1603  f425
   1604  f425
   1605  f425							;set score pointers
   1606  f425		       a7 95		      lax	score+2
   1607  f427		       20 58 f4 	      jsr	scorepointerset
   1608  f42a		       84 9b		      sty	scorepointers+5
   1609  f42c		       86 98		      stx	scorepointers+2
   1610  f42e		       a7 94		      lax	score+1
   1611  f430		       20 58 f4 	      jsr	scorepointerset
   1612  f433		       84 9a		      sty	scorepointers+4
   1613  f435		       86 97		      stx	scorepointers+1
   1614  f437		       a7 93		      lax	score
   1615  f439		       20 58 f4 	      jsr	scorepointerset
   1616  f43c		       84 99		      sty	scorepointers+3
   1617  f43e		       86 96		      stx	scorepointers
   1618  f440
   1619  f440				   vblk
   1620  f440							; run possible vblank bB code
   1621  f440				  -	      ifconst	vblank_bB_code
   1622  f440				  -	      jsr	vblank_bB_code
   1623  f440					      endif
   1624  f440				   vblk2
   1625  f440		       ad 84 02 	      LDA	INTIM
   1626  f443		       30 fb		      bmi	vblk2
   1627  f445		       4c 34 f0 	      jmp	kernel
   1628  f448
   1629  f448
   1630  f448		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f451		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f458				   repostable
   1633  f458
   1634  f458				   scorepointerset
   1635  f458		       29 0f		      and	#$0F
   1636  f45a		       0a		      asl
   1637  f45b		       0a		      asl
   1638  f45c		       0a		      asl
   1639  f45d		       69 9c		      adc	#<scoretable
   1640  f45f		       a8		      tay
   1641  f460		       8a		      txa
   1642  f461							; and #$F0
   1643  f461							; lsr
   1644  f461		       4b f0		      asr	#$F0
   1645  f463		       69 9c		      adc	#<scoretable
   1646  f465		       aa		      tax
   1647  f466		       60		      rts
   1648  f467							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1649  f467
   1650  f467				   minikernel		; display up to 6 lives on screen
   1651  f467		       85 02		      sta	WSYNC
   1652  f469		       a2 20		      ldx	#$20
   1653  f46b		       86 21		      stx	HMP1
   1654  f46d		       86 25		      stx	VDELP0
   1655  f46f		       a5 f3		      lda	lives
   1656  f471		       4a		      lsr
   1657  f472		       4a		      lsr
   1658  f473		       4a		      lsr
   1659  f474		       4a		      lsr
   1660  f475		       4a		      lsr
   1661  f476		       85 10		      sta	RESP0
   1662  f478		       85 11		      sta	RESP1
   1663  f47a		       86 26		      stx	VDELP1
   1664  f47c		       aa		      tax
   1665  f47d		       bd 17 f5 	      lda	lifenusiz0table,x
   1666  f480		       85 04		      sta	NUSIZ0
   1667  f482		       bd 16 f5 	      lda	lifenusiz1table,x
   1668  f485		       85 05		      sta	NUSIZ1
   1669  f487		       a5 f4		      lda	lifecolor
   1670  f489		       85 06		      sta	COLUP0
   1671  f48b		       85 07		      sta	COLUP1
   1672  f48d		       a9 10		      lda	#$10
   1673  f48f		       85 20		      sta	HMP0
   1674  f491
   1675  f491		       a5 f5		      lda	statusbarlength
   1676  f493		       4a		      lsr
   1677  f494		       4a		      lsr
   1678  f495		       4a		      lsr		; 0-31
   1679  f496							; 3 cases: 0-7, 8-15, 16-24
   1680  f496							; if 0-7, temp1=val, temp2=0, temp3=0
   1681  f496							; if 8-15, temp1=255, temp2=val (rev), temp3=0
   1682  f496							; if 16-23, temp1=255, temp2=255, temp3=val
   1683  f496		       a8		      tay
   1684  f497
   1685  f497		       85 2a		      sta	HMOVE	;cycle 74?
   1686  f499
   1687  f499					      ifconst	statusbarcolor
   1688  f499							; only write COLUPF if color variable exists, otherwise use existing PF color
   1689  f499		       a5 e6		      lda	statusbarcolor
   1690  f49b		       85 08		      sta	COLUPF
   1691  f49d					      endif
   1692  f49d
   1693  f49d		       c0 08		      cpy	#8
   1694  f49f		       90 17		      bcc	zero_7
   1695  f4a1		       c0 10		      cpy	#16
   1696  f4a3		       90 23		      bcc	eight_15
   1697  f4a5		       a9 ff		      lda	#255
   1698  f4a7		       85 9c		      sta	temp1
   1699  f4a9		       85 9d		      sta	temp2
   1700  f4ab		       b9 0f f5 	      lda	statustable-16,y
   1701  f4ae		       85 9e		      sta	temp3
   1702  f4b0		       b9 1f f5 	      lda	statustable,y
   1703  f4b3		       85 9f		      sta	temp4
   1704  f4b5		       4c d7 f4 	      jmp	startlifedisplay
   1705  f4b8
   1706  f4b8				   zero_7
   1707  f4b8		       a9 00		      lda	#0
   1708  f4ba		       85 9f		      sta	temp4
   1709  f4bc		       85 9e		      sta	temp3
   1710  f4be		       85 9d		      sta	temp2
   1711  f4c0		       b9 1f f5 	      lda	statustable,y
   1712  f4c3		       85 9c		      sta	temp1
   1713  f4c5		       4c d7 f4 	      jmp	startlifedisplay
   1714  f4c8				   eight_15
   1715  f4c8		       a9 ff		      lda	#255
   1716  f4ca		       85 9c		      sta	temp1
   1717  f4cc		       a9 00		      lda	#0
   1718  f4ce		       85 9f		      sta	temp4
   1719  f4d0		       85 9e		      sta	temp3
   1720  f4d2		       b9 2f f5 	      lda	statustable+16,y
   1721  f4d5		       85 9d		      sta	temp2
   1722  f4d7				   startlifedisplay
   1723  f4d7		       a0 07		      ldy	#7
   1724  f4d9				   lifeloop
   1725  f4d9		       85 02		      sta	WSYNC
   1726  f4db		       86 0d		      stx	PF0
   1727  f4dd		       b1 f2		      lda	(lifepointer),y
   1728  f4df		       e0 00		      cpx	#0
   1729  f4e1		       d0 01		      bne	onelife
   1730  f4e3		       0c		      .byte.b	$0C
   1731  f4e4				   onelife
   1732  f4e4		       85 1b		      sta	GRP0
   1733  f4e6
   1734  f4e6		       e0 02		      cpx	#2
   1735  f4e8		       b0 01		      bcs	nolives
   1736  f4ea		       0c		      .byte.b	$0C
   1737  f4eb				   nolives
   1738  f4eb		       85 1c		      sta	GRP1
   1739  f4ed		       a5 9f		      lda	temp4
   1740  f4ef		       85 0d		      sta	PF0
   1741  f4f1		       a5 9c		      lda	temp1
   1742  f4f3		       85 0f		      sta	PF2
   1743  f4f5		       a5 9e		      lda	temp3
   1744  f4f7		       85 0e		      sta	PF1
   1745  f4f9		       a5 9d		      lda	temp2
   1746  f4fb		       85 0f		      sta	PF2	;cycle 48!
   1747  f4fd		       68		      pla		; waste 14 cycles in 4 bytes
   1748  f4fe		       48		      pha		;
   1749  f4ff		       68		      pla		;
   1750  f500		       48		      pha		; Shouldn't hurt anything!
   1751  f501		       a9 00		      lda	#0
   1752  f503		       88		      dey
   1753  f504		       85 0e		      sta	PF1
   1754  f506		       10 d1		      bpl	lifeloop
   1755  f508		       85 02		      sta	WSYNC
   1756  f50a		       c8		      iny
   1757  f50b		       84 0d		      sty	PF0
   1758  f50d		       84 0f		      sty	PF2
   1759  f50f		       84 0e		      sty	PF1
   1760  f511		       84 1b		      sty	GRP0
   1761  f513		       84 1c		      sty	GRP1
   1762  f515		       60		      rts
   1763  f516
   1764  f516				  -	      if	(<*) > $F5
   1765  f516				  -	      align	256
   1766  f516					      endif
   1767  f516				   lifenusiz1table
   1768  f516		       00		      .byte.b	0
   1769  f517				   lifenusiz0table
   1770  f517		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
   1771  f51f
   1772  f51f				   statustable		; warning: page-wrapping might cause issues
   1773  f51f							;0-7 and 16+
   1774  f51f		       00		      .byte.b	%00000000
   1775  f520		       01		      .byte.b	%00000001
   1776  f521		       03		      .byte.b	%00000011
   1777  f522		       07		      .byte.b	%00000111
   1778  f523		       0f		      .byte.b	%00001111
   1779  f524		       1f		      .byte.b	%00011111
   1780  f525		       3f		      .byte.b	%00111111
   1781  f526		       7f		      .byte.b	%01111111
   1782  f527		       ff		      .byte.b	255
   1783  f528		       ff		      .byte.b	255
   1784  f529		       ff		      .byte.b	255
   1785  f52a		       ff		      .byte.b	255
   1786  f52b		       ff		      .byte.b	255
   1787  f52c		       ff		      .byte.b	255
   1788  f52d		       ff		      .byte.b	255
   1789  f52e		       ff		      .byte.b	255
   1790  f52f							; 8-15
   1791  f52f		       00		      .byte.b	0
   1792  f530		       00		      .byte.b	0
   1793  f531		       00		      .byte.b	0
   1794  f532		       00		      .byte.b	0
   1795  f533		       00		      .byte.b	0
   1796  f534		       00		      .byte.b	0
   1797  f535		       00		      .byte.b	0
   1798  f536		       00		      .byte.b	0
   1799  f537		       00		      .byte.b	%00000000
   1800  f538		       80		      .byte.b	%10000000
   1801  f539		       c0		      .byte.b	%11000000
   1802  f53a		       e0		      .byte.b	%11100000
   1803  f53b		       f0		      .byte.b	%11110000
   1804  f53c		       f8		      .byte.b	%11111000
   1805  f53d		       fc		      .byte.b	%11111100
   1806  f53e		       fe		      .byte.b	%11111110
   1807  f53f
   1808  f53f				   game
   1809  f53f				   .L00 		;  rem Generated 7/20/2022 07:10:21 PM by Visual bB Version 1.0.0.568
   1810  f53f
   1811  f53f				   .L01 		;  rem **********************************
   1812  f53f
   1813  f53f				   .L02 		;  rem *<Apple Slayer> 		 *
   1814  f53f
   1815  f53f				   .L03 		;  rem *<Fruit Ninja like game>	 *
   1816  f53f
   1817  f53f				   .L04 		;  rem *<Felipe and Tomaz>		 *
   1818  f53f
   1819  f53f				   .L05 		;  rem *<contact info> 		 *
   1820  f53f
   1821  f53f				   .L06 		;  rem *<free>			       *
   1822  f53f
   1823  f53f				   .L07 		;  rem **********************************
   1824  f53f
   1825  f53f				   .
   1826  f53f							; 
   1827  f53f
   1828  f53f				   .L08 		;  set kernel_options pfcolors
   1829  f53f
   1830  f53f				   .L09 		;  set romsize 4k
   1831  f53f
   1832  f53f				   .L010		;  set tv ntsc
   1833  f53f
   1834  f53f				   .L011		;  include 6lives_statusbar.asm
   1835  f53f
   1836  f53f				   .L012		;  statusbarlength  =	144
   1837  f53f
   1838  f53f		       a9 90		      LDA	#144
   1839  f541		       85 f5		      STA	statusbarlength
   1840  f543				   .L013		;  const scorefade  =	0
   1841  f543
   1842  f543				   .L014		;  scorecolor	=  $1C
   1843  f543
   1844  f543		       a9 1c		      LDA	#$1C
   1845  f545		       85 a3		      STA	scorecolor
   1846  f547				   .L015		;  const logo_color = $0E
   1847  f547
   1848  f547				   .L016		;  const logo_height = 75
   1849  f547
   1850  f547				   .L017		;  COLUBK = $00
   1851  f547
   1852  f547		       a9 00		      LDA	#$00
   1853  f549		       85 09		      STA	COLUBK
   1854  f54b				   .
   1855  f54b							; 
   1856  f54b
   1857  f54b				   .
   1858  f54b							; 
   1859  f54b
   1860  f54b				   .L018		;  dim sounda	=  a
   1861  f54b
   1862  f54b				   .L019		;  dim soundb	=  b
   1863  f54b
   1864  f54b				   .L020		;  dim counter  =  c
   1865  f54b
   1866  f54b				   .L021		;  dim d  =  d
   1867  f54b
   1868  f54b				   .L022		;  dim e  =  e
   1869  f54b
   1870  f54b				   .L023		;  dim f  =  f
   1871  f54b
   1872  f54b				   .L024		;  dim g  =  g
   1873  f54b
   1874  f54b				   .L025		;  dim h  =  h
   1875  f54b
   1876  f54b				   .L026		;  dim i  =  i
   1877  f54b
   1878  f54b				   .L027		;  dim j  =  j
   1879  f54b
   1880  f54b				   .L028		;  dim k  =  k
   1881  f54b
   1882  f54b				   .L029		;  dim l  =  l
   1883  f54b
   1884  f54b				   .L030		;  dim m  =  m
   1885  f54b
   1886  f54b				   .L031		;  dim n  =  n
   1887  f54b
   1888  f54b				   .L032		;  dim o  =  o
   1889  f54b
   1890  f54b				   .L033		;  dim p  =  p
   1891  f54b
   1892  f54b				   .L034		;  dim q  =  q
   1893  f54b
   1894  f54b				   .L035		;  dim rand16	=  r
   1895  f54b
   1896  f54b				   .L036		;  dim statusbarcolor	=  s
   1897  f54b
   1898  f54b				   .L037		;  dim t  =  t
   1899  f54b
   1900  f54b				   .L038		;  dim u  =  u
   1901  f54b
   1902  f54b				   .L039		;  dim v  =  v
   1903  f54b
   1904  f54b				   .L040		;  dim w  =  w
   1905  f54b
   1906  f54b				   .L041		;  dim x  =  x
   1907  f54b
   1908  f54b				   .L042		;  dim y  =  y
   1909  f54b
   1910  f54b				   .L043		;  dim z  =  z
   1911  f54b
   1912  f54b				   .L044		;  dim _sc1  =  score
   1913  f54b
   1914  f54b				   .L045		;  dim _sc2  =  score + 1
   1915  f54b
   1916  f54b				   .L046		;  dim _sc3  =  score + 2
   1917  f54b
   1918  f54b				   .
   1919  f54b							; 
   1920  f54b
   1921  f54b				   .L047		;  rem start/restart ........................................................................
   1922  f54b
   1923  f54b				   .
   1924  f54b							; 
   1925  f54b
   1926  f54b				   .start_restart
   1927  f54b							; start_restart
   1928  f54b
   1929  f54b				   .
   1930  f54b							; 
   1931  f54b
   1932  f54b				   .L048		;  AUDV0  =  0  :  AUDV1  =  0
   1933  f54b
   1934  f54b		       a9 00		      LDA	#0
   1935  f54d		       85 19		      STA	AUDV0
   1936  f54f		       85 1a		      STA	AUDV1
   1937  f551				   .L049		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1938  f551
   1939  f551		       a9 00		      LDA	#0
   1940  f553		       85 d4		      STA	a
   1941  f555		       85 d5		      STA	b
   1942  f557		       85 d6		      STA	c
   1943  f559		       85 d7		      STA	d
   1944  f55b		       85 d8		      STA	e
   1945  f55d		       85 d9		      STA	f
   1946  f55f		       85 da		      STA	g
   1947  f561		       85 db		      STA	h
   1948  f563		       85 dc		      STA	i
   1949  f565				   .L050		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1950  f565
   1951  f565		       a9 00		      LDA	#0
   1952  f567		       85 dd		      STA	j
   1953  f569		       85 de		      STA	k
   1954  f56b		       85 df		      STA	l
   1955  f56d		       85 e0		      STA	m
   1956  f56f		       85 e1		      STA	n
   1957  f571		       85 e2		      STA	o
   1958  f573		       85 e3		      STA	p
   1959  f575		       85 e4		      STA	q
   1960  f577		       85 e5		      STA	r
   1961  f579				   .L051		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  z  =  0
   1962  f579
   1963  f579		       a9 00		      LDA	#0
   1964  f57b		       85 e6		      STA	s
   1965  f57d		       85 e7		      STA	t
   1966  f57f		       85 e8		      STA	u
   1967  f581		       85 e9		      STA	v
   1968  f583		       85 ea		      STA	w
   1969  f585		       85 eb		      STA	x
   1970  f587		       85 ed		      STA	z
   1971  f589				   .L052		;  player0y  =  200  :  player1y  =  200  :  bally  =	200
   1972  f589
   1973  f589		       a9 c8		      LDA	#200
   1974  f58b		       85 85		      STA	player0y
   1975  f58d		       85 86		      STA	player1y
   1976  f58f		       85 89		      STA	bally
   1977  f591				   .
   1978  f591							; 
   1979  f591
   1980  f591				   .L053		;  rem title ........................................................................
   1981  f591
   1982  f591				   .
   1983  f591							; 
   1984  f591
   1985  f591				   .SubTitleLoop
   1986  f591							; SubTitleLoop
   1987  f591
   1988  f591				   .L054		;  if joy0fire then goto main
   1989  f591
   1990  f591		       24 0c		      bit	INPT4
   1991  f593		       30 03		      BMI	.skipL054
   1992  f595				   .condpart0
   1993  f595		       4c 96 f8 	      jmp	.main
   1994  f598
   1995  f598				   .skipL054
   1996  f598				   .L055		;  gosub drawlogo
   1997  f598
   1998  f598		       20 60 f6 	      jsr	.drawlogo
   1999  f59b
   2000  f59b				   .L056		;  goto SubTitleLoop
   2001  f59b
   2002  f59b		       4c 91 f5 	      jmp	.SubTitleLoop
   2003  f59e
   2004  f59e				   .
   2005  f59e							; 
   2006  f59e
   2007  f59e				   .SubMainLoop
   2008  f59e							; SubMainLoop
   2009  f59e
   2010  f59e				   .L057		;  COLUPF = $0E
   2011  f59e
   2012  f59e		       a9 0e		      LDA	#$0E
   2013  f5a0		       85 08		      STA	COLUPF
   2014  f5a2				   .L058		;  drawscreen
   2015  f5a2
   2016  f5a2		       20 c7 f3 	      jsr	drawscreen
   2017  f5a5				   .L059		;  goto SubMainLoop
   2018  f5a5
   2019  f5a5		       4c 9e f5 	      jmp	.SubMainLoop
   2020  f5a8
   2021  f5a8				   .L060		;  inline abb.asm
   2022  f5a8
------- FILE abb.asm LEVEL 2 PASS 3
      0  f5a8					      include	abb.asm
      1  f5a8				   LogoFrame
      0  f5a8					      VERTICAL_SYNC
      1  f5a8		       a9 02		      LDA	#$02
      2  f5aa		       85 02		      STA	WSYNC
      3  f5ac		       85 00		      STA	VSYNC
      4  f5ae		       85 02		      STA	WSYNC
      5  f5b0		       85 02		      STA	WSYNC
      6  f5b2		       4a		      LSR
      7  f5b3		       85 02		      STA	WSYNC
      8  f5b5		       85 00		      STA	VSYNC
      3  f5b7
      4  f5b7							; 37 lines of VBLANK
      5  f5b7		       a9 2c		      lda	#44	; 2	 (5)
      6  f5b9		       8d 96 02 	      sta	TIM64T	; 3	 (8)
      0  f5bc					      sleep	5	; 5	 (13)
      1  f5bc				   .CYCLES    SET	5
      2  f5bc
      3  f5bc				  -	      IF	.CYCLES < 2
      4  f5bc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5bc				  -	      ERR
      6  f5bc					      ENDIF
      7  f5bc
      8  f5bc					      IF	.CYCLES & 1
      9  f5bc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5bc		       04 00		      nop	0
     11  f5be				  -	      ELSE
     12  f5be				  -	      bit	VSYNC
     13  f5be					      ENDIF
     14  f5be				   .CYCLES    SET	.CYCLES - 3
     15  f5be					      ENDIF
     16  f5be
     17  f5be					      REPEAT	.CYCLES / 2
     18  f5be		       ea		      nop
     19  f5bf					      REPEND
      8  f5bf		       a9 01		      lda	#1	; 2	 (15)
      9  f5c1		       85 25		      sta	VDELP0	; 3	 (18)
     10  f5c3		       85 26		      sta	VDELP1	; 3	 (21)
     11  f5c5		       a9 a6		      lda	#$A6	; 2	 (23)
     12  f5c7		       85 08		      sta	COLUPF	; 3	 (26)
      0  f5c9					      sleep	10	; 10	 (36)
      1  f5c9				   .CYCLES    SET	10
      2  f5c9
      3  f5c9				  -	      IF	.CYCLES < 2
      4  f5c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5c9				  -	      ERR
      6  f5c9					      ENDIF
      7  f5c9
      8  f5c9				  -	      IF	.CYCLES & 1
      9  f5c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5c9				  -	      nop	0
     11  f5c9				  -	      ELSE
     12  f5c9				  -	      bit	VSYNC
     13  f5c9				  -	      ENDIF
     14  f5c9				  -.CYCLES    SET	.CYCLES - 3
     15  f5c9					      ENDIF
     16  f5c9
     17  f5c9					      REPEAT	.CYCLES / 2
     18  f5c9		       ea		      nop
     17  f5c9					      REPEND
     18  f5ca		       ea		      nop
     17  f5ca					      REPEND
     18  f5cb		       ea		      nop
     17  f5cb					      REPEND
     18  f5cc		       ea		      nop
     17  f5cc					      REPEND
     18  f5cd		       ea		      nop
     19  f5ce					      REPEND
     14  f5ce		       85 10		      sta	RESP0	; 3	 (39)
     15  f5d0		       85 11		      sta	RESP1	; 3	 (42)
     16  f5d2		       a9 20		      lda	#$20	; 2	 (44)
     17  f5d4		       85 21		      sta	HMP1	; 2	 (47)
     18  f5d6		       a9 10		      lda	#$10	; 2	 (49)
     19  f5d8		       85 20		      sta	HMP0	; 3	 (52)
     20  f5da		       a9 33		      lda	#$33	; 2	 (54)
     21  f5dc		       85 04		      sta	NUSIZ0	; 3	 (57)
     22  f5de		       85 05		      STA	NUSIZ1	; 3	 (60)
     23  f5e0		       85 02		      sta	WSYNC
     24  f5e2		       85 2a		      sta	HMOVE
     25  f5e4		       a9 0e		      lda	#logo_color
     26  f5e6		       85 06		      sta	COLUP0
     27  f5e8		       85 07		      sta	COLUP1
     28  f5ea
     29  f5ea
     30  f5ea				   LogoWaitVBlank
     31  f5ea		       ad 84 02 	      lda	INTIM
     32  f5ed		       d0 fb		      bne	LogoWaitVBlank	; loop until timer expires
     33  f5ef		       85 02		      sta	WSYNC
     34  f5f1
     35  f5f1							; disable VBLANK
     36  f5f1		       a9 00		      lda	#0
     37  f5f3		       85 01		      sta	VBLANK
     38  f5f5
     39  f5f5							; waste 51 scanlines
     40  f5f5							;	ldx #51
     41  f5f5		       a2 3b		      ldx	#(96 - (logo_height/2))
     42  f5f7				   LogoVisibleScreen
     43  f5f7		       85 02		      sta	WSYNC
     44  f5f9		       ca		      dex
     45  f5fa		       d0 fb		      bne	LogoVisibleScreen
     46  f5fc
     47  f5fc
     48  f5fc
     49  f5fc							; Blank Screen and Set Playfield
     50  f5fc
     51  f5fc		       a0 4a		      ldy	#logo_height-1
     52  f5fe		       b9 4b f8 	      lda	logo_colors,y
     53  f601		       85 06		      sta	COLUP0
     54  f603		       85 07		      sta	COLUP1
     55  f605
     56  f605		       4c 08 f6 	      jmp	LogoLoop
     57  f608
     58  f608				  -	      if	>. != >[.+(logo_kernel_size)]
     59  f608				  -	      align	256
     60  f608					      endif
     61  f608
     62  f608
     63  f608				   LogoLoop
     64  f608		       85 02		      sta	WSYNC	; 3	 (0)
     65  f60a		       84 9c		      sty	temp1	; 3	 (3)
     66  f60c		       b9 68 f6 	      lda	logo_0,y	; 4	 (7)
     67  f60f		       85 1b		      sta	GRP0	; 3	 (10) 0 -> [GRP0]
     68  f611		       b9 b3 f6 	      lda	logo_1,y	; 4	 (14)
     69  f614		       85 1c		      sta	GRP1	; 3	 (17) 1 -> [GRP1] ; 0 -> GRP0
     70  f616		       b9 00 f7 	      lda	logo_2,y	; 4	 (21)
     71  f619		       85 1b		      sta	GRP0	; 3	 (24*) 2 -> [GRP0] ; 1 -> GRP1
     72  f61b		       be 96 f7 	      ldx	logo_4,y	; 4	 (28) 4 -> X
     73  f61e		       b9 00 f8 	      lda	logo_5,y	; 4	 (32)
     74  f621		       85 9d		      sta	temp2	; 3	 (35)
     75  f623		       b9 4b f7 	      lda	logo_3,y	; 4	 (39) 3 -> A
     76  f626		       a4 9d		      ldy	temp2	; 3	 (42) 5 -> Y
     77  f628		       85 1c		      sta	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
     78  f62a		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
     79  f62c		       84 1c		      sty	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
     80  f62e		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
     81  f630		       a4 9c		      ldy	temp1	; 3	 (57)
     82  f632		       b9 4a f8 	      lda	logo_colors-1,y	; 4	 (61)
     83  f635		       85 06		      sta	COLUP0	; 3	 (64)
     84  f637		       85 07		      sta	COLUP1	; 3	 (67)
     85  f639		       88		      dey		; 2	 (69)
     86  f63a		       10 cc		      bpl	LogoLoop	; 3	 (72)
     87  f63a		       00 34	   logo_kernel_size =	* - LogoLoop
     88  f63c
     89  f63c		       a0 00		      ldy	#0
     90  f63e		       84 1b		      sty	GRP0
     91  f640		       84 1c		      sty	GRP1
     92  f642		       84 1b		      sty	GRP0
     93  f644		       84 1c		      sty	GRP1
     94  f646							;	ldx #40
     95  f646		       a2 3a		      ldx	#((96 - (logo_height/2))-1)
     96  f648				   LogoGap
     97  f648		       85 02		      sta	WSYNC
     98  f64a		       ca		      dex		; 2	 (2)
     99  f64b		       d0 fb		      bne	LogoGap	; 2	 (4)
    100  f64d
    101  f64d				   LogoOverscanStart
    102  f64d							; Enable VBLANK
    103  f64d		       a9 02		      lda	#2
    104  f64f		       85 01		      sta	VBLANK
    105  f651							; overscan
    106  f651		       a2 23		      ldx	#35
    107  f653		       8e 96 02 	      stx	TIM64T
    108  f656		       ad 84 02 	      lda	INTIM
    109  f659		       18		      clc
    110  f65a		       69 80		      adc	#128
    111  f65c		       8d 96 02 	      sta	TIM64T
    112  f65f		       60		      rts
    113  f660
    114  f660				   .drawlogo
    115  f660		       ad 84 02 	      lda	INTIM
    116  f663		       30 fb		      bmi	.drawlogo	; loop until timer expires
    117  f665		       4c a8 f5 	      jmp	LogoFrame
    118  f668
    119  f668
    120  f668				  -	      if	>. != >[.+(logo_height)]
    121  f668				  -	      align	256
    122  f668					      endif
    123  f668
    124  f668							; Paste image information here
    125  f668
    126  f668				   logo_0
    127  f668		       00		      BYTE.b	%00000000
    128  f669		       00		      BYTE.b	%00000000
    129  f66a		       00		      BYTE.b	%00000000
    130  f66b		       00		      BYTE.b	%00000000
    131  f66c		       00		      BYTE.b	%00000000
    132  f66d		       00		      BYTE.b	%00000000
    133  f66e		       00		      BYTE.b	%00000000
    134  f66f		       00		      BYTE.b	%00000000
    135  f670		       00		      BYTE.b	%00000000
    136  f671		       00		      BYTE.b	%00000000
    137  f672		       00		      BYTE.b	%00000000
    138  f673		       00		      BYTE.b	%00000000
    139  f674		       00		      BYTE.b	%00000000
    140  f675		       00		      BYTE.b	%00000000
    141  f676		       00		      BYTE.b	%00000000
    142  f677		       00		      BYTE.b	%00000000
    143  f678		       00		      BYTE.b	%00000000
    144  f679		       00		      BYTE.b	%00000000
    145  f67a		       00		      BYTE.b	%00000000
    146  f67b		       01		      BYTE.b	%00000001
    147  f67c		       01		      BYTE.b	%00000001
    148  f67d		       01		      BYTE.b	%00000001
    149  f67e		       03		      BYTE.b	%00000011
    150  f67f		       00		      BYTE.b	%00000000
    151  f680		       00		      BYTE.b	%00000000
    152  f681		       00		      BYTE.b	%00000000
    153  f682		       02		      BYTE.b	%00000010
    154  f683		       02		      BYTE.b	%00000010
    155  f684		       02		      BYTE.b	%00000010
    156  f685		       02		      BYTE.b	%00000010
    157  f686		       02		      BYTE.b	%00000010
    158  f687		       02		      BYTE.b	%00000010
    159  f688		       02		      BYTE.b	%00000010
    160  f689		       02		      BYTE.b	%00000010
    161  f68a		       22		      BYTE.b	%00100010
    162  f68b		       22		      BYTE.b	%00100010
    163  f68c		       12		      BYTE.b	%00010010
    164  f68d		       12		      BYTE.b	%00010010
    165  f68e		       0a		      BYTE.b	%00001010
    166  f68f		       0a		      BYTE.b	%00001010
    167  f690		       07		      BYTE.b	%00000111
    168  f691		       07		      BYTE.b	%00000111
    169  f692		       3f		      BYTE.b	%00111111
    170  f693		       02		      BYTE.b	%00000010
    171  f694		       02		      BYTE.b	%00000010
    172  f695		       02		      BYTE.b	%00000010
    173  f696		       02		      BYTE.b	%00000010
    174  f697		       00		      BYTE.b	%00000000
    175  f698		       00		      BYTE.b	%00000000
    176  f699		       00		      BYTE.b	%00000000
    177  f69a		       00		      BYTE.b	%00000000
    178  f69b		       02		      BYTE.b	%00000010
    179  f69c		       02		      BYTE.b	%00000010
    180  f69d		       02		      BYTE.b	%00000010
    181  f69e		       02		      BYTE.b	%00000010
    182  f69f		       02		      BYTE.b	%00000010
    183  f6a0		       02		      BYTE.b	%00000010
    184  f6a1		       02		      BYTE.b	%00000010
    185  f6a2		       22		      BYTE.b	%00100010
    186  f6a3		       22		      BYTE.b	%00100010
    187  f6a4		       12		      BYTE.b	%00010010
    188  f6a5		       12		      BYTE.b	%00010010
    189  f6a6		       0a		      BYTE.b	%00001010
    190  f6a7		       0a		      BYTE.b	%00001010
    191  f6a8		       07		      BYTE.b	%00000111
    192  f6a9		       07		      BYTE.b	%00000111
    193  f6aa		       3f		      BYTE.b	%00111111
    194  f6ab		       02		      BYTE.b	%00000010
    195  f6ac		       02		      BYTE.b	%00000010
    196  f6ad		       02		      BYTE.b	%00000010
    197  f6ae		       02		      BYTE.b	%00000010
    198  f6af		       00		      BYTE.b	%00000000
    199  f6b0		       00		      BYTE.b	%00000000
    200  f6b1		       00		      BYTE.b	%00000000
    201  f6b2		       00		      BYTE.b	%00000000
    202  f6b3
    203  f6b3
    204  f6b3				  -	      if	>. != >[.+(logo_height)]
    205  f6b3				  -	      align	256
    206  f6b3					      endif
    207  f6b3
    208  f6b3				   logo_1
    209  f6b3		       00		      BYTE.b	%00000000
    210  f6b4		       44		      BYTE.b	%01000100
    211  f6b5		       4a		      BYTE.b	%01001010
    212  f6b6		       4a		      BYTE.b	%01001010
    213  f6b7		       4a		      BYTE.b	%01001010
    214  f6b8		       4a		      BYTE.b	%01001010
    215  f6b9		       e4		      BYTE.b	%11100100
    216  f6ba		       00		      BYTE.b	%00000000
    217  f6bb		       00		      BYTE.b	%00000000
    218  f6bc		       45		      BYTE.b	%01000101
    219  f6bd		       45		      BYTE.b	%01000101
    220  f6be		       65		      BYTE.b	%01100101
    221  f6bf		       57		      BYTE.b	%01010111
    222  f6c0		       55		      BYTE.b	%01010101
    223  f6c1		       55		      BYTE.b	%01010101
    224  f6c2		       65		      BYTE.b	%01100101
    225  f6c3		       00		      BYTE.b	%00000000
    226  f6c4		       00		      BYTE.b	%00000000
    227  f6c5		       01		      BYTE.b	%00000001
    228  f6c6		       2a		      BYTE.b	%00101010
    229  f6c7		       2b		      BYTE.b	%00101011
    230  f6c8		       3a		      BYTE.b	%00111010
    231  f6c9		       ab		      BYTE.b	%10101011
    232  f6ca		       00		      BYTE.b	%00000000
    233  f6cb		       00		      BYTE.b	%00000000
    234  f6cc		       00		      BYTE.b	%00000000
    235  f6cd		       10		      BYTE.b	%00010000
    236  f6ce		       14		      BYTE.b	%00010100
    237  f6cf		       16		      BYTE.b	%00010110
    238  f6d0		       15		      BYTE.b	%00010101
    239  f6d1		       14		      BYTE.b	%00010100
    240  f6d2		       12		      BYTE.b	%00010010
    241  f6d3		       1f		      BYTE.b	%00011111
    242  f6d4		       02		      BYTE.b	%00000010
    243  f6d5		       0f		      BYTE.b	%00001111
    244  f6d6		       18		      BYTE.b	%00011000
    245  f6d7		       54		      BYTE.b	%01010100
    246  f6d8		       53		      BYTE.b	%01010011
    247  f6d9		       91		      BYTE.b	%10010001
    248  f6da		       90		      BYTE.b	%10010000
    249  f6db		       0f		      BYTE.b	%00001111
    250  f6dc		       11		      BYTE.b	%00010001
    251  f6dd		       c9		      BYTE.b	%11001001
    252  f6de		       04		      BYTE.b	%00000100
    253  f6df		       02		      BYTE.b	%00000010
    254  f6e0		       01		      BYTE.b	%00000001
    255  f6e1		       01		      BYTE.b	%00000001
    256  f6e2		       00		      BYTE.b	%00000000
    257  f6e3		       00		      BYTE.b	%00000000
    258  f6e4		       00		      BYTE.b	%00000000
    259  f6e5		       00		      BYTE.b	%00000000
    260  f6e6		       02		      BYTE.b	%00000010
    261  f6e7		       02		      BYTE.b	%00000010
    262  f6e8		       02		      BYTE.b	%00000010
    263  f6e9		       02		      BYTE.b	%00000010
    264  f6ea		       02		      BYTE.b	%00000010
    265  f6eb		       02		      BYTE.b	%00000010
    266  f6ec		       02		      BYTE.b	%00000010
    267  f6ed		       22		      BYTE.b	%00100010
    268  f6ee		       22		      BYTE.b	%00100010
    269  f6ef		       12		      BYTE.b	%00010010
    270  f6f0		       52		      BYTE.b	%01010010
    271  f6f1		       8a		      BYTE.b	%10001010
    272  f6f2		       8a		      BYTE.b	%10001010
    273  f6f3		       07		      BYTE.b	%00000111
    274  f6f4		       07		      BYTE.b	%00000111
    275  f6f5		       bf		      BYTE.b	%10111111
    276  f6f6		       02		      BYTE.b	%00000010
    277  f6f7		       02		      BYTE.b	%00000010
    278  f6f8		       02		      BYTE.b	%00000010
    279  f6f9		       02		      BYTE.b	%00000010
    280  f6fa		       00		      BYTE.b	%00000000
    281  f6fb		       00		      BYTE.b	%00000000
    282  f6fc		       00		      BYTE.b	%00000000
    283  f6fd		       00		      BYTE.b	%00000000
    284  f6fe
    285  f6fe
    286  f6fe					      if	>. != >[.+(logo_height)]
    287  f700		       00 00		      align	256
    288  f700					      endif
    289  f700
    290  f700				   logo_2
    291  f700		       00		      BYTE.b	%00000000
    292  f701		       8a		      BYTE.b	%10001010
    293  f702		       8a		      BYTE.b	%10001010
    294  f703		       8a		      BYTE.b	%10001010
    295  f704		       ab		      BYTE.b	%10101011
    296  f705		       aa		      BYTE.b	%10101010
    297  f706		       fb		      BYTE.b	%11111011
    298  f707		       00		      BYTE.b	%00000000
    299  f708		       00		      BYTE.b	%00000000
    300  f709		       5a		      BYTE.b	%01011010
    301  f70a		       51		      BYTE.b	%01010001
    302  f70b		       51		      BYTE.b	%01010001
    303  f70c		       50		      BYTE.b	%01010000
    304  f70d		       51		      BYTE.b	%01010001
    305  f70e		       50		      BYTE.b	%01010000
    306  f70f		       50		      BYTE.b	%01010000
    307  f710		       00		      BYTE.b	%00000000
    308  f711		       00		      BYTE.b	%00000000
    309  f712		       00		      BYTE.b	%00000000
    310  f713		       09		      BYTE.b	%00001001
    311  f714		       09		      BYTE.b	%00001001
    312  f715		       09		      BYTE.b	%00001001
    313  f716		       1d		      BYTE.b	%00011101
    314  f717		       00		      BYTE.b	%00000000
    315  f718		       00		      BYTE.b	%00000000
    316  f719		       00		      BYTE.b	%00000000
    317  f71a		       40		      BYTE.b	%01000000
    318  f71b		       20		      BYTE.b	%00100000
    319  f71c		       10		      BYTE.b	%00010000
    320  f71d		       50		      BYTE.b	%01010000
    321  f71e		       90		      BYTE.b	%10010000
    322  f71f		       90		      BYTE.b	%10010000
    323  f720		       f0		      BYTE.b	%11110000
    324  f721		       00		      BYTE.b	%00000000
    325  f722		       e0		      BYTE.b	%11100000
    326  f723		       10		      BYTE.b	%00010000
    327  f724		       90		      BYTE.b	%10010000
    328  f725		       90		      BYTE.b	%10010000
    329  f726		       50		      BYTE.b	%01010000
    330  f727		       10		      BYTE.b	%00010000
    331  f728		       e0		      BYTE.b	%11100000
    332  f729		       10		      BYTE.b	%00010000
    333  f72a		       20		      BYTE.b	%00100000
    334  f72b		       40		      BYTE.b	%01000000
    335  f72c		       80		      BYTE.b	%10000000
    336  f72d		       00		      BYTE.b	%00000000
    337  f72e		       00		      BYTE.b	%00000000
    338  f72f		       00		      BYTE.b	%00000000
    339  f730		       00		      BYTE.b	%00000000
    340  f731		       00		      BYTE.b	%00000000
    341  f732		       00		      BYTE.b	%00000000
    342  f733		       00		      BYTE.b	%00000000
    343  f734		       00		      BYTE.b	%00000000
    344  f735		       00		      BYTE.b	%00000000
    345  f736		       00		      BYTE.b	%00000000
    346  f737		       00		      BYTE.b	%00000000
    347  f738		       00		      BYTE.b	%00000000
    348  f739		       00		      BYTE.b	%00000000
    349  f73a		       20		      BYTE.b	%00100000
    350  f73b		       20		      BYTE.b	%00100000
    351  f73c		       40		      BYTE.b	%01000000
    352  f73d		       40		      BYTE.b	%01000000
    353  f73e		       80		      BYTE.b	%10000000
    354  f73f		       80		      BYTE.b	%10000000
    355  f740		       00		      BYTE.b	%00000000
    356  f741		       00		      BYTE.b	%00000000
    357  f742		       e0		      BYTE.b	%11100000
    358  f743		       00		      BYTE.b	%00000000
    359  f744		       00		      BYTE.b	%00000000
    360  f745		       00		      BYTE.b	%00000000
    361  f746		       00		      BYTE.b	%00000000
    362  f747		       00		      BYTE.b	%00000000
    363  f748		       00		      BYTE.b	%00000000
    364  f749		       00		      BYTE.b	%00000000
    365  f74a		       00		      BYTE.b	%00000000
    366  f74b
    367  f74b
    368  f74b				  -	      if	>. != >[.+(logo_height)]
    369  f74b				  -	      align	256
    370  f74b					      endif
    371  f74b
    372  f74b				   logo_3
    373  f74b		       00		      BYTE.b	%00000000
    374  f74c		       bd		      BYTE.b	%10111101
    375  f74d		       a0		      BYTE.b	%10100000
    376  f74e		       90		      BYTE.b	%10010000
    377  f74f		       88		      BYTE.b	%10001000
    378  f750		       84		      BYTE.b	%10000100
    379  f751		       bc		      BYTE.b	%10111100
    380  f752		       00		      BYTE.b	%00000000
    381  f753		       00		      BYTE.b	%00000000
    382  f754		       00		      BYTE.b	%00000000
    383  f755		       00		      BYTE.b	%00000000
    384  f756		       00		      BYTE.b	%00000000
    385  f757		       00		      BYTE.b	%00000000
    386  f758		       00		      BYTE.b	%00000000
    387  f759		       00		      BYTE.b	%00000000
    388  f75a		       00		      BYTE.b	%00000000
    389  f75b		       00		      BYTE.b	%00000000
    390  f75c		       00		      BYTE.b	%00000000
    391  f75d		       80		      BYTE.b	%10000000
    392  f75e		       2a		      BYTE.b	%00101010
    393  f75f		       ba		      BYTE.b	%10111010
    394  f760		       2a		      BYTE.b	%00101010
    395  f761		       b3		      BYTE.b	%10110011
    396  f762		       00		      BYTE.b	%00000000
    397  f763		       00		      BYTE.b	%00000000
    398  f764		       00		      BYTE.b	%00000000
    399  f765		       00		      BYTE.b	%00000000
    400  f766		       0d		      BYTE.b	%00001101
    401  f767		       09		      BYTE.b	%00001001
    402  f768		       05		      BYTE.b	%00000101
    403  f769		       0d		      BYTE.b	%00001101
    404  f76a		       00		      BYTE.b	%00000000
    405  f76b		       00		      BYTE.b	%00000000
    406  f76c		       00		      BYTE.b	%00000000
    407  f76d		       00		      BYTE.b	%00000000
    408  f76e		       33		      BYTE.b	%00110011
    409  f76f		       4a		      BYTE.b	%01001010
    410  f770		       0a		      BYTE.b	%00001010
    411  f771		       0a		      BYTE.b	%00001010
    412  f772		       32		      BYTE.b	%00110010
    413  f773		       42		      BYTE.b	%01000010
    414  f774		       42		      BYTE.b	%01000010
    415  f775		       4a		      BYTE.b	%01001010
    416  f776		       32		      BYTE.b	%00110010
    417  f777		       00		      BYTE.b	%00000000
    418  f778		       00		      BYTE.b	%00000000
    419  f779		       00		      BYTE.b	%00000000
    420  f77a		       00		      BYTE.b	%00000000
    421  f77b		       00		      BYTE.b	%00000000
    422  f77c		       00		      BYTE.b	%00000000
    423  f77d		       45		      BYTE.b	%01000101
    424  f77e		       45		      BYTE.b	%01000101
    425  f77f		       45		      BYTE.b	%01000101
    426  f780		       7d		      BYTE.b	%01111101
    427  f781		       29		      BYTE.b	%00101001
    428  f782		       29		      BYTE.b	%00101001
    429  f783		       29		      BYTE.b	%00101001
    430  f784		       11		      BYTE.b	%00010001
    431  f785		       11		      BYTE.b	%00010001
    432  f786		       00		      BYTE.b	%00000000
    433  f787		       00		      BYTE.b	%00000000
    434  f788		       00		      BYTE.b	%00000000
    435  f789		       00		      BYTE.b	%00000000
    436  f78a		       00		      BYTE.b	%00000000
    437  f78b		       00		      BYTE.b	%00000000
    438  f78c		       00		      BYTE.b	%00000000
    439  f78d		       00		      BYTE.b	%00000000
    440  f78e		       00		      BYTE.b	%00000000
    441  f78f		       00		      BYTE.b	%00000000
    442  f790		       00		      BYTE.b	%00000000
    443  f791		       00		      BYTE.b	%00000000
    444  f792		       00		      BYTE.b	%00000000
    445  f793		       00		      BYTE.b	%00000000
    446  f794		       00		      BYTE.b	%00000000
    447  f795		       00		      BYTE.b	%00000000
    448  f796
    449  f796
    450  f796				  -	      if	>. != >[.+(logo_height)]
    451  f796				  -	      align	256
    452  f796					      endif
    453  f796
    454  f796				   logo_4
    455  f796		       00		      BYTE.b	%00000000
    456  f797		       00		      BYTE.b	%00000000
    457  f798		       00		      BYTE.b	%00000000
    458  f799		       00		      BYTE.b	%00000000
    459  f79a		       00		      BYTE.b	%00000000
    460  f79b		       00		      BYTE.b	%00000000
    461  f79c		       00		      BYTE.b	%00000000
    462  f79d		       00		      BYTE.b	%00000000
    463  f79e		       00		      BYTE.b	%00000000
    464  f79f		       00		      BYTE.b	%00000000
    465  f7a0		       00		      BYTE.b	%00000000
    466  f7a1		       00		      BYTE.b	%00000000
    467  f7a2		       00		      BYTE.b	%00000000
    468  f7a3		       00		      BYTE.b	%00000000
    469  f7a4		       00		      BYTE.b	%00000000
    470  f7a5		       00		      BYTE.b	%00000000
    471  f7a6		       00		      BYTE.b	%00000000
    472  f7a7		       00		      BYTE.b	%00000000
    473  f7a8		       00		      BYTE.b	%00000000
    474  f7a9		       20		      BYTE.b	%00100000
    475  f7aa		       20		      BYTE.b	%00100000
    476  f7ab		       a0		      BYTE.b	%10100000
    477  f7ac		       e0		      BYTE.b	%11100000
    478  f7ad		       00		      BYTE.b	%00000000
    479  f7ae		       00		      BYTE.b	%00000000
    480  f7af		       00		      BYTE.b	%00000000
    481  f7b0		       00		      BYTE.b	%00000000
    482  f7b1		       db		      BYTE.b	%11011011
    483  f7b2		       52		      BYTE.b	%01010010
    484  f7b3		       49		      BYTE.b	%01001001
    485  f7b4		       db		      BYTE.b	%11011011
    486  f7b5		       00		      BYTE.b	%00000000
    487  f7b6		       00		      BYTE.b	%00000000
    488  f7b7		       00		      BYTE.b	%00000000
    489  f7b8		       00		      BYTE.b	%00000000
    490  f7b9		       52		      BYTE.b	%01010010
    491  f7ba		       52		      BYTE.b	%01010010
    492  f7bb		       52		      BYTE.b	%01010010
    493  f7bc		       52		      BYTE.b	%01010010
    494  f7bd		       75		      BYTE.b	%01110101
    495  f7be		       55		      BYTE.b	%01010101
    496  f7bf		       55		      BYTE.b	%01010101
    497  f7c0		       75		      BYTE.b	%01110101
    498  f7c1		       25		      BYTE.b	%00100101
    499  f7c2		       00		      BYTE.b	%00000000
    500  f7c3		       00		      BYTE.b	%00000000
    501  f7c4		       00		      BYTE.b	%00000000
    502  f7c5		       00		      BYTE.b	%00000000
    503  f7c6		       00		      BYTE.b	%00000000
    504  f7c7		       00		      BYTE.b	%00000000
    505  f7c8		       11		      BYTE.b	%00010001
    506  f7c9		       11		      BYTE.b	%00010001
    507  f7ca		       11		      BYTE.b	%00010001
    508  f7cb		       11		      BYTE.b	%00010001
    509  f7cc		       11		      BYTE.b	%00010001
    510  f7cd		       99		      BYTE.b	%10011001
    511  f7ce		       55		      BYTE.b	%01010101
    512  f7cf		       55		      BYTE.b	%01010101
    513  f7d0		       99		      BYTE.b	%10011001
    514  f7d1		       00		      BYTE.b	%00000000
    515  f7d2		       00		      BYTE.b	%00000000
    516  f7d3		       00		      BYTE.b	%00000000
    517  f7d4		       00		      BYTE.b	%00000000
    518  f7d5		       00		      BYTE.b	%00000000
    519  f7d6		       00		      BYTE.b	%00000000
    520  f7d7		       00		      BYTE.b	%00000000
    521  f7d8		       00		      BYTE.b	%00000000
    522  f7d9		       00		      BYTE.b	%00000000
    523  f7da		       00		      BYTE.b	%00000000
    524  f7db		       00		      BYTE.b	%00000000
    525  f7dc		       00		      BYTE.b	%00000000
    526  f7dd		       00		      BYTE.b	%00000000
    527  f7de		       00		      BYTE.b	%00000000
    528  f7df		       00		      BYTE.b	%00000000
    529  f7e0		       00		      BYTE.b	%00000000
    530  f7e1
    531  f7e1
    532  f7e1					      if	>. != >[.+(logo_height)]
    533  f800		       00 00 00 00*	      align	256
    534  f800					      endif
    535  f800
    536  f800				   logo_5
    537  f800		       00		      BYTE.b	%00000000
    538  f801		       00		      BYTE.b	%00000000
    539  f802		       00		      BYTE.b	%00000000
    540  f803		       00		      BYTE.b	%00000000
    541  f804		       00		      BYTE.b	%00000000
    542  f805		       00		      BYTE.b	%00000000
    543  f806		       00		      BYTE.b	%00000000
    544  f807		       00		      BYTE.b	%00000000
    545  f808		       00		      BYTE.b	%00000000
    546  f809		       00		      BYTE.b	%00000000
    547  f80a		       00		      BYTE.b	%00000000
    548  f80b		       00		      BYTE.b	%00000000
    549  f80c		       00		      BYTE.b	%00000000
    550  f80d		       00		      BYTE.b	%00000000
    551  f80e		       00		      BYTE.b	%00000000
    552  f80f		       00		      BYTE.b	%00000000
    553  f810		       00		      BYTE.b	%00000000
    554  f811		       00		      BYTE.b	%00000000
    555  f812		       00		      BYTE.b	%00000000
    556  f813		       00		      BYTE.b	%00000000
    557  f814		       00		      BYTE.b	%00000000
    558  f815		       00		      BYTE.b	%00000000
    559  f816		       00		      BYTE.b	%00000000
    560  f817		       00		      BYTE.b	%00000000
    561  f818		       00		      BYTE.b	%00000000
    562  f819		       00		      BYTE.b	%00000000
    563  f81a		       00		      BYTE.b	%00000000
    564  f81b		       00		      BYTE.b	%00000000
    565  f81c		       00		      BYTE.b	%00000000
    566  f81d		       00		      BYTE.b	%00000000
    567  f81e		       00		      BYTE.b	%00000000
    568  f81f		       00		      BYTE.b	%00000000
    569  f820		       00		      BYTE.b	%00000000
    570  f821		       00		      BYTE.b	%00000000
    571  f822		       00		      BYTE.b	%00000000
    572  f823		       6a		      BYTE.b	%01101010
    573  f824		       4a		      BYTE.b	%01001010
    574  f825		       4a		      BYTE.b	%01001010
    575  f826		       4c		      BYTE.b	%01001100
    576  f827		       48		      BYTE.b	%01001000
    577  f828		       6e		      BYTE.b	%01101110
    578  f829		       4a		      BYTE.b	%01001010
    579  f82a		       4a		      BYTE.b	%01001010
    580  f82b		       6c		      BYTE.b	%01101100
    581  f82c		       00		      BYTE.b	%00000000
    582  f82d		       00		      BYTE.b	%00000000
    583  f82e		       00		      BYTE.b	%00000000
    584  f82f		       00		      BYTE.b	%00000000
    585  f830		       00		      BYTE.b	%00000000
    586  f831		       00		      BYTE.b	%00000000
    587  f832		       b8		      BYTE.b	%10111000
    588  f833		       20		      BYTE.b	%00100000
    589  f834		       20		      BYTE.b	%00100000
    590  f835		       20		      BYTE.b	%00100000
    591  f836		       30		      BYTE.b	%00110000
    592  f837		       20		      BYTE.b	%00100000
    593  f838		       20		      BYTE.b	%00100000
    594  f839		       20		      BYTE.b	%00100000
    595  f83a		       38		      BYTE.b	%00111000
    596  f83b		       00		      BYTE.b	%00000000
    597  f83c		       00		      BYTE.b	%00000000
    598  f83d		       00		      BYTE.b	%00000000
    599  f83e		       00		      BYTE.b	%00000000
    600  f83f		       00		      BYTE.b	%00000000
    601  f840		       00		      BYTE.b	%00000000
    602  f841		       00		      BYTE.b	%00000000
    603  f842		       00		      BYTE.b	%00000000
    604  f843		       00		      BYTE.b	%00000000
    605  f844		       00		      BYTE.b	%00000000
    606  f845		       00		      BYTE.b	%00000000
    607  f846		       00		      BYTE.b	%00000000
    608  f847		       00		      BYTE.b	%00000000
    609  f848		       00		      BYTE.b	%00000000
    610  f849		       00		      BYTE.b	%00000000
    611  f84a		       00		      BYTE.b	%00000000
    612  f84b
    613  f84b
    614  f84b				  -	      if	>. != >[.+(logo_height)]
    615  f84b				  -	      align	256
    616  f84b					      endif
    617  f84b
    618  f84b				   logo_colors
    619  f84b		       2e		      .byte.b	$2E
    620  f84c		       2c		      .byte.b	$2C
    621  f84d		       2c		      .byte.b	$2C
    622  f84e		       2c		      .byte.b	$2C
    623  f84f		       2a		      .byte.b	$2A
    624  f850		       2a		      .byte.b	$2A
    625  f851		       2a		      .byte.b	$2A
    626  f852		       28		      .byte.b	$28
    627  f853		       28		      .byte.b	$28
    628  f854		       28		      .byte.b	$28
    629  f855		       26		      .byte.b	$26
    630  f856		       26		      .byte.b	$26
    631  f857		       26		      .byte.b	$26
    632  f858		       24		      .byte.b	$24
    633  f859		       24		      .byte.b	$24
    634  f85a		       24		      .byte.b	$24
    635  f85b		       24		      .byte.b	$24
    636  f85c		       22		      .byte.b	$22
    637  f85d		       22		      .byte.b	$22
    638  f85e		       22		      .byte.b	$22
    639  f85f		       20		      .byte.b	$20
    640  f860		       20		      .byte.b	$20
    641  f861		       20		      .byte.b	$20
    642  f862		       1e		      .byte.b	$1E
    643  f863		       1e		      .byte.b	$1E
    644  f864		       1e		      .byte.b	$1E
    645  f865		       1c		      .byte.b	$1C
    646  f866		       1c		      .byte.b	$1C
    647  f867		       1c		      .byte.b	$1C
    648  f868		       1c		      .byte.b	$1C
    649  f869		       1a		      .byte.b	$1A
    650  f86a		       1a		      .byte.b	$1A
    651  f86b		       1a		      .byte.b	$1A
    652  f86c		       18		      .byte.b	$18
    653  f86d		       18		      .byte.b	$18
    654  f86e		       18		      .byte.b	$18
    655  f86f		       16		      .byte.b	$16
    656  f870		       16		      .byte.b	$16
    657  f871		       16		      .byte.b	$16
    658  f872		       14		      .byte.b	$14
    659  f873		       14		      .byte.b	$14
    660  f874		       14		      .byte.b	$14
    661  f875		       14		      .byte.b	$14
    662  f876		       12		      .byte.b	$12
    663  f877		       12		      .byte.b	$12
    664  f878		       12		      .byte.b	$12
    665  f879		       10		      .byte.b	$10
    666  f87a		       10		      .byte.b	$10
    667  f87b		       10		      .byte.b	$10
    668  f87c		       0e		      .byte.b	$0E
    669  f87d		       0e		      .byte.b	$0E
    670  f87e		       0e		      .byte.b	$0E
    671  f87f		       0c		      .byte.b	$0C
    672  f880		       0c		      .byte.b	$0C
    673  f881		       0c		      .byte.b	$0C
    674  f882		       0c		      .byte.b	$0C
    675  f883		       0a		      .byte.b	$0A
    676  f884		       0a		      .byte.b	$0A
    677  f885		       0a		      .byte.b	$0A
    678  f886		       08		      .byte.b	$08
    679  f887		       08		      .byte.b	$08
    680  f888		       08		      .byte.b	$08
    681  f889		       06		      .byte.b	$06
    682  f88a		       06		      .byte.b	$06
    683  f88b		       06		      .byte.b	$06
    684  f88c		       04		      .byte.b	$04
    685  f88d		       04		      .byte.b	$04
    686  f88e		       04		      .byte.b	$04
    687  f88f		       04		      .byte.b	$04
    688  f890		       06		      .byte.b	$06
    689  f891		       06		      .byte.b	$06
    690  f892		       04		      .byte.b	$04
    691  f893		       04		      .byte.b	$04
    692  f894		       04		      .byte.b	$04
    693  f895		       04		      .byte.b	$04
    694  f896
    695  f896
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
   2024  f896
   2025  f896				   .
   2026  f896							; 
   2027  f896
   2028  f896				   .L061		;  rem main_mainsetup........................................................................
   2029  f896
   2030  f896				   .
   2031  f896							; 
   2032  f896
   2033  f896				   .L062		;  rem mainloop  .........................................................................
   2034  f896
   2035  f896				   .
   2036  f896							; 
   2037  f896
   2038  f896				   .main
   2039  f896							; main
   2040  f896
   2041  f896				   .L063		;  scorecolor	=  $1E
   2042  f896
   2043  f896		       a9 1e		      LDA	#$1E
   2044  f898		       85 a3		      STA	scorecolor
   2045  f89a				   .L064		;  statusbarcolor  =  $00
   2046  f89a
   2047  f89a		       a9 00		      LDA	#$00
   2048  f89c		       85 e6		      STA	statusbarcolor
   2049  f89e				   .L065		;  COLUBK  =  $00
   2050  f89e
   2051  f89e		       a9 00		      LDA	#$00
   2052  f8a0		       85 09		      STA	COLUBK
   2053  f8a2				   .
   2054  f8a2							; 
   2055  f8a2
   2056  f8a2				   .L066		;  playfield:
   2057  f8a2
   2058  f8a2				  -	      ifconst	pfres
   2059  f8a2				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2060  f8a2					      else
   2061  f8a2		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2062  f8a4					      endif
   2063  f8a4		       4c d3 f8 	      jmp	pflabel0
   2064  f8a7				   PF_data0
   2065  f8a7		       00 e0		      .byte.b	%00000000, %11100000
   2066  f8a9					      if	(pfwidth>2)
   2067  f8a9		       ff ff		      .byte.b	%11111111, %11111111
   2068  f8ab					      endif
   2069  f8ab		       00 f8		      .byte.b	%00000000, %11111000
   2070  f8ad					      if	(pfwidth>2)
   2071  f8ad		       ff ff		      .byte.b	%11111111, %11111111
   2072  f8af					      endif
   2073  f8af		       00 fc		      .byte.b	%00000000, %11111100
   2074  f8b1					      if	(pfwidth>2)
   2075  f8b1		       ff ff		      .byte.b	%11111111, %11111111
   2076  f8b3					      endif
   2077  f8b3		       00 f0		      .byte.b	%00000000, %11110000
   2078  f8b5					      if	(pfwidth>2)
   2079  f8b5		       ff ff		      .byte.b	%11111111, %11111111
   2080  f8b7					      endif
   2081  f8b7		       00 c0		      .byte.b	%00000000, %11000000
   2082  f8b9					      if	(pfwidth>2)
   2083  f8b9		       ff ff		      .byte.b	%11111111, %11111111
   2084  f8bb					      endif
   2085  f8bb		       00 00		      .byte.b	%00000000, %00000000
   2086  f8bd					      if	(pfwidth>2)
   2087  f8bd		       1f ff		      .byte.b	%00011111, %11111111
   2088  f8bf					      endif
   2089  f8bf		       00 00		      .byte.b	%00000000, %00000000
   2090  f8c1					      if	(pfwidth>2)
   2091  f8c1		       00 54		      .byte.b	%00000000, %01010100
   2092  f8c3					      endif
   2093  f8c3		       00 00		      .byte.b	%00000000, %00000000
   2094  f8c5					      if	(pfwidth>2)
   2095  f8c5		       00 f8		      .byte.b	%00000000, %11111000
   2096  f8c7					      endif
   2097  f8c7		       00 00		      .byte.b	%00000000, %00000000
   2098  f8c9					      if	(pfwidth>2)
   2099  f8c9		       00 e0		      .byte.b	%00000000, %11100000
   2100  f8cb					      endif
   2101  f8cb		       00 00		      .byte.b	%00000000, %00000000
   2102  f8cd					      if	(pfwidth>2)
   2103  f8cd		       00 c0		      .byte.b	%00000000, %11000000
   2104  f8cf					      endif
   2105  f8cf		       00 00		      .byte.b	%00000000, %00000000
   2106  f8d1					      if	(pfwidth>2)
   2107  f8d1		       00 c0		      .byte.b	%00000000, %11000000
   2108  f8d3					      endif
   2109  f8d3				   pflabel0
   2110  f8d3		       bd a7 f8 	      lda	PF_data0,x
   2111  f8d6		       95 a4		      sta	playfield,x
   2112  f8d8		       ca		      dex
   2113  f8d9		       10 f8		      bpl	pflabel0
   2114  f8db				   .
   2115  f8db							; 
   2116  f8db
   2117  f8db				   .L067		;  pfcolors:
   2118  f8db
   2119  f8db		       a9 dc		      lda	# $DC
   2120  f8dd		       85 08		      sta	COLUPF
   2121  f8df				  -	      ifconst	pfres
   2122  f8df				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2123  f8df					      else
   2124  f8df		       a9 fc		      lda	#>(pfcolorlabel13-84)
   2125  f8e1					      endif
   2126  f8e1		       85 f1		      sta	pfcolortable+1
   2127  f8e3				  -	      ifconst	pfres
   2128  f8e3				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2129  f8e3					      else
   2130  f8e3		       a9 04		      lda	#<(pfcolorlabel13-84)
   2131  f8e5					      endif
   2132  f8e5		       85 f0		      sta	pfcolortable
   2133  f8e7				   .L068		;  counter  =	180
   2134  f8e7
   2135  f8e7		       a9 b4		      LDA	#180
   2136  f8e9		       85 d6		      STA	counter
   2137  f8eb				   .
   2138  f8eb							; 
   2139  f8eb
   2140  f8eb				   .cutscene
   2141  f8eb							; cutscene
   2142  f8eb
   2143  f8eb				   .L069		;  drawscreen
   2144  f8eb
   2145  f8eb		       20 c7 f3 	      jsr	drawscreen
   2146  f8ee				   .L070		;  if counter	>  0 then counter  =  counter  -  1 else goto mainsetup
   2147  f8ee
   2148  f8ee		       a9 00		      LDA	#0
   2149  f8f0		       c5 d6		      CMP	counter
   2150  f8f2		       b0 05		      BCS	.skipL070
   2151  f8f4				   .condpart1
   2152  f8f4		       c6 d6		      DEC	counter
   2153  f8f6		       4c fc f8 	      jmp	.skipelse0
   2154  f8f9				   .skipL070
   2155  f8f9		       4c ff f8 	      jmp	.mainsetup
   2156  f8fc
   2157  f8fc				   .skipelse0
   2158  f8fc				   .L071		;  goto cutscene
   2159  f8fc
   2160  f8fc		       4c eb f8 	      jmp	.cutscene
   2161  f8ff
   2162  f8ff				   .
   2163  f8ff							; 
   2164  f8ff
   2165  f8ff				   .mainsetup
   2166  f8ff							; mainsetup
   2167  f8ff
   2168  f8ff				   .L072		;  sounda  =  0
   2169  f8ff
   2170  f8ff		       a9 00		      LDA	#0
   2171  f901		       85 d4		      STA	sounda
   2172  f903				   .L073		;  missile1height  =  2
   2173  f903
   2174  f903		       a9 02		      LDA	#2
   2175  f905		       85 87		      STA	missile1height
   2176  f907				   .L074		;  missile1x  =  75
   2177  f907
   2178  f907		       a9 4b		      LDA	#75
   2179  f909		       85 83		      STA	missile1x
   2180  f90b				   .L075		;  missile1y  =  50
   2181  f90b
   2182  f90b		       a9 32		      LDA	#50
   2183  f90d		       85 88		      STA	missile1y
   2184  f90f				   .L076		;  ballx  =  60
   2185  f90f
   2186  f90f		       a9 3c		      LDA	#60
   2187  f911		       85 84		      STA	ballx
   2188  f913				   .L077		;  bally  =  90
   2189  f913
   2190  f913		       a9 5a		      LDA	#90
   2191  f915		       85 89		      STA	bally
   2192  f917				   .L078		;  COLUP1  =  $0E
   2193  f917
   2194  f917		       a9 0e		      LDA	#$0E
   2195  f919		       85 07		      STA	COLUP1
   2196  f91b				   .L079		;  counter  =	0
   2197  f91b
   2198  f91b		       a9 00		      LDA	#0
   2199  f91d		       85 d6		      STA	counter
   2200  f91f				   .L080		;  b  =  0
   2201  f91f
   2202  f91f		       a9 00		      LDA	#0
   2203  f921		       85 d5		      STA	b
   2204  f923				   .L081		;  b  =  0
   2205  f923
   2206  f923		       a9 00		      LDA	#0
   2207  f925		       85 d5		      STA	b
   2208  f927				   .L082		;  d  =  1
   2209  f927
   2210  f927		       a9 01		      LDA	#1
   2211  f929		       85 d7		      STA	d
   2212  f92b				   .L083		;  e  =  0
   2213  f92b
   2214  f92b		       a9 00		      LDA	#0
   2215  f92d		       85 d8		      STA	e
   2216  f92f				   .L084		;  player0x  =  90
   2217  f92f
   2218  f92f		       a9 5a		      LDA	#90
   2219  f931		       85 80		      STA	player0x
   2220  f933				   .L085		;  player0y  =  5
   2221  f933
   2222  f933		       a9 05		      LDA	#5
   2223  f935		       85 85		      STA	player0y
   2224  f937				   .L086		;  f  =  100
   2225  f937
   2226  f937		       a9 64		      LDA	#100
   2227  f939		       85 d9		      STA	f
   2228  f93b				   .L087		;  COLUPF  =  $00
   2229  f93b
   2230  f93b		       a9 00		      LDA	#$00
   2231  f93d		       85 08		      STA	COLUPF
   2232  f93f				   .L088		;  statusbarcolor  =  $CE
   2233  f93f
   2234  f93f		       a9 ce		      LDA	#$CE
   2235  f941		       85 e6		      STA	statusbarcolor
   2236  f943				   .L089		;  statusbarlength  =	120
   2237  f943
   2238  f943		       a9 78		      LDA	#120
   2239  f945		       85 f5		      STA	statusbarlength
   2240  f947				   .L090		;  NUSIZ1  =  $10
   2241  f947
   2242  f947		       a9 10		      LDA	#$10
   2243  f949		       85 05		      STA	NUSIZ1
   2244  f94b				   .
   2245  f94b							; 
   2246  f94b
   2247  f94b				   .L091		;  playfield:
   2248  f94b
   2249  f94b				  -	      ifconst	pfres
   2250  f94b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2251  f94b					      else
   2252  f94b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2253  f94d					      endif
   2254  f94d		       4c 7c f9 	      jmp	pflabel1
   2255  f950				   PF_data1
   2256  f950		       00 00		      .byte.b	%00000000, %00000000
   2257  f952					      if	(pfwidth>2)
   2258  f952		       00 00		      .byte.b	%00000000, %00000000
   2259  f954					      endif
   2260  f954		       00 00		      .byte.b	%00000000, %00000000
   2261  f956					      if	(pfwidth>2)
   2262  f956		       00 00		      .byte.b	%00000000, %00000000
   2263  f958					      endif
   2264  f958		       00 00		      .byte.b	%00000000, %00000000
   2265  f95a					      if	(pfwidth>2)
   2266  f95a		       00 00		      .byte.b	%00000000, %00000000
   2267  f95c					      endif
   2268  f95c		       00 00		      .byte.b	%00000000, %00000000
   2269  f95e					      if	(pfwidth>2)
   2270  f95e		       00 00		      .byte.b	%00000000, %00000000
   2271  f960					      endif
   2272  f960		       00 00		      .byte.b	%00000000, %00000000
   2273  f962					      if	(pfwidth>2)
   2274  f962		       00 00		      .byte.b	%00000000, %00000000
   2275  f964					      endif
   2276  f964		       00 00		      .byte.b	%00000000, %00000000
   2277  f966					      if	(pfwidth>2)
   2278  f966		       00 00		      .byte.b	%00000000, %00000000
   2279  f968					      endif
   2280  f968		       00 00		      .byte.b	%00000000, %00000000
   2281  f96a					      if	(pfwidth>2)
   2282  f96a		       00 00		      .byte.b	%00000000, %00000000
   2283  f96c					      endif
   2284  f96c		       00 00		      .byte.b	%00000000, %00000000
   2285  f96e					      if	(pfwidth>2)
   2286  f96e		       00 00		      .byte.b	%00000000, %00000000
   2287  f970					      endif
   2288  f970		       00 00		      .byte.b	%00000000, %00000000
   2289  f972					      if	(pfwidth>2)
   2290  f972		       00 00		      .byte.b	%00000000, %00000000
   2291  f974					      endif
   2292  f974		       00 00		      .byte.b	%00000000, %00000000
   2293  f976					      if	(pfwidth>2)
   2294  f976		       00 00		      .byte.b	%00000000, %00000000
   2295  f978					      endif
   2296  f978		       00 00		      .byte.b	%00000000, %00000000
   2297  f97a					      if	(pfwidth>2)
   2298  f97a		       00 00		      .byte.b	%00000000, %00000000
   2299  f97c					      endif
   2300  f97c				   pflabel1
   2301  f97c		       bd 50 f9 	      lda	PF_data1,x
   2302  f97f		       95 a4		      sta	playfield,x
   2303  f981		       ca		      dex
   2304  f982		       10 f8		      bpl	pflabel1
   2305  f984				   .
   2306  f984							; 
   2307  f984
   2308  f984				   .mainsetup2
   2309  f984							; mainsetup2
   2310  f984
   2311  f984				   .L092		;  player0:
   2312  f984
   2313  f984		       a2 80		      LDX	#<playerL092_0
   2314  f986		       86 8a		      STX	player0pointerlo
   2315  f988		       a9 fc		      LDA	#>playerL092_0
   2316  f98a		       85 8b		      STA	player0pointerhi
   2317  f98c		       a9 0a		      LDA	#10
   2318  f98e		       85 8e		      STA	player0height
   2319  f990				   .
   2320  f990							; 
   2321  f990
   2322  f990				   .
   2323  f990							; 
   2324  f990
   2325  f990				   .
   2326  f990							; 
   2327  f990
   2328  f990				   .
   2329  f990							; 
   2330  f990
   2331  f990				   .
   2332  f990							; 
   2333  f990
   2334  f990				   .mainloop
   2335  f990							; mainloop
   2336  f990
   2337  f990				   .
   2338  f990							; 
   2339  f990
   2340  f990				   .L093		;  g  =  g  +	1
   2341  f990
   2342  f990		       e6 da		      INC	g
   2343  f992				   .L094		;  counter  =	counter  +  1
   2344  f992
   2345  f992		       e6 d6		      INC	counter
   2346  f994				   .L095		;  COLUP0  =  $46
   2347  f994
   2348  f994		       a9 46		      LDA	#$46
   2349  f996		       85 06		      STA	COLUP0
   2350  f998				   .L096		;  COLUP1  =  $0E
   2351  f998
   2352  f998		       a9 0e		      LDA	#$0E
   2353  f99a		       85 07		      STA	COLUP1
   2354  f99c				   .
   2355  f99c							; 
   2356  f99c
   2357  f99c				   .L097		;  AUDV0  =  sounda
   2358  f99c
   2359  f99c		       a5 d4		      LDA	sounda
   2360  f99e		       85 19		      STA	AUDV0
   2361  f9a0				   .L098		;  AUDC0  =  8
   2362  f9a0
   2363  f9a0		       a9 08		      LDA	#8
   2364  f9a2		       85 15		      STA	AUDC0
   2365  f9a4				   .L099		;  AUDF0  =  3
   2366  f9a4
   2367  f9a4		       a9 03		      LDA	#3
   2368  f9a6		       85 17		      STA	AUDF0
   2369  f9a8				   .
   2370  f9a8							; 
   2371  f9a8
   2372  f9a8				   .
   2373  f9a8							; 
   2374  f9a8
   2375  f9a8				   .L0100		;  if g  >  1 then player0y  =  player0y  +  d  :  f  =  f  -	1  :  g  =  0
   2376  f9a8
   2377  f9a8		       a9 01		      LDA	#1
   2378  f9aa		       c5 da		      CMP	g
   2379  f9ac		       b0 0d		      BCS	.skipL0100
   2380  f9ae				   .condpart2
   2381  f9ae		       a5 85		      LDA	player0y
   2382  f9b0		       18		      CLC
   2383  f9b1		       65 d7		      ADC	d
   2384  f9b3		       85 85		      STA	player0y
   2385  f9b5		       c6 d9		      DEC	f
   2386  f9b7		       a9 00		      LDA	#0
   2387  f9b9		       85 da		      STA	g
   2388  f9bb				   .skipL0100
   2389  f9bb				   .
   2390  f9bb							; 
   2391  f9bb
   2392  f9bb				   .
   2393  f9bb							; 
   2394  f9bb
   2395  f9bb				   .L0101		;  if sounda  >  0 then e  =  e  +  1	:  NUSIZ1  =  $30
   2396  f9bb
   2397  f9bb		       a9 00		      LDA	#0
   2398  f9bd		       c5 d4		      CMP	sounda
   2399  f9bf		       b0 06		      BCS	.skipL0101
   2400  f9c1				   .condpart3
   2401  f9c1		       e6 d8		      INC	e
   2402  f9c3		       a9 30		      LDA	#$30
   2403  f9c5		       85 05		      STA	NUSIZ1
   2404  f9c7				   .skipL0101
   2405  f9c7				   .L0102		;  if e  >  10 then e	=  0  :  sounda  =  sounda  -  1
   2406  f9c7
   2407  f9c7		       a9 0a		      LDA	#10
   2408  f9c9		       c5 d8		      CMP	e
   2409  f9cb		       b0 06		      BCS	.skipL0102
   2410  f9cd				   .condpart4
   2411  f9cd		       a9 00		      LDA	#0
   2412  f9cf		       85 d8		      STA	e
   2413  f9d1		       c6 d4		      DEC	sounda
   2414  f9d3				   .skipL0102
   2415  f9d3				   .
   2416  f9d3							; 
   2417  f9d3
   2418  f9d3				   .
   2419  f9d3							; 
   2420  f9d3
   2421  f9d3				   .L0103		;  if counter	>  60 then b  =  b  +  1  :  counter  =  0
   2422  f9d3
   2423  f9d3		       a9 3c		      LDA	#60
   2424  f9d5		       c5 d6		      CMP	counter
   2425  f9d7		       b0 06		      BCS	.skipL0103
   2426  f9d9				   .condpart5
   2427  f9d9		       e6 d5		      INC	b
   2428  f9db		       a9 00		      LDA	#0
   2429  f9dd		       85 d6		      STA	counter
   2430  f9df				   .skipL0103
   2431  f9df				   .
   2432  f9df							; 
   2433  f9df
   2434  f9df				   .L0104		;  if b  >  30 then b	=  0  :  d  =  d  +  1
   2435  f9df
   2436  f9df		       a9 1e		      LDA	#30
   2437  f9e1		       c5 d5		      CMP	b
   2438  f9e3		       b0 06		      BCS	.skipL0104
   2439  f9e5				   .condpart6
   2440  f9e5		       a9 00		      LDA	#0
   2441  f9e7		       85 d5		      STA	b
   2442  f9e9		       e6 d7		      INC	d
   2443  f9eb				   .skipL0104
   2444  f9eb				   .
   2445  f9eb							; 
   2446  f9eb
   2447  f9eb				   .
   2448  f9eb							; 
   2449  f9eb
   2450  f9eb				   .L0105		;  if joy0right then if missile1x  <  146 then missile1x  =  missile1x  +  4
   2451  f9eb
   2452  f9eb		       2c 80 02 	      bit	SWCHA
   2453  f9ee		       30 0d		      BMI	.skipL0105
   2454  f9f0				   .condpart7
   2455  f9f0		       a5 83		      LDA	missile1x
   2456  f9f2		       c9 92		      CMP	#146
   2457  f9f4		       b0 07		      BCS	.skip7then
   2458  f9f6				   .condpart8
   2459  f9f6		       a5 83		      LDA	missile1x
   2460  f9f8		       18		      CLC
   2461  f9f9		       69 04		      ADC	#4
   2462  f9fb		       85 83		      STA	missile1x
   2463  f9fd				   .skip7then
   2464  f9fd				   .skipL0105
   2465  f9fd				   .L0106		;  if joy0left then if missile1x  >  14 then missile1x  =  missile1x  -  4
   2466  f9fd
   2467  f9fd		       2c 80 02 	      bit	SWCHA
   2468  fa00		       70 0d		      BVS	.skipL0106
   2469  fa02				   .condpart9
   2470  fa02		       a9 0e		      LDA	#14
   2471  fa04		       c5 83		      CMP	missile1x
   2472  fa06		       b0 07		      BCS	.skip9then
   2473  fa08				   .condpart10
   2474  fa08		       a5 83		      LDA	missile1x
   2475  fa0a		       38		      SEC
   2476  fa0b		       e9 04		      SBC	#4
   2477  fa0d		       85 83		      STA	missile1x
   2478  fa0f				   .skip9then
   2479  fa0f				   .skipL0106
   2480  fa0f				   .L0107		;  if joy0up then if missile1y  >  16 then missile1y  =  missile1y  -	2
   2481  fa0f
   2482  fa0f		       a9 10		      lda	#$10
   2483  fa11		       2c 80 02 	      bit	SWCHA
   2484  fa14		       d0 0d		      BNE	.skipL0107
   2485  fa16				   .condpart11
   2486  fa16		       a9 10		      LDA	#16
   2487  fa18		       c5 88		      CMP	missile1y
   2488  fa1a		       b0 07		      BCS	.skip11then
   2489  fa1c				   .condpart12
   2490  fa1c		       a5 88		      LDA	missile1y
   2491  fa1e		       38		      SEC
   2492  fa1f		       e9 02		      SBC	#2
   2493  fa21		       85 88		      STA	missile1y
   2494  fa23				   .skip11then
   2495  fa23				   .skipL0107
   2496  fa23				   .L0108		;  if joy0down then if missile1y  <  148 then missile1y  =  missile1y	+  2
   2497  fa23
   2498  fa23		       a9 20		      lda	#$20
   2499  fa25		       2c 80 02 	      bit	SWCHA
   2500  fa28		       d0 0d		      BNE	.skipL0108
   2501  fa2a				   .condpart13
   2502  fa2a		       a5 88		      LDA	missile1y
   2503  fa2c		       c9 94		      CMP	#148
   2504  fa2e		       b0 07		      BCS	.skip13then
   2505  fa30				   .condpart14
   2506  fa30		       a5 88		      LDA	missile1y
   2507  fa32		       18		      CLC
   2508  fa33		       69 02		      ADC	#2
   2509  fa35		       85 88		      STA	missile1y
   2510  fa37				   .skip13then
   2511  fa37				   .skipL0108
   2512  fa37				   .
   2513  fa37							; 
   2514  fa37
   2515  fa37				   .
   2516  fa37							; 
   2517  fa37
   2518  fa37				   .
   2519  fa37							; 
   2520  fa37
   2521  fa37				   .L0109		;  if joy0fire then COLUP1  =	$FE  :	sounda	=  4  :  if missile1x  <  130 then missile1x  =  missile1x  +  8
   2522  fa37
   2523  fa37		       24 0c		      bit	INPT4
   2524  fa39		       30 15		      BMI	.skipL0109
   2525  fa3b				   .condpart15
   2526  fa3b		       a9 fe		      LDA	#$FE
   2527  fa3d		       85 07		      STA	COLUP1
   2528  fa3f		       a9 04		      LDA	#4
   2529  fa41		       85 d4		      STA	sounda
   2530  fa43		       a5 83		      LDA	missile1x
   2531  fa45		       c9 82		      CMP	#130
   2532  fa47		       b0 07		      BCS	.skip15then
   2533  fa49				   .condpart16
   2534  fa49		       a5 83		      LDA	missile1x
   2535  fa4b		       18		      CLC
   2536  fa4c		       69 08		      ADC	#8
   2537  fa4e		       85 83		      STA	missile1x
   2538  fa50				   .skip15then
   2539  fa50				   .skipL0109
   2540  fa50				   .
   2541  fa50							; 
   2542  fa50
   2543  fa50				   .
   2544  fa50							; 
   2545  fa50
   2546  fa50				   .L0110		;  if collision(player0,missile1)  &&	joy0fire then score  =	score  +  f  :	f  =  100  :  goto cut
   2547  fa50
   2548  fa50		       24 01		      bit	CXM1P
   2549  fa52		       10 20		      BPL	.skipL0110
   2550  fa54				   .condpart17
   2551  fa54		       24 0c		      bit	INPT4
   2552  fa56		       30 1c		      BMI	.skip17then
   2553  fa58				   .condpart18
   2554  fa58		       f8		      SED
   2555  fa59		       18		      CLC
   2556  fa5a		       a5 95		      LDA	score+2
   2557  fa5c		       65 d9		      ADC	f
   2558  fa5e		       85 95		      STA	score+2
   2559  fa60		       a5 94		      LDA	score+1
   2560  fa62		       69 00		      ADC	#0
   2561  fa64		       85 94		      STA	score+1
   2562  fa66		       a5 93		      LDA	score
   2563  fa68		       69 00		      ADC	#0
   2564  fa6a		       85 93		      STA	score
   2565  fa6c		       d8		      CLD
   2566  fa6d		       a9 64		      LDA	#100
   2567  fa6f		       85 d9		      STA	f
   2568  fa71		       4c ae fa 	      jmp	.cut
   2569  fa74
   2570  fa74				   .skip17then
   2571  fa74				   .skipL0110
   2572  fa74				   .
   2573  fa74							; 
   2574  fa74
   2575  fa74				   .
   2576  fa74							; 
   2577  fa74
   2578  fa74				   .
   2579  fa74							; 
   2580  fa74
   2581  fa74				   .L0111		;  if player0y  >  100 then statusbarlength  =  statusbarlength  -  20  :  player0y  =  5  :  f  =  100  :  player0x  =   ( rand & 127 )  + 20  :  COLUBK  =  $0E
   2582  fa74
   2583  fa74		       a9 64		      LDA	#100
   2584  fa76		       c5 85		      CMP	player0y
   2585  fa78		       b0 1d		      BCS	.skipL0111
   2586  fa7a				   .condpart19
   2587  fa7a		       a5 f5		      LDA	statusbarlength
   2588  fa7c		       38		      SEC
   2589  fa7d		       e9 14		      SBC	#20
   2590  fa7f		       85 f5		      STA	statusbarlength
   2591  fa81		       a9 05		      LDA	#5
   2592  fa83		       85 85		      STA	player0y
   2593  fa85		       a9 64		      LDA	#100
   2594  fa87		       85 d9		      STA	f
   2595  fa89							; complex statement detected
   2596  fa89		       20 b9 f3 	      jsr	randomize
   2597  fa8c		       29 7f		      AND	#127
   2598  fa8e		       18		      CLC
   2599  fa8f		       69 14		      ADC	#20
   2600  fa91		       85 80		      STA	player0x
   2601  fa93		       a9 0e		      LDA	#$0E
   2602  fa95		       85 09		      STA	COLUBK
   2603  fa97				   .skipL0111
   2604  fa97				   .
   2605  fa97							; 
   2606  fa97
   2607  fa97				   .L0112		;  drawscreen
   2608  fa97
   2609  fa97		       20 c7 f3 	      jsr	drawscreen
   2610  fa9a				   .L0113		;  NUSIZ1  =  $10
   2611  fa9a
   2612  fa9a		       a9 10		      LDA	#$10
   2613  fa9c		       85 05		      STA	NUSIZ1
   2614  fa9e				   .L0114		;  COLUBK  =  $00
   2615  fa9e
   2616  fa9e		       a9 00		      LDA	#$00
   2617  faa0		       85 09		      STA	COLUBK
   2618  faa2				   .
   2619  faa2							; 
   2620  faa2
   2621  faa2				   .
   2622  faa2							; 
   2623  faa2
   2624  faa2				   .L0115		;  if statusbarlength	=  0 then goto gameover
   2625  faa2
   2626  faa2		       a5 f5		      LDA	statusbarlength
   2627  faa4		       c9 00		      CMP	#0
   2628  faa6		       d0 03		      BNE	.skipL0115
   2629  faa8				   .condpart20
   2630  faa8		       4c 91 fb 	      jmp	.gameover
   2631  faab
   2632  faab				   .skipL0115
   2633  faab				   .
   2634  faab							; 
   2635  faab
   2636  faab				   .L0116		;  goto mainloop
   2637  faab
   2638  faab		       4c 90 f9 	      jmp	.mainloop
   2639  faae
   2640  faae				   .
   2641  faae							; 
   2642  faae
   2643  faae				   .cut
   2644  faae							; cut
   2645  faae
   2646  faae				   .L0117		;  h  =  h  +	1
   2647  faae
   2648  faae		       e6 db		      INC	h
   2649  fab0				   .L0118		;  COLUP0  =  $46
   2650  fab0
   2651  fab0		       a9 46		      LDA	#$46
   2652  fab2		       85 06		      STA	COLUP0
   2653  fab4				   .L0119		;  COLUP1  =  $FE
   2654  fab4
   2655  fab4		       a9 fe		      LDA	#$FE
   2656  fab6		       85 07		      STA	COLUP1
   2657  fab8				   .L0120		;  NUSIZ1  =  $30
   2658  fab8
   2659  fab8		       a9 30		      LDA	#$30
   2660  faba		       85 05		      STA	NUSIZ1
   2661  fabc				   .L0121		;  if h  =  3 then player0:
   2662  fabc
   2663  fabc		       a5 db		      LDA	h
   2664  fabe		       c9 03		      CMP	#3
   2665  fac0		       d0 0c		      BNE	.skipL0121
   2666  fac2				   .condpart21
   2667  fac2		       a2 8b		      LDX	#<player21then_0
   2668  fac4		       86 8a		      STX	player0pointerlo
   2669  fac6		       a9 fc		      LDA	#>player21then_0
   2670  fac8		       85 8b		      STA	player0pointerhi
   2671  faca		       a9 0a		      LDA	#10
   2672  facc		       85 8e		      STA	player0height
   2673  face				   .skipL0121
   2674  face				   .L0122		;  if h  =  6 then player0:
   2675  face
   2676  face		       a5 db		      LDA	h
   2677  fad0		       c9 06		      CMP	#6
   2678  fad2		       d0 0c		      BNE	.skipL0122
   2679  fad4				   .condpart22
   2680  fad4		       a2 96		      LDX	#<player22then_0
   2681  fad6		       86 8a		      STX	player0pointerlo
   2682  fad8		       a9 fc		      LDA	#>player22then_0
   2683  fada		       85 8b		      STA	player0pointerhi
   2684  fadc		       a9 0a		      LDA	#10
   2685  fade		       85 8e		      STA	player0height
   2686  fae0				   .skipL0122
   2687  fae0				   .L0123		;  if h  =  9 then player0:
   2688  fae0
   2689  fae0		       a5 db		      LDA	h
   2690  fae2		       c9 09		      CMP	#9
   2691  fae4		       d0 0c		      BNE	.skipL0123
   2692  fae6				   .condpart23
   2693  fae6		       a2 a1		      LDX	#<player23then_0
   2694  fae8		       86 8a		      STX	player0pointerlo
   2695  faea		       a9 fc		      LDA	#>player23then_0
   2696  faec		       85 8b		      STA	player0pointerhi
   2697  faee		       a9 0a		      LDA	#10
   2698  faf0		       85 8e		      STA	player0height
   2699  faf2				   .skipL0123
   2700  faf2				   .L0124		;  if h  =  12 then player0:
   2701  faf2
   2702  faf2		       a5 db		      LDA	h
   2703  faf4		       c9 0c		      CMP	#12
   2704  faf6		       d0 0c		      BNE	.skipL0124
   2705  faf8				   .condpart24
   2706  faf8		       a2 ac		      LDX	#<player24then_0
   2707  fafa		       86 8a		      STX	player0pointerlo
   2708  fafc		       a9 fc		      LDA	#>player24then_0
   2709  fafe		       85 8b		      STA	player0pointerhi
   2710  fb00		       a9 0a		      LDA	#10
   2711  fb02		       85 8e		      STA	player0height
   2712  fb04				   .skipL0124
   2713  fb04				   .L0125		;  if h  =  15 then player0:
   2714  fb04
   2715  fb04		       a5 db		      LDA	h
   2716  fb06		       c9 0f		      CMP	#15
   2717  fb08		       d0 0c		      BNE	.skipL0125
   2718  fb0a				   .condpart25
   2719  fb0a		       a2 b7		      LDX	#<player25then_0
   2720  fb0c		       86 8a		      STX	player0pointerlo
   2721  fb0e		       a9 fc		      LDA	#>player25then_0
   2722  fb10		       85 8b		      STA	player0pointerhi
   2723  fb12		       a9 0a		      LDA	#10
   2724  fb14		       85 8e		      STA	player0height
   2725  fb16				   .skipL0125
   2726  fb16				   .
   2727  fb16							; 
   2728  fb16
   2729  fb16				   .L0126		;  if h  =  18 then player0:
   2730  fb16
   2731  fb16		       a5 db		      LDA	h
   2732  fb18		       c9 12		      CMP	#18
   2733  fb1a		       d0 0c		      BNE	.skipL0126
   2734  fb1c				   .condpart26
   2735  fb1c		       a2 c2		      LDX	#<player26then_0
   2736  fb1e		       86 8a		      STX	player0pointerlo
   2737  fb20		       a9 fc		      LDA	#>player26then_0
   2738  fb22		       85 8b		      STA	player0pointerhi
   2739  fb24		       a9 0a		      LDA	#10
   2740  fb26		       85 8e		      STA	player0height
   2741  fb28				   .skipL0126
   2742  fb28				   .
   2743  fb28							; 
   2744  fb28
   2745  fb28				   .L0127		;  if h  =  21 then player0:
   2746  fb28
   2747  fb28		       a5 db		      LDA	h
   2748  fb2a		       c9 15		      CMP	#21
   2749  fb2c		       d0 0c		      BNE	.skipL0127
   2750  fb2e				   .condpart27
   2751  fb2e		       a2 cd		      LDX	#<player27then_0
   2752  fb30		       86 8a		      STX	player0pointerlo
   2753  fb32		       a9 fc		      LDA	#>player27then_0
   2754  fb34		       85 8b		      STA	player0pointerhi
   2755  fb36		       a9 0a		      LDA	#10
   2756  fb38		       85 8e		      STA	player0height
   2757  fb3a				   .skipL0127
   2758  fb3a				   .
   2759  fb3a							; 
   2760  fb3a
   2761  fb3a				   .L0128		;  if h  =  24 then player0:
   2762  fb3a
   2763  fb3a		       a5 db		      LDA	h
   2764  fb3c		       c9 18		      CMP	#24
   2765  fb3e		       d0 0c		      BNE	.skipL0128
   2766  fb40				   .condpart28
   2767  fb40		       a2 d8		      LDX	#<player28then_0
   2768  fb42		       86 8a		      STX	player0pointerlo
   2769  fb44		       a9 fc		      LDA	#>player28then_0
   2770  fb46		       85 8b		      STA	player0pointerhi
   2771  fb48		       a9 0a		      LDA	#10
   2772  fb4a		       85 8e		      STA	player0height
   2773  fb4c				   .skipL0128
   2774  fb4c				   .
   2775  fb4c							; 
   2776  fb4c
   2777  fb4c				   .L0129		;  if h  =  27 then player0:
   2778  fb4c
   2779  fb4c		       a5 db		      LDA	h
   2780  fb4e		       c9 1b		      CMP	#27
   2781  fb50		       d0 0c		      BNE	.skipL0129
   2782  fb52				   .condpart29
   2783  fb52		       a2 e3		      LDX	#<player29then_0
   2784  fb54		       86 8a		      STX	player0pointerlo
   2785  fb56		       a9 fc		      LDA	#>player29then_0
   2786  fb58		       85 8b		      STA	player0pointerhi
   2787  fb5a		       a9 0a		      LDA	#10
   2788  fb5c		       85 8e		      STA	player0height
   2789  fb5e				   .skipL0129
   2790  fb5e				   .
   2791  fb5e							; 
   2792  fb5e
   2793  fb5e				   .L0130		;  if h  =  30 then player0:
   2794  fb5e
   2795  fb5e		       a5 db		      LDA	h
   2796  fb60		       c9 1e		      CMP	#30
   2797  fb62		       d0 0c		      BNE	.skipL0130
   2798  fb64				   .condpart30
   2799  fb64		       a2 ee		      LDX	#<player30then_0
   2800  fb66		       86 8a		      STX	player0pointerlo
   2801  fb68		       a9 fc		      LDA	#>player30then_0
   2802  fb6a		       85 8b		      STA	player0pointerhi
   2803  fb6c		       a9 0a		      LDA	#10
   2804  fb6e		       85 8e		      STA	player0height
   2805  fb70				   .skipL0130
   2806  fb70				   .
   2807  fb70							; 
   2808  fb70
   2809  fb70				   .L0131		;  if h = 30 then h  =  0  :  player0y  =  5  :  player0x  =	( rand & 127 )	+ 20  :  goto mainsetup2
   2810  fb70
   2811  fb70		       a5 db		      LDA	h
   2812  fb72		       c9 1e		      CMP	#30
   2813  fb74		       d0 15		      BNE	.skipL0131
   2814  fb76				   .condpart31
   2815  fb76		       a9 00		      LDA	#0
   2816  fb78		       85 db		      STA	h
   2817  fb7a		       a9 05		      LDA	#5
   2818  fb7c		       85 85		      STA	player0y
   2819  fb7e							; complex statement detected
   2820  fb7e		       20 b9 f3 	      jsr	randomize
   2821  fb81		       29 7f		      AND	#127
   2822  fb83		       18		      CLC
   2823  fb84		       69 14		      ADC	#20
   2824  fb86		       85 80		      STA	player0x
   2825  fb88		       4c 84 f9 	      jmp	.mainsetup2
   2826  fb8b
   2827  fb8b				   .skipL0131
   2828  fb8b				   .L0132		;  drawscreen
   2829  fb8b
   2830  fb8b		       20 c7 f3 	      jsr	drawscreen
   2831  fb8e				   .L0133		;  goto cut
   2832  fb8e
   2833  fb8e		       4c ae fa 	      jmp	.cut
   2834  fb91
   2835  fb91				   .
   2836  fb91							; 
   2837  fb91
   2838  fb91				   .gameover
   2839  fb91							; gameover
   2840  fb91
   2841  fb91				   .L0134		;  COLUP0  =  $00
   2842  fb91
   2843  fb91		       a9 00		      LDA	#$00
   2844  fb93		       85 06		      STA	COLUP0
   2845  fb95				   .L0135		;  COLUP1  =  $00
   2846  fb95
   2847  fb95		       a9 00		      LDA	#$00
   2848  fb97		       85 07		      STA	COLUP1
   2849  fb99				   .L0136		;  missile1y  =  200
   2850  fb99
   2851  fb99		       a9 c8		      LDA	#200
   2852  fb9b		       85 88		      STA	missile1y
   2853  fb9d				   .
   2854  fb9d							; 
   2855  fb9d
   2856  fb9d				   .L0137		;  COLUBK = $00
   2857  fb9d
   2858  fb9d		       a9 00		      LDA	#$00
   2859  fb9f		       85 09		      STA	COLUBK
   2860  fba1				   .
   2861  fba1							; 
   2862  fba1
   2863  fba1				   .L0138		;  playfield:
   2864  fba1
   2865  fba1				  -	      ifconst	pfres
   2866  fba1				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2867  fba1					      else
   2868  fba1		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2869  fba3					      endif
   2870  fba3		       4c d2 fb 	      jmp	pflabel2
   2871  fba6				   PF_data2
   2872  fba6		       00 00		      .byte.b	%00000000, %00000000
   2873  fba8					      if	(pfwidth>2)
   2874  fba8		       00 00		      .byte.b	%00000000, %00000000
   2875  fbaa					      endif
   2876  fbaa		       00 f8		      .byte.b	%00000000, %11111000
   2877  fbac					      if	(pfwidth>2)
   2878  fbac		       f8 00		      .byte.b	%11111000, %00000000
   2879  fbae					      endif
   2880  fbae		       00 10		      .byte.b	%00000000, %00010000
   2881  fbb0					      if	(pfwidth>2)
   2882  fbb0		       80 00		      .byte.b	%10000000, %00000000
   2883  fbb2					      endif
   2884  fbb2		       00 f8		      .byte.b	%00000000, %11111000
   2885  fbb4					      if	(pfwidth>2)
   2886  fbb4		       98 00		      .byte.b	%10011000, %00000000
   2887  fbb6					      endif
   2888  fbb6		       00 90		      .byte.b	%00000000, %10010000
   2889  fbb8					      if	(pfwidth>2)
   2890  fbb8		       e0 00		      .byte.b	%11100000, %00000000
   2891  fbba					      endif
   2892  fbba		       00 60		      .byte.b	%00000000, %01100000
   2893  fbbc					      if	(pfwidth>2)
   2894  fbbc		       88 00		      .byte.b	%10001000, %00000000
   2895  fbbe					      endif
   2896  fbbe		       00 58		      .byte.b	%00000000, %01011000
   2897  fbc0					      if	(pfwidth>2)
   2898  fbc0		       f8 00		      .byte.b	%11111000, %00000000
   2899  fbc2					      endif
   2900  fbc2		       60 00		      .byte.b	%01100000, %00000000
   2901  fbc4					      if	(pfwidth>2)
   2902  fbc4		       00 00		      .byte.b	%00000000, %00000000
   2903  fbc6					      endif
   2904  fbc6		       66 77		      .byte.b	%01100110, %01110111
   2905  fbc8					      if	(pfwidth>2)
   2906  fbc8		       25 6e		      .byte.b	%00100101, %01101110
   2907  fbca					      endif
   2908  fbca		       2a 37		      .byte.b	%00101010, %00110111
   2909  fbcc					      if	(pfwidth>2)
   2910  fbcc		       55 26		      .byte.b	%01010101, %00100110
   2911  fbce					      endif
   2912  fbce		       66 75		      .byte.b	%01100110, %01110101
   2913  fbd0					      if	(pfwidth>2)
   2914  fbd0		       22 2e		      .byte.b	%00100010, %00101110
   2915  fbd2					      endif
   2916  fbd2				   pflabel2
   2917  fbd2		       bd a6 fb 	      lda	PF_data2,x
   2918  fbd5		       95 a4		      sta	playfield,x
   2919  fbd7		       ca		      dex
   2920  fbd8		       10 f8		      bpl	pflabel2
   2921  fbda				   .
   2922  fbda							; 
   2923  fbda
   2924  fbda				   .L0139		;  pfcolors:
   2925  fbda
   2926  fbda		       a9 2e		      lda	# $2E
   2927  fbdc		       85 08		      sta	COLUPF
   2928  fbde				  -	      ifconst	pfres
   2929  fbde				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   2930  fbde					      else
   2931  fbde		       a9 fc		      lda	#>(pfcolorlabel13-83)
   2932  fbe0					      endif
   2933  fbe0		       85 f1		      sta	pfcolortable+1
   2934  fbe2				  -	      ifconst	pfres
   2935  fbe2				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   2936  fbe2					      else
   2937  fbe2		       a9 05		      lda	#<(pfcolorlabel13-83)
   2938  fbe4					      endif
   2939  fbe4		       85 f0		      sta	pfcolortable
   2940  fbe6				   .
   2941  fbe6							; 
   2942  fbe6
   2943  fbe6				   .L0140		;  if joy0fire then counter  =  counter  +  1 else counter  =	0
   2944  fbe6
   2945  fbe6		       24 0c		      bit	INPT4
   2946  fbe8		       30 05		      BMI	.skipL0140
   2947  fbea				   .condpart32
   2948  fbea		       e6 d6		      INC	counter
   2949  fbec		       4c f3 fb 	      jmp	.skipelse1
   2950  fbef				   .skipL0140
   2951  fbef		       a9 00		      LDA	#0
   2952  fbf1		       85 d6		      STA	counter
   2953  fbf3				   .skipelse1
   2954  fbf3				   .L0141		;  if counter	>  50 then reboot
   2955  fbf3
   2956  fbf3		       a9 32		      LDA	#50
   2957  fbf5		       c5 d6		      CMP	counter
   2958  fbf7		       b0 03		      BCS	.skipL0141
   2959  fbf9				   .condpart33
   2960  fbf9		       6c fc ff 	      JMP	($FFFC)
   2961  fbfc				   .skipL0141
   2962  fbfc				   .L0142		;  if switchreset then reboot
   2963  fbfc
   2964  fbfc		       a9 01		      lda	#1
   2965  fbfe		       2c 82 02 	      bit	SWCHB
   2966  fc01		       d0 03		      BNE	.skipL0142
   2967  fc03				   .condpart34
   2968  fc03		       6c fc ff 	      JMP	($FFFC)
   2969  fc06				   .skipL0142
   2970  fc06				   .
   2971  fc06							; 
   2972  fc06
   2973  fc06				   .L0143		;  drawscreen
   2974  fc06
   2975  fc06		       20 c7 f3 	      jsr	drawscreen
   2976  fc09				   .
   2977  fc09							; 
   2978  fc09
   2979  fc09				   .L0144		;  goto gameover 
   2980  fc09		       4c 91 fb 	      jmp	.gameover
   2981  fc0c				  -	      ifconst	pfres
   2982  fc0c				  -	      if	(<*) > (254-pfres*pfwidth)
   2983  fc0c				  -	      align	256
   2984  fc0c				  -	      endif
   2985  fc0c				  -	      if	(<*) < (136-pfres*pfwidth)
   2986  fc0c				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2987  fc0c				  -	      .byte	0
   2988  fc0c				  -	      repend
   2989  fc0c				  -	      endif
   2990  fc0c					      else
   2991  fc0c				  -	      if	(<*) > 206
   2992  fc0c				  -	      align	256
   2993  fc0c					      endif
   2994  fc0c					      if	(<*) < 88
   2995  fc0c					      repeat	(88-(<*))
   2996  fc0c		       00		      .byte.b	0
   2995  fc0c					      repend
   2996  fc0d		       00		      .byte.b	0
   2995  fc0d					      repend
   2996  fc0e		       00		      .byte.b	0
   2995  fc0e					      repend
   2996  fc0f		       00		      .byte.b	0
   2995  fc0f					      repend
   2996  fc10		       00		      .byte.b	0
   2995  fc10					      repend
   2996  fc11		       00		      .byte.b	0
   2995  fc11					      repend
   2996  fc12		       00		      .byte.b	0
   2995  fc12					      repend
   2996  fc13		       00		      .byte.b	0
   2995  fc13					      repend
   2996  fc14		       00		      .byte.b	0
   2995  fc14					      repend
   2996  fc15		       00		      .byte.b	0
   2995  fc15					      repend
   2996  fc16		       00		      .byte.b	0
   2995  fc16					      repend
   2996  fc17		       00		      .byte.b	0
   2995  fc17					      repend
   2996  fc18		       00		      .byte.b	0
   2995  fc18					      repend
   2996  fc19		       00		      .byte.b	0
   2995  fc19					      repend
   2996  fc1a		       00		      .byte.b	0
   2995  fc1a					      repend
   2996  fc1b		       00		      .byte.b	0
   2995  fc1b					      repend
   2996  fc1c		       00		      .byte.b	0
   2995  fc1c					      repend
   2996  fc1d		       00		      .byte.b	0
   2995  fc1d					      repend
   2996  fc1e		       00		      .byte.b	0
   2995  fc1e					      repend
   2996  fc1f		       00		      .byte.b	0
   2995  fc1f					      repend
   2996  fc20		       00		      .byte.b	0
   2995  fc20					      repend
   2996  fc21		       00		      .byte.b	0
   2995  fc21					      repend
   2996  fc22		       00		      .byte.b	0
   2995  fc22					      repend
   2996  fc23		       00		      .byte.b	0
   2995  fc23					      repend
   2996  fc24		       00		      .byte.b	0
   2995  fc24					      repend
   2996  fc25		       00		      .byte.b	0
   2995  fc25					      repend
   2996  fc26		       00		      .byte.b	0
   2995  fc26					      repend
   2996  fc27		       00		      .byte.b	0
   2995  fc27					      repend
   2996  fc28		       00		      .byte.b	0
   2995  fc28					      repend
   2996  fc29		       00		      .byte.b	0
   2995  fc29					      repend
   2996  fc2a		       00		      .byte.b	0
   2995  fc2a					      repend
   2996  fc2b		       00		      .byte.b	0
   2995  fc2b					      repend
   2996  fc2c		       00		      .byte.b	0
   2995  fc2c					      repend
   2996  fc2d		       00		      .byte.b	0
   2995  fc2d					      repend
   2996  fc2e		       00		      .byte.b	0
   2995  fc2e					      repend
   2996  fc2f		       00		      .byte.b	0
   2995  fc2f					      repend
   2996  fc30		       00		      .byte.b	0
   2995  fc30					      repend
   2996  fc31		       00		      .byte.b	0
   2995  fc31					      repend
   2996  fc32		       00		      .byte.b	0
   2995  fc32					      repend
   2996  fc33		       00		      .byte.b	0
   2995  fc33					      repend
   2996  fc34		       00		      .byte.b	0
   2995  fc34					      repend
   2996  fc35		       00		      .byte.b	0
   2995  fc35					      repend
   2996  fc36		       00		      .byte.b	0
   2995  fc36					      repend
   2996  fc37		       00		      .byte.b	0
   2995  fc37					      repend
   2996  fc38		       00		      .byte.b	0
   2995  fc38					      repend
   2996  fc39		       00		      .byte.b	0
   2995  fc39					      repend
   2996  fc3a		       00		      .byte.b	0
   2995  fc3a					      repend
   2996  fc3b		       00		      .byte.b	0
   2995  fc3b					      repend
   2996  fc3c		       00		      .byte.b	0
   2995  fc3c					      repend
   2996  fc3d		       00		      .byte.b	0
   2995  fc3d					      repend
   2996  fc3e		       00		      .byte.b	0
   2995  fc3e					      repend
   2996  fc3f		       00		      .byte.b	0
   2995  fc3f					      repend
   2996  fc40		       00		      .byte.b	0
   2995  fc40					      repend
   2996  fc41		       00		      .byte.b	0
   2995  fc41					      repend
   2996  fc42		       00		      .byte.b	0
   2995  fc42					      repend
   2996  fc43		       00		      .byte.b	0
   2995  fc43					      repend
   2996  fc44		       00		      .byte.b	0
   2995  fc44					      repend
   2996  fc45		       00		      .byte.b	0
   2995  fc45					      repend
   2996  fc46		       00		      .byte.b	0
   2995  fc46					      repend
   2996  fc47		       00		      .byte.b	0
   2995  fc47					      repend
   2996  fc48		       00		      .byte.b	0
   2995  fc48					      repend
   2996  fc49		       00		      .byte.b	0
   2995  fc49					      repend
   2996  fc4a		       00		      .byte.b	0
   2995  fc4a					      repend
   2996  fc4b		       00		      .byte.b	0
   2995  fc4b					      repend
   2996  fc4c		       00		      .byte.b	0
   2995  fc4c					      repend
   2996  fc4d		       00		      .byte.b	0
   2995  fc4d					      repend
   2996  fc4e		       00		      .byte.b	0
   2995  fc4e					      repend
   2996  fc4f		       00		      .byte.b	0
   2995  fc4f					      repend
   2996  fc50		       00		      .byte.b	0
   2995  fc50					      repend
   2996  fc51		       00		      .byte.b	0
   2995  fc51					      repend
   2996  fc52		       00		      .byte.b	0
   2995  fc52					      repend
   2996  fc53		       00		      .byte.b	0
   2995  fc53					      repend
   2996  fc54		       00		      .byte.b	0
   2995  fc54					      repend
   2996  fc55		       00		      .byte.b	0
   2995  fc55					      repend
   2996  fc56		       00		      .byte.b	0
   2995  fc56					      repend
   2996  fc57		       00		      .byte.b	0
   2997  fc58					      repend
   2998  fc58					      endif
   2999  fc58					      endif
   3000  fc58				   pfcolorlabel13
   3001  fc58		       dc 2c 00 00	      .byte.b	$DC, $2C,0,0
   3002  fc5c		       dc 2a 00 00	      .byte.b	$DC, $2A,0,0
   3003  fc60		       dc 28 00 00	      .byte.b	$DC, $28,0,0
   3004  fc64		       dc 26 00 00	      .byte.b	$DC, $26,0,0
   3005  fc68		       dc 24 00 00	      .byte.b	$DC, $24,0,0
   3006  fc6c		       26 22 00 00	      .byte.b	$26, $22,0,0
   3007  fc70		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3008  fc74		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3009  fc78		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3010  fc7c		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3011  fc80				  -	      if	(<*) > (<(*+10))
   3012  fc80				  -	      repeat	($100-<*)
   3013  fc80				  -	      .byte	0
   3014  fc80				  -	      repend
   3015  fc80					      endif
   3016  fc80				   playerL092_0
   3017  fc80		       2c		      .byte.b	%00101100
   3018  fc81		       7e		      .byte.b	%01111110
   3019  fc82		       ff		      .byte.b	%11111111
   3020  fc83		       ff		      .byte.b	%11111111
   3021  fc84		       ff		      .byte.b	%11111111
   3022  fc85		       ff		      .byte.b	%11111111
   3023  fc86		       ff		      .byte.b	%11111111
   3024  fc87		       6e		      .byte.b	%01101110
   3025  fc88		       18		      .byte.b	%00011000
   3026  fc89		       0c		      .byte.b	%00001100
   3027  fc8a		       00		      .byte.b	%00000000
   3028  fc8b				  -	      if	(<*) > (<(*+10))
   3029  fc8b				  -	      repeat	($100-<*)
   3030  fc8b				  -	      .byte	0
   3031  fc8b				  -	      repend
   3032  fc8b					      endif
   3033  fc8b				   player21then_0
   3034  fc8b		       2c		      .byte.b	%00101100
   3035  fc8c		       7e		      .byte.b	%01111110
   3036  fc8d		       ff		      .byte.b	%11111111
   3037  fc8e		       ff		      .byte.b	%11111111
   3038  fc8f		       ff		      .byte.b	%11111111
   3039  fc90		       ff		      .byte.b	%11111111
   3040  fc91		       ff		      .byte.b	%11111111
   3041  fc92		       ff		      .byte.b	%11111111
   3042  fc93		       6e		      .byte.b	%01101110
   3043  fc94		       18		      .byte.b	%00011000
   3044  fc95		       0c		      .byte.b	%00001100
   3045  fc96				  -	      if	(<*) > (<(*+10))
   3046  fc96				  -	      repeat	($100-<*)
   3047  fc96				  -	      .byte	0
   3048  fc96				  -	      repend
   3049  fc96					      endif
   3050  fc96				   player22then_0
   3051  fc96		       2c		      .byte.b	%00101100
   3052  fc97		       7e		      .byte.b	%01111110
   3053  fc98		       ff		      .byte.b	%11111111
   3054  fc99		       ff		      .byte.b	%11111111
   3055  fc9a		       ff		      .byte.b	%11111111
   3056  fc9b		       0f		      .byte.b	%00001111
   3057  fc9c		       ff		      .byte.b	%11111111
   3058  fc9d		       ff		      .byte.b	%11111111
   3059  fc9e		       6e		      .byte.b	%01101110
   3060  fc9f		       18		      .byte.b	%00011000
   3061  fca0		       0c		      .byte.b	%00001100
   3062  fca1				  -	      if	(<*) > (<(*+10))
   3063  fca1				  -	      repeat	($100-<*)
   3064  fca1				  -	      .byte	0
   3065  fca1				  -	      repend
   3066  fca1					      endif
   3067  fca1				   player23then_0
   3068  fca1		       2c		      .byte.b	%00101100
   3069  fca2		       7e		      .byte.b	%01111110
   3070  fca3		       ff		      .byte.b	%11111111
   3071  fca4		       ff		      .byte.b	%11111111
   3072  fca5		       ff		      .byte.b	%11111111
   3073  fca6		       00		      .byte.b	%00000000
   3074  fca7		       ff		      .byte.b	%11111111
   3075  fca8		       ff		      .byte.b	%11111111
   3076  fca9		       6e		      .byte.b	%01101110
   3077  fcaa		       18		      .byte.b	%00011000
   3078  fcab		       0c		      .byte.b	%00001100
   3079  fcac				  -	      if	(<*) > (<(*+10))
   3080  fcac				  -	      repeat	($100-<*)
   3081  fcac				  -	      .byte	0
   3082  fcac				  -	      repend
   3083  fcac					      endif
   3084  fcac				   player24then_0
   3085  fcac		       2c		      .byte.b	%00101100
   3086  fcad		       7e		      .byte.b	%01111110
   3087  fcae		       ff		      .byte.b	%11111111
   3088  fcaf		       ff		      .byte.b	%11111111
   3089  fcb0		       ff		      .byte.b	%11111111
   3090  fcb1		       00		      .byte.b	%00000000
   3091  fcb2		       ff		      .byte.b	%11111111
   3092  fcb3		       ff		      .byte.b	%11111111
   3093  fcb4		       6e		      .byte.b	%01101110
   3094  fcb5		       18		      .byte.b	%00011000
   3095  fcb6		       0c		      .byte.b	%00001100
   3096  fcb7				  -	      if	(<*) > (<(*+10))
   3097  fcb7				  -	      repeat	($100-<*)
   3098  fcb7				  -	      .byte	0
   3099  fcb7				  -	      repend
   3100  fcb7					      endif
   3101  fcb7				   player25then_0
   3102  fcb7		       2c		      .byte.b	%00101100
   3103  fcb8		       7e		      .byte.b	%01111110
   3104  fcb9		       ff		      .byte.b	%11111111
   3105  fcba		       ff		      .byte.b	%11111111
   3106  fcbb		       ff		      .byte.b	%11111111
   3107  fcbc		       00		      .byte.b	%00000000
   3108  fcbd		       ff		      .byte.b	%11111111
   3109  fcbe		       ff		      .byte.b	%11111111
   3110  fcbf		       6e		      .byte.b	%01101110
   3111  fcc0		       18		      .byte.b	%00011000
   3112  fcc1		       0c		      .byte.b	%00001100
   3113  fcc2				  -	      if	(<*) > (<(*+10))
   3114  fcc2				  -	      repeat	($100-<*)
   3115  fcc2				  -	      .byte	0
   3116  fcc2				  -	      repend
   3117  fcc2					      endif
   3118  fcc2				   player26then_0
   3119  fcc2		       04		      .byte.b	%00000100
   3120  fcc3		       2a		      .byte.b	%00101010
   3121  fcc4		       55		      .byte.b	%01010101
   3122  fcc5		       aa		      .byte.b	%10101010
   3123  fcc6		       55		      .byte.b	%01010101
   3124  fcc7		       00		      .byte.b	%00000000
   3125  fcc8		       aa		      .byte.b	%10101010
   3126  fcc9		       55		      .byte.b	%01010101
   3127  fcca		       2a		      .byte.b	%00101010
   3128  fccb		       10		      .byte.b	%00010000
   3129  fccc		       08		      .byte.b	%00001000
   3130  fccd				  -	      if	(<*) > (<(*+10))
   3131  fccd				  -	      repeat	($100-<*)
   3132  fccd				  -	      .byte	0
   3133  fccd				  -	      repend
   3134  fccd					      endif
   3135  fccd				   player27then_0
   3136  fccd		       04		      .byte.b	%00000100
   3137  fcce		       00		      .byte.b	%00000000
   3138  fccf		       55		      .byte.b	%01010101
   3139  fcd0		       00		      .byte.b	%00000000
   3140  fcd1		       55		      .byte.b	%01010101
   3141  fcd2		       00		      .byte.b	%00000000
   3142  fcd3		       aa		      .byte.b	%10101010
   3143  fcd4		       00		      .byte.b	%00000000
   3144  fcd5		       2a		      .byte.b	%00101010
   3145  fcd6		       00		      .byte.b	%00000000
   3146  fcd7		       08		      .byte.b	%00001000
   3147  fcd8				  -	      if	(<*) > (<(*+10))
   3148  fcd8				  -	      repeat	($100-<*)
   3149  fcd8				  -	      .byte	0
   3150  fcd8				  -	      repend
   3151  fcd8					      endif
   3152  fcd8				   player28then_0
   3153  fcd8		       00		      .byte.b	%00000000
   3154  fcd9		       00		      .byte.b	%00000000
   3155  fcda		       44		      .byte.b	%01000100
   3156  fcdb		       00		      .byte.b	%00000000
   3157  fcdc		       11		      .byte.b	%00010001
   3158  fcdd		       00		      .byte.b	%00000000
   3159  fcde		       88		      .byte.b	%10001000
   3160  fcdf		       00		      .byte.b	%00000000
   3161  fce0		       22		      .byte.b	%00100010
   3162  fce1		       00		      .byte.b	%00000000
   3163  fce2		       08		      .byte.b	%00001000
   3164  fce3				  -	      if	(<*) > (<(*+10))
   3165  fce3				  -	      repeat	($100-<*)
   3166  fce3				  -	      .byte	0
   3167  fce3				  -	      repend
   3168  fce3					      endif
   3169  fce3				   player29then_0
   3170  fce3		       00		      .byte.b	%00000000
   3171  fce4		       00		      .byte.b	%00000000
   3172  fce5		       00		      .byte.b	%00000000
   3173  fce6		       00		      .byte.b	%00000000
   3174  fce7		       11		      .byte.b	%00010001
   3175  fce8		       00		      .byte.b	%00000000
   3176  fce9		       88		      .byte.b	%10001000
   3177  fcea		       00		      .byte.b	%00000000
   3178  fceb		       00		      .byte.b	%00000000
   3179  fcec		       00		      .byte.b	%00000000
   3180  fced		       08		      .byte.b	%00001000
   3181  fcee				  -	      if	(<*) > (<(*+10))
   3182  fcee				  -	      repeat	($100-<*)
   3183  fcee				  -	      .byte	0
   3184  fcee				  -	      repend
   3185  fcee					      endif
   3186  fcee				   player30then_0
   3187  fcee		       00		      .byte.b	%00000000
   3188  fcef		       00		      .byte.b	%00000000
   3189  fcf0		       00		      .byte.b	%00000000
   3190  fcf1		       00		      .byte.b	%00000000
   3191  fcf2		       01		      .byte.b	%00000001
   3192  fcf3		       00		      .byte.b	%00000000
   3193  fcf4		       80		      .byte.b	%10000000
   3194  fcf5		       00		      .byte.b	%00000000
   3195  fcf6		       00		      .byte.b	%00000000
   3196  fcf7		       00		      .byte.b	%00000000
   3197  fcf8		       08		      .byte.b	%00001000
   3198  fcf9					      if	ECHOFIRST
      675 bytes of ROM space left
   3199  fcf9					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3200  fcf9					      endif
   3201  fcf9		       00 01	   ECHOFIRST  =	1
   3202  fcf9
   3203  fcf9
   3204  fcf9
   3205  fcf9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3206  fcf9
   3207  fcf9							; feel free to modify the score graphics - just keep each digit 8 high
   3208  fcf9							; and keep the conditional compilation stuff intact
   3209  fcf9				  -	      ifconst	ROM2k
   3210  fcf9				  -	      ORG	$F7AC-8
   3211  fcf9					      else
   3212  fcf9				  -	      ifconst	bankswitch
   3213  fcf9				  -	      if	bankswitch == 8
   3214  fcf9				  -	      ORG	$2F94-bscode_length
   3215  fcf9				  -	      RORG	$FF94-bscode_length
   3216  fcf9				  -	      endif
   3217  fcf9				  -	      if	bankswitch == 16
   3218  fcf9				  -	      ORG	$4F94-bscode_length
   3219  fcf9				  -	      RORG	$FF94-bscode_length
   3220  fcf9				  -	      endif
   3221  fcf9				  -	      if	bankswitch == 32
   3222  fcf9				  -	      ORG	$8F94-bscode_length
   3223  fcf9				  -	      RORG	$FF94-bscode_length
   3224  fcf9				  -	      endif
   3225  fcf9				  -	      if	bankswitch == 64
   3226  fcf9				  -	      ORG	$10F80-bscode_length
   3227  fcf9				  -	      RORG	$1FF80-bscode_length
   3228  fcf9				  -	      endif
   3229  fcf9					      else
   3230  ff9c					      ORG	$FF9C
   3231  ff9c					      endif
   3232  ff9c					      endif
   3233  ff9c
   3234  ff9c							; font equates
   3235  ff9c		       00 01	   .21stcentury =	1
   3236  ff9c		       00 02	   alarmclock =	2
   3237  ff9c		       00 03	   handwritten =	3
   3238  ff9c		       00 04	   interrupted =	4
   3239  ff9c		       00 05	   retroputer =	5
   3240  ff9c		       00 06	   whimsey    =	6
   3241  ff9c		       00 07	   tiny       =	7
   3242  ff9c		       00 08	   hex	      =	8
   3243  ff9c
   3244  ff9c				  -	      ifconst	font
   3245  ff9c				  -	      if	font == hex
   3246  ff9c				  -	      ORG	. - 48
   3247  ff9c				  -	      endif
   3248  ff9c					      endif
   3249  ff9c
   3250  ff9c				   scoretable
   3251  ff9c
   3252  ff9c				  -	      ifconst	font
   3253  ff9c				  -	      if	font == .21stcentury
   3254  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3255  ff9c				  -	      endif
   3256  ff9c				  -	      if	font == alarmclock
   3257  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3258  ff9c				  -	      endif
   3259  ff9c				  -	      if	font == handwritten
   3260  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3261  ff9c				  -	      endif
   3262  ff9c				  -	      if	font == interrupted
   3263  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3264  ff9c				  -	      endif
   3265  ff9c				  -	      if	font == retroputer
   3266  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3267  ff9c				  -	      endif
   3268  ff9c				  -	      if	font == whimsey
   3269  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3270  ff9c				  -	      endif
   3271  ff9c				  -	      if	font == tiny
   3272  ff9c				  -	      include	"score_graphics.asm.tiny"
   3273  ff9c				  -	      endif
   3274  ff9c				  -	      if	font == hex
   3275  ff9c				  -	      include	"score_graphics.asm.hex"
   3276  ff9c				  -	      endif
   3277  ff9c					      else		; default font
   3278  ff9c
   3279  ff9c		       3c		      .byte.b	%00111100
   3280  ff9d		       66		      .byte.b	%01100110
   3281  ff9e		       66		      .byte.b	%01100110
   3282  ff9f		       66		      .byte.b	%01100110
   3283  ffa0		       66		      .byte.b	%01100110
   3284  ffa1		       66		      .byte.b	%01100110
   3285  ffa2		       66		      .byte.b	%01100110
   3286  ffa3		       3c		      .byte.b	%00111100
   3287  ffa4
   3288  ffa4		       7e		      .byte.b	%01111110
   3289  ffa5		       18		      .byte.b	%00011000
   3290  ffa6		       18		      .byte.b	%00011000
   3291  ffa7		       18		      .byte.b	%00011000
   3292  ffa8		       18		      .byte.b	%00011000
   3293  ffa9		       38		      .byte.b	%00111000
   3294  ffaa		       18		      .byte.b	%00011000
   3295  ffab		       08		      .byte.b	%00001000
   3296  ffac
   3297  ffac		       7e		      .byte.b	%01111110
   3298  ffad		       60		      .byte.b	%01100000
   3299  ffae		       60		      .byte.b	%01100000
   3300  ffaf		       3c		      .byte.b	%00111100
   3301  ffb0		       06		      .byte.b	%00000110
   3302  ffb1		       06		      .byte.b	%00000110
   3303  ffb2		       46		      .byte.b	%01000110
   3304  ffb3		       3c		      .byte.b	%00111100
   3305  ffb4
   3306  ffb4		       3c		      .byte.b	%00111100
   3307  ffb5		       46		      .byte.b	%01000110
   3308  ffb6		       06		      .byte.b	%00000110
   3309  ffb7		       06		      .byte.b	%00000110
   3310  ffb8		       1c		      .byte.b	%00011100
   3311  ffb9		       06		      .byte.b	%00000110
   3312  ffba		       46		      .byte.b	%01000110
   3313  ffbb		       3c		      .byte.b	%00111100
   3314  ffbc
   3315  ffbc		       0c		      .byte.b	%00001100
   3316  ffbd		       0c		      .byte.b	%00001100
   3317  ffbe		       7e		      .byte.b	%01111110
   3318  ffbf		       4c		      .byte.b	%01001100
   3319  ffc0		       4c		      .byte.b	%01001100
   3320  ffc1		       2c		      .byte.b	%00101100
   3321  ffc2		       1c		      .byte.b	%00011100
   3322  ffc3		       0c		      .byte.b	%00001100
   3323  ffc4
   3324  ffc4		       3c		      .byte.b	%00111100
   3325  ffc5		       46		      .byte.b	%01000110
   3326  ffc6		       06		      .byte.b	%00000110
   3327  ffc7		       06		      .byte.b	%00000110
   3328  ffc8		       3c		      .byte.b	%00111100
   3329  ffc9		       60		      .byte.b	%01100000
   3330  ffca		       60		      .byte.b	%01100000
   3331  ffcb		       7e		      .byte.b	%01111110
   3332  ffcc
   3333  ffcc		       3c		      .byte.b	%00111100
   3334  ffcd		       66		      .byte.b	%01100110
   3335  ffce		       66		      .byte.b	%01100110
   3336  ffcf		       66		      .byte.b	%01100110
   3337  ffd0		       7c		      .byte.b	%01111100
   3338  ffd1		       60		      .byte.b	%01100000
   3339  ffd2		       62		      .byte.b	%01100010
   3340  ffd3		       3c		      .byte.b	%00111100
   3341  ffd4
   3342  ffd4		       30		      .byte.b	%00110000
   3343  ffd5		       30		      .byte.b	%00110000
   3344  ffd6		       30		      .byte.b	%00110000
   3345  ffd7		       18		      .byte.b	%00011000
   3346  ffd8		       0c		      .byte.b	%00001100
   3347  ffd9		       06		      .byte.b	%00000110
   3348  ffda		       42		      .byte.b	%01000010
   3349  ffdb		       3e		      .byte.b	%00111110
   3350  ffdc
   3351  ffdc		       3c		      .byte.b	%00111100
   3352  ffdd		       66		      .byte.b	%01100110
   3353  ffde		       66		      .byte.b	%01100110
   3354  ffdf		       66		      .byte.b	%01100110
   3355  ffe0		       3c		      .byte.b	%00111100
   3356  ffe1		       66		      .byte.b	%01100110
   3357  ffe2		       66		      .byte.b	%01100110
   3358  ffe3		       3c		      .byte.b	%00111100
   3359  ffe4
   3360  ffe4		       3c		      .byte.b	%00111100
   3361  ffe5		       46		      .byte.b	%01000110
   3362  ffe6		       06		      .byte.b	%00000110
   3363  ffe7		       3e		      .byte.b	%00111110
   3364  ffe8		       66		      .byte.b	%01100110
   3365  ffe9		       66		      .byte.b	%01100110
   3366  ffea		       66		      .byte.b	%01100110
   3367  ffeb		       3c		      .byte.b	%00111100
   3368  ffec
   3369  ffec					      ifnconst	DPC_kernel_options
   3370  ffec
   3371  ffec		       00		      .byte.b	%00000000
   3372  ffed		       00		      .byte.b	%00000000
   3373  ffee		       00		      .byte.b	%00000000
   3374  ffef		       00		      .byte.b	%00000000
   3375  fff0		       00		      .byte.b	%00000000
   3376  fff1		       00		      .byte.b	%00000000
   3377  fff2		       00		      .byte.b	%00000000
   3378  fff3		       00		      .byte.b	%00000000
   3379  fff4
   3380  fff4					      endif
   3381  fff4
   3382  fff4					      endif
   3383  fff4
   3384  fff4				  -	      ifconst	ROM2k
   3385  fff4				  -	      ORG	$F7FC
   3386  fff4					      else
   3387  fff4				  -	      ifconst	bankswitch
   3388  fff4				  -	      if	bankswitch == 8
   3389  fff4				  -	      ORG	$2FF4-bscode_length
   3390  fff4				  -	      RORG	$FFF4-bscode_length
   3391  fff4				  -	      endif
   3392  fff4				  -	      if	bankswitch == 16
   3393  fff4				  -	      ORG	$4FF4-bscode_length
   3394  fff4				  -	      RORG	$FFF4-bscode_length
   3395  fff4				  -	      endif
   3396  fff4				  -	      if	bankswitch == 32
   3397  fff4				  -	      ORG	$8FF4-bscode_length
   3398  fff4				  -	      RORG	$FFF4-bscode_length
   3399  fff4				  -	      endif
   3400  fff4				  -	      if	bankswitch == 64
   3401  fff4				  -	      ORG	$10FE0-bscode_length
   3402  fff4				  -	      RORG	$1FFE0-bscode_length
   3403  fff4				  -	      endif
   3404  fff4					      else
   3405  fffc					      ORG	$FFFC
   3406  fffc					      endif
   3407  fffc					      endif
   3408  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3409  fffc
   3410  fffc				  -	      ifconst	bankswitch
   3411  fffc				  -	      if	bankswitch == 8
   3412  fffc				  -	      ORG	$2FFC
   3413  fffc				  -	      RORG	$FFFC
   3414  fffc				  -	      endif
   3415  fffc				  -	      if	bankswitch == 16
   3416  fffc				  -	      ORG	$4FFC
   3417  fffc				  -	      RORG	$FFFC
   3418  fffc				  -	      endif
   3419  fffc				  -	      if	bankswitch == 32
   3420  fffc				  -	      ORG	$8FFC
   3421  fffc				  -	      RORG	$FFFC
   3422  fffc				  -	      endif
   3423  fffc				  -	      if	bankswitch == 64
   3424  fffc				  -	      ORG	$10FF0
   3425  fffc				  -	      RORG	$1FFF0
   3426  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3427  fffc				  -	      ORG	$10FF8
   3428  fffc				  -	      RORG	$1FFF8
   3429  fffc				  -	      ifconst	superchip
   3430  fffc				  -	      .byte	"E","F","S","C"
   3431  fffc				  -	      else
   3432  fffc				  -	      .byte	"E","F","E","F"
   3433  fffc				  -	      endif
   3434  fffc				  -	      ORG	$10FFC
   3435  fffc				  -	      RORG	$1FFFC
   3436  fffc				  -	      endif
   3437  fffc					      else
   3438  fffc				  -	      ifconst	ROM2k
   3439  fffc				  -	      ORG	$F7FC
   3440  fffc					      else
   3441  fffc					      ORG	$FFFC
   3442  fffc					      endif
   3443  fffc					      endif
   3444  fffc		       00 f0		      .word.w	(start & $ffff)
   3445  fffe		       00 f0		      .word.w	(start & $ffff)
