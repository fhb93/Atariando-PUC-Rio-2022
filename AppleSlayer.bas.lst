------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    w	       =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    u	       =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    p	       =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    m	       =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    i	       =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    g	       =	g
     48  10000 ????
     49  10000 ????		00 d9	    f	       =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 5c	    logo_height =	92
     62  10000 ????
     63  10000 ????		00 0e	    logo_color =	$0E
     64  10000 ????
     65  10000 ????		00 00	    scorefade  =	0
     66  10000 ????
     67  10000 ????		00 2b	    vblank_time =	43
     68  10000 ????		00 25	    overscan_time =	37
     69  10000 ????		00 01	    PFcolors   =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 95	    _sc3       =	score + 2
      4  10000 ????
      5  10000 ????		00 94	    _sc2       =	score + 1
      6  10000 ????
      7  10000 ????		00 93	    _sc1       =	score
      8  10000 ????
      9  10000 ????		00 ed	    z	       =	z
     10  10000 ????
     11  10000 ????		00 ec	    y	       =	y
     12  10000 ????
     13  10000 ????		00 eb	    x	       =	x
     14  10000 ????
     15  10000 ????		00 ea	    w	       =	w
     16  10000 ????
     17  10000 ????		00 e9	    v	       =	v
     18  10000 ????
     19  10000 ????		00 e8	    u	       =	u
     20  10000 ????
     21  10000 ????		00 e7	    t	       =	t
     22  10000 ????
     23  10000 ????		00 e6	    statusbarcolor =	s
     24  10000 ????
     25  10000 ????		00 e5	    rand16     =	r
     26  10000 ????
     27  10000 ????		00 e4	    q	       =	q
     28  10000 ????
     29  10000 ????		00 e3	    p	       =	p
     30  10000 ????
     31  10000 ????		00 e2	    o	       =	o
     32  10000 ????
     33  10000 ????		00 e1	    n	       =	n
     34  10000 ????
     35  10000 ????		00 e0	    m	       =	m
     36  10000 ????
     37  10000 ????		00 df	    l	       =	l
     38  10000 ????
     39  10000 ????		00 de	    k	       =	k
     40  10000 ????
     41  10000 ????		00 dd	    j	       =	j
     42  10000 ????
     43  10000 ????		00 dc	    i	       =	i
     44  10000 ????
     45  10000 ????		00 db	    h	       =	h
     46  10000 ????
     47  10000 ????		00 da	    g	       =	g
     48  10000 ????
     49  10000 ????		00 d9	    f	       =	f
     50  10000 ????
     51  10000 ????		00 d8	    e	       =	e
     52  10000 ????
     53  10000 ????		00 d7	    d	       =	d
     54  10000 ????
     55  10000 ????		00 d6	    counter    =	c
     56  10000 ????
     57  10000 ????		00 d5	    soundb     =	b
     58  10000 ????
     59  10000 ????		00 d4	    sounda     =	a
     60  10000 ????
     61  10000 ????		00 5c	    logo_height =	92
     62  10000 ????
     63  10000 ????		00 0e	    logo_color =	$0E
     64  10000 ????
     65  10000 ????		00 00	    scorefade  =	0
     66  10000 ????
     67  10000 ????		00 2b	    vblank_time =	43
     68  10000 ????		00 25	    overscan_time =	37
     69  10000 ????		00 01	    PFcolors   =	1
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 3f f5 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef					      ifconst	PFcolors
    403  f0ef		       a8		      tay
    404  f0f0		       b1 f0		      lda	(pfcolortable),y
    405  f0f2					      ifnconst	backgroundchange
    406  f0f2		       85 08		      sta	COLUPF
    407  f0f4				  -	      else
    408  f0f4				  -	      sta	COLUBK
    409  f0f4					      endif
    410  f0f4				  -	      ifconst	pfrowheight
    411  f0f4				  -	      lda	#pfrowheight
    412  f0f4					      else
    413  f0f4					      ifnconst	pfres
    414  f0f4		       a9 08		      lda	#8
    415  f0f6				  -	      else
    416  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0f6					      endif
    418  f0f6					      endif
    419  f0f6		       85 9c		      sta	temp1
    420  f0f8					      endif
    421  f0f8					      ifnconst	PFcolorandheight
    422  f0f8				  -	      ifnconst	PFcolors
    423  f0f8				  -	      ifnconst	PFheights
    424  f0f8				  -	      ifnconst	no_blank_lines
    425  f0f8				  -			; read paddle 0
    426  f0f8				  -			; lo-res paddle read
    427  f0f8				  -			; bit INPT0
    428  f0f8				  -			; bmi paddleskipread
    429  f0f8				  -			; inc paddle0
    430  f0f8				  -			;donepaddleskip
    431  f0f8				  -	      sleep	10
    432  f0f8				  -	      ifconst	pfrowheight
    433  f0f8				  -	      lda	#pfrowheight
    434  f0f8				  -	      else
    435  f0f8				  -	      ifnconst	pfres
    436  f0f8				  -	      lda	#8
    437  f0f8				  -	      else
    438  f0f8				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f8				  -	      endif
    440  f0f8				  -	      endif
    441  f0f8				  -	      sta	temp1
    442  f0f8				  -	      endif
    443  f0f8				  -	      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101				  -	      ifnconst	PFcolors
    459  f101				  -	      sleep	10
    460  f101					      else
    461  f101		       a0 7c		      ldy	#124
    462  f103		       b1 f0		      lda	(pfcolortable),y
    463  f105		       85 08		      sta	COLUPF
    464  f107					      endif
    465  f107
    466  f107				  -	      ifconst	PFheights
    467  f107				  -	      ldx	#1
    468  f107				  -			;sleep 4
    469  f107				  -	      sleep	3	; this was over 1 cycle
    470  f107					      else
    471  f107		       a6 ef		      ldx	playfieldpos
    472  f109							;sleep 3
      0  f109					      sleep	2	; this was over 1 cycle
      1  f109				   .CYCLES    SET	2
      2  f109
      3  f109				  -	      IF	.CYCLES < 2
      4  f109				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f109				  -	      ERR
      6  f109					      ENDIF
      7  f109
      8  f109				  -	      IF	.CYCLES & 1
      9  f109				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f109				  -	      nop	0
     11  f109				  -	      ELSE
     12  f109				  -	      bit	VSYNC
     13  f109				  -	      ENDIF
     14  f109				  -.CYCLES    SET	.CYCLES - 3
     15  f109					      ENDIF
     16  f109
     17  f109					      REPEAT	.CYCLES / 2
     18  f109		       ea		      nop
     19  f10a					      REPEND
    474  f10a					      endif
    475  f10a
    476  f10a		       4c 28 f1 	      jmp	enterlastkernel
    477  f10d
    478  f10d				  -	      else
    479  f10d				  -lastkernelline
    480  f10d				  -
    481  f10d				  -	      ifconst	PFheights
    482  f10d				  -	      ldx	#1
    483  f10d				  -			;sleep 5
    484  f10d				  -	      sleep	4	; this was over 1 cycle
    485  f10d				  -	      else
    486  f10d				  -	      ldx	playfieldpos
    487  f10d				  -			;sleep 4
    488  f10d				  -	      sleep	3	; this was over 1 cycle
    489  f10d				  -	      endif
    490  f10d				  -
    491  f10d				  -	      cpx	#0
    492  f10d				  -	      bne	.enterfromNBL
    493  f10d				  -	      jmp	no_blank_lines_bailout
    494  f10d					      endif
    495  f10d
    496  f10d				  -	      if	((<*)>$d5)
    497  f10d				  -	      align	256
    498  f10d					      endif
    499  f10d							; this is a kludge to prevent page wrapping - fix!!!
    500  f10d
    501  f10d				   .skipDrawlastP1
    502  f10d		       a9 00		      lda	#0
    503  f10f		       a8		      tay		; added so we don't cross a page
    504  f110		       4c 3a f1 	      jmp	.continuelastP1
    505  f113
    506  f113				   .endkerloop		; enter at cycle 59??
    507  f113
    508  f113		       ea		      nop
    509  f114
    510  f114				   .enterfromNBL
    511  f114				  -	      ifconst	pfres
    512  f114				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f114				  -	      sty	PF1L	;3
    514  f114				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f114				  -	      sty	PF2L	;3
    516  f114				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f114				  -	      sty	PF1R	; possibly too early?
    518  f114				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f114				  -	      sty	PF2R	;3
    520  f114					      else
    521  f114		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f117		       84 0e		      sty	PF1L	;3
    523  f119		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11c		       84 0f		      sty	PF2L	;3
    525  f11e		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f121		       84 0e		      sty	PF1R	; possibly too early?
    527  f123		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f126		       84 0f		      sty	PF2R	;3
    529  f128					      endif
    530  f128
    531  f128				   enterlastkernel
    532  f128		       a5 92		      lda	ballheight
    533  f12a
    534  f12a							; tya
    535  f12a		       c7 89		      dcp	bally
    536  f12c							; sleep 4
    537  f12c
    538  f12c							; sbc stack3
    539  f12c		       2a		      rol
    540  f12d		       2a		      rol
    541  f12e		       85 1f		      sta	ENABL
    542  f130
    543  f130		       a5 8f		      lda	player1height	;3
    544  f132		       c7 86		      dcp	player1y	;5
    545  f134		       90 d7		      bcc	.skipDrawlastP1
    546  f136		       a4 86		      ldy	player1y	;3
    547  f138		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f13a							; so it doesn't cross a page boundary!
    549  f13a
    550  f13a				   .continuelastP1
    551  f13a		       85 1c		      sta	GRP1	;3
    552  f13c
    553  f13c					      ifnconst	player1colors
    554  f13c		       a5 87		      lda	missile1height	;3
    555  f13e		       c7 88		      dcp	missile1y	;5
    556  f140				  -	      else
    557  f140				  -	      lda	(player1color),y
    558  f140				  -	      sta	COLUP1
    559  f140					      endif
    560  f140
    561  f140		       ca		      dex
    562  f141							;dec temp4 ; might try putting this above PF writes
    563  f141		       f0 36		      beq	endkernel
    564  f143
    565  f143
    566  f143				  -	      ifconst	pfres
    567  f143				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f143				  -	      sty	PF1L	;3
    569  f143				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f143				  -	      sty	PF2L	;3
    571  f143				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f143				  -	      sty	PF1R	; possibly too early?
    573  f143				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f143				  -	      sty	PF2R	;3
    575  f143					      else
    576  f143		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f146		       84 0e		      sty	PF1L	;3
    578  f148		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14b		       84 0f		      sty	PF2L	;3
    580  f14d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f150		       84 0e		      sty	PF1R	; possibly too early?
    582  f152		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f155		       84 0f		      sty	PF2R	;3
    584  f157					      endif
    585  f157
    586  f157					      ifnconst	player1colors
    587  f157		       2a		      rol		;2
    588  f158		       2a		      rol		;2
    589  f159		       85 1e		      sta	ENAM1	;3
    590  f15b				  -	      else
    591  f15b				  -	      ifnconst	playercolors
    592  f15b				  -	      sleep	7
    593  f15b				  -	      else
    594  f15b				  -	      lda.w	player0colorstore
    595  f15b				  -	      sta	COLUP0
    596  f15b				  -	      endif
    597  f15b					      endif
    598  f15b
    599  f15b		       ad 8e 00 	      lda.w	player0height
    600  f15e		       c7 85		      dcp	player0y
    601  f160		       90 11		      bcc	.skipDrawlastP0
    602  f162		       a4 85		      ldy	player0y
    603  f164		       b1 8a		      lda	(player0pointer),y
    604  f166				   .continuelastP0
    605  f166		       85 1b		      sta	GRP0
    606  f168
    607  f168
    608  f168
    609  f168					      ifnconst	no_blank_lines
    610  f168		       a5 90		      lda	missile0height	;3
    611  f16a		       c7 91		      dcp	missile0y	;5
    612  f16c		       e5 f6		      sbc	stack1
    613  f16e		       85 1d		      sta	ENAM0	;3
    614  f170		       4c 13 f1 	      jmp	.endkerloop
    615  f173				  -	      else
    616  f173				  -	      ifconst	readpaddle
    617  f173				  -	      ldy	currentpaddle
    618  f173				  -	      lda	INPT0,y
    619  f173				  -	      bpl	noreadpaddle2
    620  f173				  -	      inc	paddle
    621  f173				  -	      jmp	.endkerloop
    622  f173				  -noreadpaddle2
    623  f173				  -	      sleep	4
    624  f173				  -	      jmp	.endkerloop
    625  f173				  -	      else		; no_blank_lines and no paddle reading
    626  f173				  -	      pla
    627  f173				  -	      pha		; 14 cycles in 4 bytes
    628  f173				  -	      pla
    629  f173				  -	      pha
    630  f173				  -			; sleep 14
    631  f173				  -	      jmp	.endkerloop
    632  f173				  -	      endif
    633  f173					      endif
    634  f173
    635  f173
    636  f173							; ifconst donepaddleskip
    637  f173							;paddleskipread
    638  f173							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f173							; plus we get a lo-res paddle read
    640  f173							; bmi donepaddleskip
    641  f173							; endif
    642  f173
    643  f173				   .skipDrawlastP0
    644  f173		       a9 00		      lda	#0
    645  f175		       a8		      tay
    646  f176		       4c 66 f1 	      jmp	.continuelastP0
    647  f179
    648  f179				  -	      ifconst	no_blank_lines
    649  f179				  -no_blank_lines_bailout
    650  f179				  -	      ldx	#0
    651  f179					      endif
    652  f179
    653  f179				   endkernel
    654  f179							; 6 digit score routine
    655  f179		       86 0e		      stx	PF1
    656  f17b		       86 0f		      stx	PF2
    657  f17d		       86 0d		      stx	PF0
    658  f17f		       18		      clc
    659  f180
    660  f180				  -	      ifconst	pfrowheight
    661  f180				  -	      lda	#pfrowheight+2
    662  f180					      else
    663  f180					      ifnconst	pfres
    664  f180		       a9 0a		      lda	#10
    665  f182				  -	      else
    666  f182				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f182					      endif
    668  f182					      endif
    669  f182
    670  f182		       e5 ef		      sbc	playfieldpos
    671  f184		       85 ef		      sta	playfieldpos
    672  f186		       8a		      txa
    673  f187
    674  f187				  -	      ifconst	shakescreen
    675  f187				  -	      bit	shakescreen
    676  f187				  -	      bmi	noshakescreen2
    677  f187				  -	      ldx	#$3D
    678  f187				  -noshakescreen2
    679  f187					      endif
    680  f187
    681  f187		       95 02		      sta	WSYNC,x
    682  f189
    683  f189							; STA WSYNC ;first one, need one more
    684  f189		       85 0b		      sta	REFP0
    685  f18b		       85 0c		      sta	REFP1
    686  f18d		       85 1b		      STA	GRP0
    687  f18f		       85 1c		      STA	GRP1
    688  f191							; STA PF1
    689  f191							; STA PF2
    690  f191		       85 2b		      sta	HMCLR
    691  f193		       85 1d		      sta	ENAM0
    692  f195		       85 1e		      sta	ENAM1
    693  f197		       85 1f		      sta	ENABL
    694  f199
    695  f199		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19b		       85 85		      sta	player0y
    697  f19d		       a5 9e		      lda	temp3
    698  f19f		       85 86		      sta	player1y
    699  f1a1					      ifnconst	player1colors
    700  f1a1		       a5 a1		      lda	temp6
    701  f1a3		       85 88		      sta	missile1y
    702  f1a5					      endif
    703  f1a5					      ifnconst	playercolors
    704  f1a5					      ifnconst	readpaddle
    705  f1a5		       a5 a0		      lda	temp5
    706  f1a7		       85 91		      sta	missile0y
    707  f1a9					      endif
    708  f1a9					      endif
    709  f1a9		       a5 f7		      lda	stack2
    710  f1ab		       85 89		      sta	bally
    711  f1ad
    712  f1ad							; strangely, this isn't required any more. might have
    713  f1ad							; resulted from the no_blank_lines score bounce fix
    714  f1ad							;ifconst no_blank_lines
    715  f1ad							;sta WSYNC
    716  f1ad							;endif
    717  f1ad
    718  f1ad		       ad 84 02 	      lda	INTIM
    719  f1b0		       18		      clc
    720  f1b1				  -	      ifnconst	vblank_time
    721  f1b1				  -	      adc	#43+12+87
    722  f1b1					      else
    723  f1b1		       69 8e		      adc	#vblank_time+12+87
    724  f1b3
    725  f1b3					      endif
    726  f1b3							; sta WSYNC
    727  f1b3		       8d 96 02 	      sta	TIM64T
    728  f1b6
    729  f1b6					      ifconst	minikernel
    730  f1b6		       20 67 f4 	      jsr	minikernel
    731  f1b9					      endif
    732  f1b9
    733  f1b9							; now reassign temp vars for score pointers
    734  f1b9
    735  f1b9							; score pointers contain:
    736  f1b9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b9							; swap lo2->temp1
    738  f1b9							; swap lo4->temp3
    739  f1b9							; swap lo6->temp5
    740  f1b9					      ifnconst	noscore
    741  f1b9		       a5 97		      lda	scorepointers+1
    742  f1bb							; ldy temp1
    743  f1bb		       85 9c		      sta	temp1
    744  f1bd							; sty scorepointers+1
    745  f1bd
    746  f1bd		       a5 99		      lda	scorepointers+3
    747  f1bf							; ldy temp3
    748  f1bf		       85 9e		      sta	temp3
    749  f1c1							; sty scorepointers+3
    750  f1c1
    751  f1c1
    752  f1c1		       85 2b		      sta	HMCLR
    753  f1c3		       ba		      tsx
    754  f1c4		       86 f6		      stx	stack1
    755  f1c6		       a2 e0		      ldx	#$E0
    756  f1c8		       86 20		      stx	HMP0
    757  f1ca
    758  f1ca		       a5 a3		      LDA	scorecolor
    759  f1cc		       85 06		      STA	COLUP0
    760  f1ce		       85 07		      STA	COLUP1
    761  f1d0					      ifconst	scorefade
    762  f1d0		       85 f7		      STA	stack2
    763  f1d2					      endif
    764  f1d2				  -	      ifconst	pfscore
    765  f1d2				  -	      lda	pfscorecolor
    766  f1d2				  -	      sta	COLUPF
    767  f1d2					      endif
    768  f1d2		       85 02		      sta	WSYNC
    769  f1d4		       a2 00		      ldx	#0
    770  f1d6		       86 1b		      STx	GRP0
    771  f1d8		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1da
    773  f1da		       a5 9b		      lda	scorepointers+5
    774  f1dc							; ldy temp5
    775  f1dc		       95 a0		      sta	temp5,x
    776  f1de							; sty scorepointers+5
    777  f1de		       a9 ff		      lda	#>scoretable
    778  f1e0		       85 97		      sta	scorepointers+1
    779  f1e2		       85 99		      sta	scorepointers+3
    780  f1e4		       85 9b		      sta	scorepointers+5
    781  f1e6		       85 9d		      sta	temp2
    782  f1e8		       85 9f		      sta	temp4
    783  f1ea		       85 a1		      sta	temp6
    784  f1ec		       a0 07		      LDY	#7
    785  f1ee		       84 25		      STY	VDELP0
    786  f1f0		       85 10		      STA	RESP0
    787  f1f2		       85 11		      STA	RESP1
    788  f1f4
    789  f1f4
    790  f1f4		       a9 03		      LDA	#$03
    791  f1f6		       85 04		      STA	NUSIZ0
    792  f1f8		       85 05		      STA	NUSIZ1
    793  f1fa		       85 26		      STA	VDELP1
    794  f1fc		       a9 f0		      LDA	#$F0
    795  f1fe		       85 21		      STA	HMP1
    796  f200		       b1 96		      lda	(scorepointers),y
    797  f202		       85 1b		      sta	GRP0
    798  f204		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f206		       4c 10 f2 	      jmp	beginscore
    800  f209
    801  f209
    802  f209				  -	      if	((<*)>$d4)
    803  f209				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f209					      endif
    805  f209
    806  f209				   loop2
    807  f209		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f20b		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20d				  -	      ifconst	pfscore
    810  f20d				  -	      lda.w	pfscore1
    811  f20d				  -	      sta	PF1
    812  f20d					      else
    813  f20d					      ifconst	scorefade
      0  f20d					      sleep	2
      1  f20d				   .CYCLES    SET	2
      2  f20d
      3  f20d				  -	      IF	.CYCLES < 2
      4  f20d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f20d				  -	      ERR
      6  f20d					      ENDIF
      7  f20d
      8  f20d				  -	      IF	.CYCLES & 1
      9  f20d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f20d				  -	      nop	0
     11  f20d				  -	      ELSE
     12  f20d				  -	      bit	VSYNC
     13  f20d				  -	      ENDIF
     14  f20d				  -.CYCLES    SET	.CYCLES - 3
     15  f20d					      ENDIF
     16  f20d
     17  f20d					      REPEAT	.CYCLES / 2
     18  f20d		       ea		      nop
     19  f20e					      REPEND
    815  f20e		       c6 f7		      dec	stack2	; decrement the temporary scorecolor
    816  f210				  -	      else
    817  f210				  -	      sleep	7
    818  f210					      endif
    819  f210					      endif
    820  f210							; cycle 0
    821  f210				   beginscore
    822  f210		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f212		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f214		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f216		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f218		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21a		       9a		      txs
    828  f21b		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21d					      ifconst	scorefade
    830  f21d		       a5 f7		      lda	stack2
    831  f21f				  -	      else
    832  f21f				  -	      sleep	3
    833  f21f					      endif
    834  f21f
    835  f21f				  -	      ifconst	pfscore
    836  f21f				  -	      lda	pfscore2
    837  f21f				  -	      sta	PF1
    838  f21f					      else
    839  f21f					      ifconst	scorefade
    840  f21f		       85 06		      sta	COLUP0
    841  f221		       85 07		      sta	COLUP1
    842  f223				  -	      else
    843  f223				  -	      sleep	6
    844  f223					      endif
    845  f223					      endif
    846  f223
    847  f223		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f225		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f227		       ba		      tsx
    850  f228		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22a		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f22c		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22e		       88		      dey
    854  f22f		       10 d8		      bpl	loop2	;+2 60 180
    855  f231
    856  f231		       a6 f6		      ldx	stack1
    857  f233		       9a		      txs
    858  f234							; lda scorepointers+1
    859  f234		       a4 9c		      ldy	temp1
    860  f236							; sta temp1
    861  f236		       84 97		      sty	scorepointers+1
    862  f238
    863  f238		       a9 00		      LDA	#0
    864  f23a		       85 0e		      sta	PF1
    865  f23c		       85 1b		      STA	GRP0
    866  f23e		       85 1c		      STA	GRP1
    867  f240		       85 25		      STA	VDELP0
    868  f242		       85 26		      STA	VDELP1	;do we need these
    869  f244		       85 04		      STA	NUSIZ0
    870  f246		       85 05		      STA	NUSIZ1
    871  f248
    872  f248							; lda scorepointers+3
    873  f248		       a4 9e		      ldy	temp3
    874  f24a							; sta temp3
    875  f24a		       84 99		      sty	scorepointers+3
    876  f24c
    877  f24c							; lda scorepointers+5
    878  f24c		       a4 a0		      ldy	temp5
    879  f24e							; sta temp5
    880  f24e		       84 9b		      sty	scorepointers+5
    881  f250					      endif		;noscore
    882  f250				  -	      ifconst	readpaddle
    883  f250				  -	      lda	#%11000010
    884  f250					      else
    885  f250				  -	      ifconst	qtcontroller
    886  f250				  -	      lda	qtcontroller
    887  f250				  -	      lsr		; bit 0 in carry
    888  f250				  -	      lda	#4
    889  f250				  -	      ror		; carry into top of A
    890  f250					      else
    891  f250		       a9 02		      lda	#2
    892  f252					      endif		; qtcontroller
    893  f252					      endif		; readpaddle
    894  f252		       85 02		      sta	WSYNC
    895  f254		       85 01		      sta	VBLANK
      0  f256					      RETURN
      1  f256					      ifnconst	bankswitch
      2  f256		       60		      rts
      3  f257				  -	      else
      4  f257				  -	      jmp	BS_return
      5  f257					      endif
    897  f257				  -	      ifconst	shakescreen
    898  f257				  -doshakescreen
    899  f257				  -	      bit	shakescreen
    900  f257				  -	      bmi	noshakescreen
    901  f257				  -	      sta	WSYNC
    902  f257				  -noshakescreen
    903  f257				  -	      ldx	missile0height
    904  f257				  -	      inx
    905  f257				  -	      rts
    906  f257					      endif
    907  f257
    908  f257							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f257
    910  f257							; playfield drawing routines
    911  f257							; you get a 32x12 bitmapped display in a single color :)
    912  f257							; 0-31 and 0-11
    913  f257
    914  f257				   pfclear		; clears playfield - or fill with pattern
    915  f257				  -	      ifconst	pfres
    916  f257				  -	      ldx	#pfres*pfwidth-1
    917  f257					      else
    918  f257		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f259					      endif
    920  f259				   pfclear_loop
    921  f259					      ifnconst	superchip
    922  f259		       95 a4		      sta	playfield,x
    923  f25b				  -	      else
    924  f25b				  -	      sta	playfield-128,x
    925  f25b					      endif
    926  f25b		       ca		      dex
    927  f25c		       10 fb		      bpl	pfclear_loop
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    929  f25f
    930  f25f				   setuppointers
    931  f25f		       86 9d		      stx	temp2	; store on.off.flip value
    932  f261		       aa		      tax		; put x-value in x 
    933  f262		       4a		      lsr
    934  f263		       4a		      lsr
    935  f264		       4a		      lsr		; divide x pos by 8 
    936  f265		       85 9c		      sta	temp1
    937  f267		       98		      tya
    938  f268		       0a		      asl
    939  f269					      if	pfwidth=4
    940  f269		       0a		      asl		; multiply y pos by 4
    941  f26a					      endif		; else multiply by 2
    942  f26a		       18		      clc
    943  f26b		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26d		       a8		      tay		; put the value in y
    945  f26e		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f270		       60		      rts
    947  f271
    948  f271				   pfread
    949  f271							;x=xvalue, y=yvalue
    950  f271		       20 5f f2 	      jsr	setuppointers
    951  f274		       bd d9 f2 	      lda	setbyte,x
    952  f277		       39 a4 00 	      and	playfield,y
    953  f27a		       5d d9 f2 	      eor	setbyte,x
    954  f27d							; beq readzero
    955  f27d							; lda #1
    956  f27d							; readzero
      0  f27d					      RETURN
      1  f27d					      ifnconst	bankswitch
      2  f27d		       60		      rts
      3  f27e				  -	      else
      4  f27e				  -	      jmp	BS_return
      5  f27e					      endif
    958  f27e
    959  f27e				   pfpixel
    960  f27e							;x=xvalue, y=yvalue, a=0,1,2
    961  f27e		       20 5f f2 	      jsr	setuppointers
    962  f281
    963  f281				  -	      ifconst	bankswitch
    964  f281				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f281				  -	      beq	pixelon_r	; if "on" go to on
    966  f281				  -	      lsr
    967  f281				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f281				  -	      lda	playfield,y	; if here, it's "flip"
    969  f281				  -	      eor	setbyte,x
    970  f281				  -	      ifconst	superchip
    971  f281				  -	      sta	playfield-128,y
    972  f281				  -	      else
    973  f281				  -	      sta	playfield,y
    974  f281				  -	      endif
    975  f281				  -	      RETURN
    976  f281				  -pixelon_r
    977  f281				  -	      lda	playfield,y
    978  f281				  -	      ora	setbyte,x
    979  f281				  -	      ifconst	superchip
    980  f281				  -	      sta	playfield-128,y
    981  f281				  -	      else
    982  f281				  -	      sta	playfield,y
    983  f281				  -	      endif
    984  f281				  -	      RETURN
    985  f281				  -pixeloff_r
    986  f281				  -	      lda	setbyte,x
    987  f281				  -	      eor	#$ff
    988  f281				  -	      and	playfield,y
    989  f281				  -	      ifconst	superchip
    990  f281				  -	      sta	playfield-128,y
    991  f281				  -	      else
    992  f281				  -	      sta	playfield,y
    993  f281				  -	      endif
    994  f281				  -	      RETURN
    995  f281				  -
    996  f281					      else
    997  f281		       4c b2 f2 	      jmp	plotpoint
    998  f284					      endif
    999  f284
   1000  f284				   pfhline
   1001  f284							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f284		       20 5f f2 	      jsr	setuppointers
   1003  f287		       4c 91 f2 	      jmp	noinc
   1004  f28a				   keepgoing
   1005  f28a		       e8		      inx
   1006  f28b		       8a		      txa
   1007  f28c		       29 07		      and	#7
   1008  f28e		       d0 01		      bne	noinc
   1009  f290		       c8		      iny
   1010  f291				   noinc
   1011  f291		       20 b2 f2 	      jsr	plotpoint
   1012  f294		       e4 9e		      cpx	temp3
   1013  f296		       30 f2		      bmi	keepgoing
      0  f298					      RETURN
      1  f298					      ifnconst	bankswitch
      2  f298		       60		      rts
      3  f299				  -	      else
      4  f299				  -	      jmp	BS_return
      5  f299					      endif
   1015  f299
   1016  f299				   pfvline
   1017  f299							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f299		       20 5f f2 	      jsr	setuppointers
   1019  f29c		       84 9c		      sty	temp1	; store memory location offset
   1020  f29e		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a0		       a5 9e		      lda	temp3
   1022  f2a2		       0a		      asl
   1023  f2a3					      if	pfwidth=4
   1024  f2a3		       0a		      asl		; multiply by 4
   1025  f2a4					      endif		; else multiply by 2
   1026  f2a4		       85 9e		      sta	temp3	; store it
   1027  f2a6							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a6							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a6							; x should equal original x value
   1030  f2a6				   keepgoingy
   1031  f2a6		       20 b2 f2 	      jsr	plotpoint
   1032  f2a9		       c8		      iny
   1033  f2aa		       c8		      iny
   1034  f2ab					      if	pfwidth=4
   1035  f2ab		       c8		      iny
   1036  f2ac		       c8		      iny
   1037  f2ad					      endif
   1038  f2ad		       c4 9e		      cpy	temp3
   1039  f2af		       30 f5		      bmi	keepgoingy
      0  f2b1					      RETURN
      1  f2b1					      ifnconst	bankswitch
      2  f2b1		       60		      rts
      3  f2b2				  -	      else
      4  f2b2				  -	      jmp	BS_return
      5  f2b2					      endif
   1041  f2b2
   1042  f2b2				   plotpoint
   1043  f2b2		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b4		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b6		       4a		      lsr
   1046  f2b7		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b9		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2bc		       5d d9 f2 	      eor	setbyte,x
   1049  f2bf				  -	      ifconst	superchip
   1050  f2bf				  -	      sta	playfield-128,y
   1051  f2bf					      else
   1052  f2bf		       99 a4 00 	      sta	playfield,y
   1053  f2c2					      endif
   1054  f2c2		       60		      rts
   1055  f2c3				   pixelon
   1056  f2c3		       b9 a4 00 	      lda	playfield,y
   1057  f2c6		       1d d9 f2 	      ora	setbyte,x
   1058  f2c9				  -	      ifconst	superchip
   1059  f2c9				  -	      sta	playfield-128,y
   1060  f2c9					      else
   1061  f2c9		       99 a4 00 	      sta	playfield,y
   1062  f2cc					      endif
   1063  f2cc		       60		      rts
   1064  f2cd				   pixeloff
   1065  f2cd		       bd d9 f2 	      lda	setbyte,x
   1066  f2d0		       49 ff		      eor	#$ff
   1067  f2d2		       39 a4 00 	      and	playfield,y
   1068  f2d5				  -	      ifconst	superchip
   1069  f2d5				  -	      sta	playfield-128,y
   1070  f2d5					      else
   1071  f2d5		       99 a4 00 	      sta	playfield,y
   1072  f2d8					      endif
   1073  f2d8		       60		      rts
   1074  f2d9
   1075  f2d9				   setbyte
   1076  f2d9					      ifnconst	pfcenter
   1077  f2d9		       80		      .byte.b	$80
   1078  f2da		       40		      .byte.b	$40
   1079  f2db		       20		      .byte.b	$20
   1080  f2dc		       10		      .byte.b	$10
   1081  f2dd		       08		      .byte.b	$08
   1082  f2de		       04		      .byte.b	$04
   1083  f2df		       02		      .byte.b	$02
   1084  f2e0		       01		      .byte.b	$01
   1085  f2e1					      endif
   1086  f2e1		       01		      .byte.b	$01
   1087  f2e2		       02		      .byte.b	$02
   1088  f2e3		       04		      .byte.b	$04
   1089  f2e4		       08		      .byte.b	$08
   1090  f2e5		       10		      .byte.b	$10
   1091  f2e6		       20		      .byte.b	$20
   1092  f2e7		       40		      .byte.b	$40
   1093  f2e8		       80		      .byte.b	$80
   1094  f2e9		       80		      .byte.b	$80
   1095  f2ea		       40		      .byte.b	$40
   1096  f2eb		       20		      .byte.b	$20
   1097  f2ec		       10		      .byte.b	$10
   1098  f2ed		       08		      .byte.b	$08
   1099  f2ee		       04		      .byte.b	$04
   1100  f2ef		       02		      .byte.b	$02
   1101  f2f0		       01		      .byte.b	$01
   1102  f2f1		       01		      .byte.b	$01
   1103  f2f2		       02		      .byte.b	$02
   1104  f2f3		       04		      .byte.b	$04
   1105  f2f4		       08		      .byte.b	$08
   1106  f2f5		       10		      .byte.b	$10
   1107  f2f6		       20		      .byte.b	$20
   1108  f2f7		       40		      .byte.b	$40
   1109  f2f8		       80		      .byte.b	$80
   1110  f2f9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f9
   1112  f2f9				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f9		       d0 13		      bne	notleft
   1114  f2fb							;left
   1115  f2fb				  -	      ifconst	pfres
   1116  f2fb				  -	      ldx	#pfres*4
   1117  f2fb					      else
   1118  f2fb		       a2 30		      ldx	#48
   1119  f2fd					      endif
   1120  f2fd				   leftloop
   1121  f2fd		       b5 a3		      lda	playfield-1,x
   1122  f2ff		       4a		      lsr
   1123  f300
   1124  f300				  -	      ifconst	superchip
   1125  f300				  -	      lda	playfield-2,x
   1126  f300				  -	      rol
   1127  f300				  -	      sta	playfield-130,x
   1128  f300				  -	      lda	playfield-3,x
   1129  f300				  -	      ror
   1130  f300				  -	      sta	playfield-131,x
   1131  f300				  -	      lda	playfield-4,x
   1132  f300				  -	      rol
   1133  f300				  -	      sta	playfield-132,x
   1134  f300				  -	      lda	playfield-1,x
   1135  f300				  -	      ror
   1136  f300				  -	      sta	playfield-129,x
   1137  f300					      else
   1138  f300		       36 a2		      rol	playfield-2,x
   1139  f302		       76 a1		      ror	playfield-3,x
   1140  f304		       36 a0		      rol	playfield-4,x
   1141  f306		       76 a3		      ror	playfield-1,x
   1142  f308					      endif
   1143  f308
   1144  f308		       8a		      txa
   1145  f309		       cb 04		      sbx	#4
   1146  f30b		       d0 f0		      bne	leftloop
      0  f30d					      RETURN
      1  f30d					      ifnconst	bankswitch
      2  f30d		       60		      rts
      3  f30e				  -	      else
      4  f30e				  -	      jmp	BS_return
      5  f30e					      endif
   1148  f30e
   1149  f30e				   notleft
   1150  f30e		       4a		      lsr
   1151  f30f		       90 13		      bcc	notright
   1152  f311							;right
   1153  f311
   1154  f311				  -	      ifconst	pfres
   1155  f311				  -	      ldx	#pfres*4
   1156  f311					      else
   1157  f311		       a2 30		      ldx	#48
   1158  f313					      endif
   1159  f313				   rightloop
   1160  f313		       b5 a0		      lda	playfield-4,x
   1161  f315		       4a		      lsr
   1162  f316				  -	      ifconst	superchip
   1163  f316				  -	      lda	playfield-3,x
   1164  f316				  -	      rol
   1165  f316				  -	      sta	playfield-131,x
   1166  f316				  -	      lda	playfield-2,x
   1167  f316				  -	      ror
   1168  f316				  -	      sta	playfield-130,x
   1169  f316				  -	      lda	playfield-1,x
   1170  f316				  -	      rol
   1171  f316				  -	      sta	playfield-129,x
   1172  f316				  -	      lda	playfield-4,x
   1173  f316				  -	      ror
   1174  f316				  -	      sta	playfield-132,x
   1175  f316					      else
   1176  f316		       36 a1		      rol	playfield-3,x
   1177  f318		       76 a2		      ror	playfield-2,x
   1178  f31a		       36 a3		      rol	playfield-1,x
   1179  f31c		       76 a0		      ror	playfield-4,x
   1180  f31e					      endif
   1181  f31e		       8a		      txa
   1182  f31f		       cb 04		      sbx	#4
   1183  f321		       d0 f0		      bne	rightloop
      0  f323					      RETURN
      1  f323					      ifnconst	bankswitch
      2  f323		       60		      rts
      3  f324				  -	      else
      4  f324				  -	      jmp	BS_return
      5  f324					      endif
   1185  f324
   1186  f324				   notright
   1187  f324		       4a		      lsr
   1188  f325		       90 49		      bcc	notup
   1189  f327							;up
   1190  f327		       4a		      lsr
   1191  f328		       90 02		      bcc	onedecup
   1192  f32a		       c6 ef		      dec	playfieldpos
   1193  f32c				   onedecup
   1194  f32c		       c6 ef		      dec	playfieldpos
   1195  f32e		       f0 02		      beq	shiftdown
   1196  f330		       10 3d		      bpl	noshiftdown2
   1197  f332				   shiftdown
   1198  f332				  -	      ifconst	pfrowheight
   1199  f332				  -	      lda	#pfrowheight
   1200  f332					      else
   1201  f332					      ifnconst	pfres
   1202  f332		       a9 08		      lda	#8
   1203  f334				  -	      else
   1204  f334				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f334					      endif
   1206  f334					      endif
   1207  f334
   1208  f334		       85 ef		      sta	playfieldpos
   1209  f336		       a5 a7		      lda	playfield+3
   1210  f338		       85 9f		      sta	temp4
   1211  f33a		       a5 a6		      lda	playfield+2
   1212  f33c		       85 9e		      sta	temp3
   1213  f33e		       a5 a5		      lda	playfield+1
   1214  f340		       85 9d		      sta	temp2
   1215  f342		       a5 a4		      lda	playfield
   1216  f344		       85 9c		      sta	temp1
   1217  f346		       a2 00		      ldx	#0
   1218  f348				   up2
   1219  f348		       b5 a8		      lda	playfield+4,x
   1220  f34a				  -	      ifconst	superchip
   1221  f34a				  -	      sta	playfield-128,x
   1222  f34a				  -	      lda	playfield+5,x
   1223  f34a				  -	      sta	playfield-127,x
   1224  f34a				  -	      lda	playfield+6,x
   1225  f34a				  -	      sta	playfield-126,x
   1226  f34a				  -	      lda	playfield+7,x
   1227  f34a				  -	      sta	playfield-125,x
   1228  f34a					      else
   1229  f34a		       95 a4		      sta	playfield,x
   1230  f34c		       b5 a9		      lda	playfield+5,x
   1231  f34e		       95 a5		      sta	playfield+1,x
   1232  f350		       b5 aa		      lda	playfield+6,x
   1233  f352		       95 a6		      sta	playfield+2,x
   1234  f354		       b5 ab		      lda	playfield+7,x
   1235  f356		       95 a7		      sta	playfield+3,x
   1236  f358					      endif
   1237  f358		       8a		      txa
   1238  f359		       cb fc		      sbx	#252
   1239  f35b				  -	      ifconst	pfres
   1240  f35b				  -	      cpx	#(pfres-1)*4
   1241  f35b					      else
   1242  f35b		       e0 2c		      cpx	#44
   1243  f35d					      endif
   1244  f35d		       d0 e9		      bne	up2
   1245  f35f
   1246  f35f		       a5 9f		      lda	temp4
   1247  f361
   1248  f361				  -	      ifconst	superchip
   1249  f361				  -	      ifconst	pfres
   1250  f361				  -	      sta	playfield+pfres*4-129
   1251  f361				  -	      lda	temp3
   1252  f361				  -	      sta	playfield+pfres*4-130
   1253  f361				  -	      lda	temp2
   1254  f361				  -	      sta	playfield+pfres*4-131
   1255  f361				  -	      lda	temp1
   1256  f361				  -	      sta	playfield+pfres*4-132
   1257  f361				  -	      else
   1258  f361				  -	      sta	playfield+47-128
   1259  f361				  -	      lda	temp3
   1260  f361				  -	      sta	playfield+46-128
   1261  f361				  -	      lda	temp2
   1262  f361				  -	      sta	playfield+45-128
   1263  f361				  -	      lda	temp1
   1264  f361				  -	      sta	playfield+44-128
   1265  f361				  -	      endif
   1266  f361					      else
   1267  f361				  -	      ifconst	pfres
   1268  f361				  -	      sta	playfield+pfres*4-1
   1269  f361				  -	      lda	temp3
   1270  f361				  -	      sta	playfield+pfres*4-2
   1271  f361				  -	      lda	temp2
   1272  f361				  -	      sta	playfield+pfres*4-3
   1273  f361				  -	      lda	temp1
   1274  f361				  -	      sta	playfield+pfres*4-4
   1275  f361					      else
   1276  f361		       85 d3		      sta	playfield+47
   1277  f363		       a5 9e		      lda	temp3
   1278  f365		       85 d2		      sta	playfield+46
   1279  f367		       a5 9d		      lda	temp2
   1280  f369		       85 d1		      sta	playfield+45
   1281  f36b		       a5 9c		      lda	temp1
   1282  f36d		       85 d0		      sta	playfield+44
   1283  f36f					      endif
   1284  f36f					      endif
   1285  f36f				   noshiftdown2
      0  f36f					      RETURN
      1  f36f					      ifnconst	bankswitch
      2  f36f		       60		      rts
      3  f370				  -	      else
      4  f370				  -	      jmp	BS_return
      5  f370					      endif
   1287  f370
   1288  f370
   1289  f370				   notup
   1290  f370							;down
   1291  f370		       4a		      lsr
   1292  f371		       b0 02		      bcs	oneincup
   1293  f373		       e6 ef		      inc	playfieldpos
   1294  f375				   oneincup
   1295  f375		       e6 ef		      inc	playfieldpos
   1296  f377		       a5 ef		      lda	playfieldpos
   1297  f379
   1298  f379				  -	      ifconst	pfrowheight
   1299  f379				  -	      cmp	#pfrowheight+1
   1300  f379					      else
   1301  f379					      ifnconst	pfres
   1302  f379		       c9 09		      cmp	#9
   1303  f37b				  -	      else
   1304  f37b				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37b					      endif
   1306  f37b					      endif
   1307  f37b
   1308  f37b		       90 3b		      bcc	noshiftdown
   1309  f37d		       a9 01		      lda	#1
   1310  f37f		       85 ef		      sta	playfieldpos
   1311  f381
   1312  f381				  -	      ifconst	pfres
   1313  f381				  -	      lda	playfield+pfres*4-1
   1314  f381				  -	      sta	temp4
   1315  f381				  -	      lda	playfield+pfres*4-2
   1316  f381				  -	      sta	temp3
   1317  f381				  -	      lda	playfield+pfres*4-3
   1318  f381				  -	      sta	temp2
   1319  f381				  -	      lda	playfield+pfres*4-4
   1320  f381					      else
   1321  f381		       a5 d3		      lda	playfield+47
   1322  f383		       85 9f		      sta	temp4
   1323  f385		       a5 d2		      lda	playfield+46
   1324  f387		       85 9e		      sta	temp3
   1325  f389		       a5 d1		      lda	playfield+45
   1326  f38b		       85 9d		      sta	temp2
   1327  f38d		       a5 d0		      lda	playfield+44
   1328  f38f					      endif
   1329  f38f
   1330  f38f		       85 9c		      sta	temp1
   1331  f391
   1332  f391				  -	      ifconst	pfres
   1333  f391				  -	      ldx	#(pfres-1)*4
   1334  f391					      else
   1335  f391		       a2 2c		      ldx	#44
   1336  f393					      endif
   1337  f393				   down2
   1338  f393		       b5 a3		      lda	playfield-1,x
   1339  f395				  -	      ifconst	superchip
   1340  f395				  -	      sta	playfield-125,x
   1341  f395				  -	      lda	playfield-2,x
   1342  f395				  -	      sta	playfield-126,x
   1343  f395				  -	      lda	playfield-3,x
   1344  f395				  -	      sta	playfield-127,x
   1345  f395				  -	      lda	playfield-4,x
   1346  f395				  -	      sta	playfield-128,x
   1347  f395					      else
   1348  f395		       95 a7		      sta	playfield+3,x
   1349  f397		       b5 a2		      lda	playfield-2,x
   1350  f399		       95 a6		      sta	playfield+2,x
   1351  f39b		       b5 a1		      lda	playfield-3,x
   1352  f39d		       95 a5		      sta	playfield+1,x
   1353  f39f		       b5 a0		      lda	playfield-4,x
   1354  f3a1		       95 a4		      sta	playfield,x
   1355  f3a3					      endif
   1356  f3a3		       8a		      txa
   1357  f3a4		       cb 04		      sbx	#4
   1358  f3a6		       d0 eb		      bne	down2
   1359  f3a8
   1360  f3a8		       a5 9f		      lda	temp4
   1361  f3aa				  -	      ifconst	superchip
   1362  f3aa				  -	      sta	playfield-125
   1363  f3aa				  -	      lda	temp3
   1364  f3aa				  -	      sta	playfield-126
   1365  f3aa				  -	      lda	temp2
   1366  f3aa				  -	      sta	playfield-127
   1367  f3aa				  -	      lda	temp1
   1368  f3aa				  -	      sta	playfield-128
   1369  f3aa					      else
   1370  f3aa		       85 a7		      sta	playfield+3
   1371  f3ac		       a5 9e		      lda	temp3
   1372  f3ae		       85 a6		      sta	playfield+2
   1373  f3b0		       a5 9d		      lda	temp2
   1374  f3b2		       85 a5		      sta	playfield+1
   1375  f3b4		       a5 9c		      lda	temp1
   1376  f3b6		       85 a4		      sta	playfield
   1377  f3b8					      endif
   1378  f3b8				   noshiftdown
      0  f3b8					      RETURN
      1  f3b8					      ifnconst	bankswitch
      2  f3b8		       60		      rts
      3  f3b9				  -	      else
      4  f3b9				  -	      jmp	BS_return
      5  f3b9					      endif
   1380  f3b9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b9
   1382  f3b9							;standard routines needed for pretty much all games
   1383  f3b9							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b9							; repositioning code and score pointer setup moved to overscan
   1385  f3b9							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b9
   1387  f3b9				   randomize
   1388  f3b9		       a5 a2		      lda	rand
   1389  f3bb		       4a		      lsr
   1390  f3bc					      ifconst	rand16
   1391  f3bc		       26 e5		      rol	rand16
   1392  f3be					      endif
   1393  f3be		       90 02		      bcc	noeor
   1394  f3c0		       49 b4		      eor	#$B4
   1395  f3c2				   noeor
   1396  f3c2		       85 a2		      sta	rand
   1397  f3c4					      ifconst	rand16
   1398  f3c4		       45 e5		      eor	rand16
   1399  f3c6					      endif
      0  f3c6					      RETURN
      1  f3c6					      ifnconst	bankswitch
      2  f3c6		       60		      rts
      3  f3c7				  -	      else
      4  f3c7				  -	      jmp	BS_return
      5  f3c7					      endif
   1401  f3c7							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c7
   1403  f3c7				   drawscreen
   1404  f3c7				  -	      ifconst	debugscore
   1405  f3c7				  -	      ldx	#14
   1406  f3c7				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c7				  -
   1408  f3c7				  -	      ifconst	mincycles
   1409  f3c7				  -	      lda	mincycles
   1410  f3c7				  -	      cmp	INTIM
   1411  f3c7				  -	      lda	mincycles
   1412  f3c7				  -	      bcc	nochange
   1413  f3c7				  -	      lda	INTIM
   1414  f3c7				  -	      sta	mincycles
   1415  f3c7				  -nochange
   1416  f3c7				  -	      endif
   1417  f3c7				  -
   1418  f3c7				  -			; cmp #$2B
   1419  f3c7				  -			; bcs no_cycles_left
   1420  f3c7				  -	      bmi	cycles_left
   1421  f3c7				  -	      ldx	#64
   1422  f3c7				  -	      eor	#$ff	;make negative
   1423  f3c7				  -cycles_left
   1424  f3c7				  -	      stx	scorecolor
   1425  f3c7				  -	      and	#$7f	; clear sign bit
   1426  f3c7				  -	      tax
   1427  f3c7				  -	      lda	scorebcd,x
   1428  f3c7				  -	      sta	score+2
   1429  f3c7				  -	      lda	scorebcd1,x
   1430  f3c7				  -	      sta	score+1
   1431  f3c7				  -	      jmp	done_debugscore
   1432  f3c7				  -scorebcd
   1433  f3c7				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c7				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c7				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c7				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c7				  -scorebcd1
   1438  f3c7				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c7				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c7				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c7				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c7				  -done_debugscore
   1443  f3c7					      endif
   1444  f3c7
   1445  f3c7				  -	      ifconst	debugcycles
   1446  f3c7				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c7				  -			; cmp #$2B
   1448  f3c7				  -			; BCC overscan
   1449  f3c7				  -	      bmi	overscan
   1450  f3c7				  -	      sta	COLUBK
   1451  f3c7				  -	      bcs	doneoverscan
   1452  f3c7					      endif
   1453  f3c7
   1454  f3c7				   overscan
   1455  f3c7				  -	      ifconst	interlaced
   1456  f3c7				  -	      PHP
   1457  f3c7				  -	      PLA
   1458  f3c7				  -	      EOR	#4	; flip interrupt bit
   1459  f3c7				  -	      PHA
   1460  f3c7				  -	      PLP
   1461  f3c7				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c7				  -	      TAX		; save it for later
   1463  f3c7					      endif
   1464  f3c7
   1465  f3c7				   overscanloop
   1466  f3c7		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ca		       30 fb		      bmi	overscanloop
   1468  f3cc				   doneoverscan
   1469  f3cc
   1470  f3cc							;do VSYNC
   1471  f3cc
   1472  f3cc				  -	      ifconst	interlaced
   1473  f3cc				  -	      CPX	#4
   1474  f3cc				  -	      BNE	oddframevsync
   1475  f3cc					      endif
   1476  f3cc
   1477  f3cc		       a9 02		      lda	#2
   1478  f3ce		       85 02		      sta	WSYNC
   1479  f3d0		       85 00		      sta	VSYNC
   1480  f3d2		       85 02		      STA	WSYNC
   1481  f3d4		       85 02		      STA	WSYNC
   1482  f3d6		       4a		      lsr
   1483  f3d7		       85 02		      STA	WSYNC
   1484  f3d9		       85 00		      STA	VSYNC
   1485  f3db		       85 01		      sta	VBLANK
   1486  f3dd				  -	      ifnconst	overscan_time
   1487  f3dd				  -	      lda	#37+128
   1488  f3dd					      else
   1489  f3dd		       a9 a5		      lda	#overscan_time+128
   1490  f3df					      endif
   1491  f3df		       8d 96 02 	      sta	TIM64T
   1492  f3e2
   1493  f3e2				  -	      ifconst	interlaced
   1494  f3e2				  -	      jmp	postsync
   1495  f3e2				  -
   1496  f3e2				  -oddframevsync
   1497  f3e2				  -	      sta	WSYNC
   1498  f3e2				  -
   1499  f3e2				  -	      LDA	($80,X)	; 11 waste
   1500  f3e2				  -	      LDA	($80,X)	; 11 waste
   1501  f3e2				  -	      LDA	($80,X)	; 11 waste
   1502  f3e2				  -
   1503  f3e2				  -	      lda	#2
   1504  f3e2				  -	      sta	VSYNC
   1505  f3e2				  -	      sta	WSYNC
   1506  f3e2				  -	      sta	WSYNC
   1507  f3e2				  -	      sta	WSYNC
   1508  f3e2				  -
   1509  f3e2				  -	      LDA	($80,X)	; 11 waste
   1510  f3e2				  -	      LDA	($80,X)	; 11 waste
   1511  f3e2				  -	      LDA	($80,X)	; 11 waste
   1512  f3e2				  -
   1513  f3e2				  -	      lda	#0
   1514  f3e2				  -	      sta	VSYNC
   1515  f3e2				  -	      sta	VBLANK
   1516  f3e2				  -	      ifnconst	overscan_time
   1517  f3e2				  -	      lda	#37+128
   1518  f3e2				  -	      else
   1519  f3e2				  -	      lda	#overscan_time+128
   1520  f3e2				  -	      endif
   1521  f3e2				  -	      sta	TIM64T
   1522  f3e2				  -
   1523  f3e2				  -postsync
   1524  f3e2					      endif
   1525  f3e2
   1526  f3e2				  -	      ifconst	legacy
   1527  f3e2				  -	      if	legacy < 100
   1528  f3e2				  -	      ldx	#4
   1529  f3e2				  -adjustloop
   1530  f3e2				  -	      lda	player0x,x
   1531  f3e2				  -	      sec
   1532  f3e2				  -	      sbc	#14	;?
   1533  f3e2				  -	      sta	player0x,x
   1534  f3e2				  -	      dex
   1535  f3e2				  -	      bpl	adjustloop
   1536  f3e2				  -	      endif
   1537  f3e2					      endif
   1538  f3e2				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e2				  -	      repeat	($fa-(<*))
   1540  f3e2				  -	      nop
   1541  f3e2				  -	      repend
   1542  f3e2					      endif
   1543  f3e2		       85 02		      sta	WSYNC
   1544  f3e4		       a2 04		      ldx	#4
      0  f3e6					      SLEEP	3
      1  f3e6				   .CYCLES    SET	3
      2  f3e6
      3  f3e6				  -	      IF	.CYCLES < 2
      4  f3e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e6				  -	      ERR
      6  f3e6					      ENDIF
      7  f3e6
      8  f3e6					      IF	.CYCLES & 1
      9  f3e6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e6		       04 00		      nop	0
     11  f3e8				  -	      ELSE
     12  f3e8				  -	      bit	VSYNC
     13  f3e8					      ENDIF
     14  f3e8				   .CYCLES    SET	.CYCLES - 3
     15  f3e8					      ENDIF
     16  f3e8
     17  f3e8				  -	      REPEAT	.CYCLES / 2
     18  f3e8				  -	      nop
     19  f3e8					      REPEND
   1546  f3e8				   HorPosLoop		; 5
   1547  f3e8		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ea		       38		      sec		;+2 11
   1549  f3eb				   DivideLoop
   1550  f3eb		       e9 0f		      sbc	#15
   1551  f3ed		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3ef		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f1		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f3		       85 02		      sta	WSYNC
   1555  f3f5		       ca		      dex
   1556  f3f6		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f8							; 4
   1558  f3f8
   1559  f3f8		       a2 04		      ldx	#4
   1560  f3fa		       b4 9c		      ldy	temp1,X
   1561  f3fc		       b9 58 f3 	      lda	repostable-256,Y
   1562  f3ff		       95 20		      sta	HMP0,X	;+14 18
   1563  f401
   1564  f401		       ca		      dex
   1565  f402		       b4 9c		      ldy	temp1,X
   1566  f404		       b9 58 f3 	      lda	repostable-256,Y
   1567  f407		       95 20		      sta	HMP0,X	;+14 32
   1568  f409
   1569  f409		       ca		      dex
   1570  f40a		       b4 9c		      ldy	temp1,X
   1571  f40c		       b9 58 f3 	      lda	repostable-256,Y
   1572  f40f		       95 20		      sta	HMP0,X	;+14 46
   1573  f411
   1574  f411		       ca		      dex
   1575  f412		       b4 9c		      ldy	temp1,X
   1576  f414		       b9 58 f3 	      lda	repostable-256,Y
   1577  f417		       95 20		      sta	HMP0,X	;+14 60
   1578  f419
   1579  f419		       ca		      dex
   1580  f41a		       b4 9c		      ldy	temp1,X
   1581  f41c		       b9 58 f3 	      lda	repostable-256,Y
   1582  f41f		       95 20		      sta	HMP0,X	;+14 74
   1583  f421
   1584  f421		       85 02		      sta	WSYNC
   1585  f423
   1586  f423		       85 2a		      sta	HMOVE	;+3 3
   1587  f425
   1588  f425
   1589  f425				  -	      ifconst	legacy
   1590  f425				  -	      if	legacy < 100
   1591  f425				  -	      ldx	#4
   1592  f425				  -adjustloop2
   1593  f425				  -	      lda	player0x,x
   1594  f425				  -	      clc
   1595  f425				  -	      adc	#14	;?
   1596  f425				  -	      sta	player0x,x
   1597  f425				  -	      dex
   1598  f425				  -	      bpl	adjustloop2
   1599  f425				  -	      endif
   1600  f425					      endif
   1601  f425
   1602  f425
   1603  f425
   1604  f425
   1605  f425							;set score pointers
   1606  f425		       a7 95		      lax	score+2
   1607  f427		       20 58 f4 	      jsr	scorepointerset
   1608  f42a		       84 9b		      sty	scorepointers+5
   1609  f42c		       86 98		      stx	scorepointers+2
   1610  f42e		       a7 94		      lax	score+1
   1611  f430		       20 58 f4 	      jsr	scorepointerset
   1612  f433		       84 9a		      sty	scorepointers+4
   1613  f435		       86 97		      stx	scorepointers+1
   1614  f437		       a7 93		      lax	score
   1615  f439		       20 58 f4 	      jsr	scorepointerset
   1616  f43c		       84 99		      sty	scorepointers+3
   1617  f43e		       86 96		      stx	scorepointers
   1618  f440
   1619  f440				   vblk
   1620  f440							; run possible vblank bB code
   1621  f440				  -	      ifconst	vblank_bB_code
   1622  f440				  -	      jsr	vblank_bB_code
   1623  f440					      endif
   1624  f440				   vblk2
   1625  f440		       ad 84 02 	      LDA	INTIM
   1626  f443		       30 fb		      bmi	vblk2
   1627  f445		       4c 34 f0 	      jmp	kernel
   1628  f448
   1629  f448
   1630  f448		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f451		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f458				   repostable
   1633  f458
   1634  f458				   scorepointerset
   1635  f458		       29 0f		      and	#$0F
   1636  f45a		       0a		      asl
   1637  f45b		       0a		      asl
   1638  f45c		       0a		      asl
   1639  f45d		       69 9c		      adc	#<scoretable
   1640  f45f		       a8		      tay
   1641  f460		       8a		      txa
   1642  f461							; and #$F0
   1643  f461							; lsr
   1644  f461		       4b f0		      asr	#$F0
   1645  f463		       69 9c		      adc	#<scoretable
   1646  f465		       aa		      tax
   1647  f466		       60		      rts
   1648  f467							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1649  f467
   1650  f467				   minikernel		; display up to 6 lives on screen
   1651  f467		       85 02		      sta	WSYNC
   1652  f469		       a2 20		      ldx	#$20
   1653  f46b		       86 21		      stx	HMP1
   1654  f46d		       86 25		      stx	VDELP0
   1655  f46f		       a5 f3		      lda	lives
   1656  f471		       4a		      lsr
   1657  f472		       4a		      lsr
   1658  f473		       4a		      lsr
   1659  f474		       4a		      lsr
   1660  f475		       4a		      lsr
   1661  f476		       85 10		      sta	RESP0
   1662  f478		       85 11		      sta	RESP1
   1663  f47a		       86 26		      stx	VDELP1
   1664  f47c		       aa		      tax
   1665  f47d		       bd 17 f5 	      lda	lifenusiz0table,x
   1666  f480		       85 04		      sta	NUSIZ0
   1667  f482		       bd 16 f5 	      lda	lifenusiz1table,x
   1668  f485		       85 05		      sta	NUSIZ1
   1669  f487		       a5 f4		      lda	lifecolor
   1670  f489		       85 06		      sta	COLUP0
   1671  f48b		       85 07		      sta	COLUP1
   1672  f48d		       a9 10		      lda	#$10
   1673  f48f		       85 20		      sta	HMP0
   1674  f491
   1675  f491		       a5 f5		      lda	statusbarlength
   1676  f493		       4a		      lsr
   1677  f494		       4a		      lsr
   1678  f495		       4a		      lsr		; 0-31
   1679  f496							; 3 cases: 0-7, 8-15, 16-24
   1680  f496							; if 0-7, temp1=val, temp2=0, temp3=0
   1681  f496							; if 8-15, temp1=255, temp2=val (rev), temp3=0
   1682  f496							; if 16-23, temp1=255, temp2=255, temp3=val
   1683  f496		       a8		      tay
   1684  f497
   1685  f497		       85 2a		      sta	HMOVE	;cycle 74?
   1686  f499
   1687  f499					      ifconst	statusbarcolor
   1688  f499							; only write COLUPF if color variable exists, otherwise use existing PF color
   1689  f499		       a5 e6		      lda	statusbarcolor
   1690  f49b		       85 08		      sta	COLUPF
   1691  f49d					      endif
   1692  f49d
   1693  f49d		       c0 08		      cpy	#8
   1694  f49f		       90 17		      bcc	zero_7
   1695  f4a1		       c0 10		      cpy	#16
   1696  f4a3		       90 23		      bcc	eight_15
   1697  f4a5		       a9 ff		      lda	#255
   1698  f4a7		       85 9c		      sta	temp1
   1699  f4a9		       85 9d		      sta	temp2
   1700  f4ab		       b9 0f f5 	      lda	statustable-16,y
   1701  f4ae		       85 9e		      sta	temp3
   1702  f4b0		       b9 1f f5 	      lda	statustable,y
   1703  f4b3		       85 9f		      sta	temp4
   1704  f4b5		       4c d7 f4 	      jmp	startlifedisplay
   1705  f4b8
   1706  f4b8				   zero_7
   1707  f4b8		       a9 00		      lda	#0
   1708  f4ba		       85 9f		      sta	temp4
   1709  f4bc		       85 9e		      sta	temp3
   1710  f4be		       85 9d		      sta	temp2
   1711  f4c0		       b9 1f f5 	      lda	statustable,y
   1712  f4c3		       85 9c		      sta	temp1
   1713  f4c5		       4c d7 f4 	      jmp	startlifedisplay
   1714  f4c8				   eight_15
   1715  f4c8		       a9 ff		      lda	#255
   1716  f4ca		       85 9c		      sta	temp1
   1717  f4cc		       a9 00		      lda	#0
   1718  f4ce		       85 9f		      sta	temp4
   1719  f4d0		       85 9e		      sta	temp3
   1720  f4d2		       b9 2f f5 	      lda	statustable+16,y
   1721  f4d5		       85 9d		      sta	temp2
   1722  f4d7				   startlifedisplay
   1723  f4d7		       a0 07		      ldy	#7
   1724  f4d9				   lifeloop
   1725  f4d9		       85 02		      sta	WSYNC
   1726  f4db		       86 0d		      stx	PF0
   1727  f4dd		       b1 f2		      lda	(lifepointer),y
   1728  f4df		       e0 00		      cpx	#0
   1729  f4e1		       d0 01		      bne	onelife
   1730  f4e3		       0c		      .byte.b	$0C
   1731  f4e4				   onelife
   1732  f4e4		       85 1b		      sta	GRP0
   1733  f4e6
   1734  f4e6		       e0 02		      cpx	#2
   1735  f4e8		       b0 01		      bcs	nolives
   1736  f4ea		       0c		      .byte.b	$0C
   1737  f4eb				   nolives
   1738  f4eb		       85 1c		      sta	GRP1
   1739  f4ed		       a5 9f		      lda	temp4
   1740  f4ef		       85 0d		      sta	PF0
   1741  f4f1		       a5 9c		      lda	temp1
   1742  f4f3		       85 0f		      sta	PF2
   1743  f4f5		       a5 9e		      lda	temp3
   1744  f4f7		       85 0e		      sta	PF1
   1745  f4f9		       a5 9d		      lda	temp2
   1746  f4fb		       85 0f		      sta	PF2	;cycle 48!
   1747  f4fd		       68		      pla		; waste 14 cycles in 4 bytes
   1748  f4fe		       48		      pha		;
   1749  f4ff		       68		      pla		;
   1750  f500		       48		      pha		; Shouldn't hurt anything!
   1751  f501		       a9 00		      lda	#0
   1752  f503		       88		      dey
   1753  f504		       85 0e		      sta	PF1
   1754  f506		       10 d1		      bpl	lifeloop
   1755  f508		       85 02		      sta	WSYNC
   1756  f50a		       c8		      iny
   1757  f50b		       84 0d		      sty	PF0
   1758  f50d		       84 0f		      sty	PF2
   1759  f50f		       84 0e		      sty	PF1
   1760  f511		       84 1b		      sty	GRP0
   1761  f513		       84 1c		      sty	GRP1
   1762  f515		       60		      rts
   1763  f516
   1764  f516				  -	      if	(<*) > $F5
   1765  f516				  -	      align	256
   1766  f516					      endif
   1767  f516				   lifenusiz1table
   1768  f516		       00		      .byte.b	0
   1769  f517				   lifenusiz0table
   1770  f517		       00 00 00 01*	      .byte.b	0,0,0,1,1,3,3,3
   1771  f51f
   1772  f51f				   statustable		; warning: page-wrapping might cause issues
   1773  f51f							;0-7 and 16+
   1774  f51f		       00		      .byte.b	%00000000
   1775  f520		       01		      .byte.b	%00000001
   1776  f521		       03		      .byte.b	%00000011
   1777  f522		       07		      .byte.b	%00000111
   1778  f523		       0f		      .byte.b	%00001111
   1779  f524		       1f		      .byte.b	%00011111
   1780  f525		       3f		      .byte.b	%00111111
   1781  f526		       7f		      .byte.b	%01111111
   1782  f527		       ff		      .byte.b	255
   1783  f528		       ff		      .byte.b	255
   1784  f529		       ff		      .byte.b	255
   1785  f52a		       ff		      .byte.b	255
   1786  f52b		       ff		      .byte.b	255
   1787  f52c		       ff		      .byte.b	255
   1788  f52d		       ff		      .byte.b	255
   1789  f52e		       ff		      .byte.b	255
   1790  f52f							; 8-15
   1791  f52f		       00		      .byte.b	0
   1792  f530		       00		      .byte.b	0
   1793  f531		       00		      .byte.b	0
   1794  f532		       00		      .byte.b	0
   1795  f533		       00		      .byte.b	0
   1796  f534		       00		      .byte.b	0
   1797  f535		       00		      .byte.b	0
   1798  f536		       00		      .byte.b	0
   1799  f537		       00		      .byte.b	%00000000
   1800  f538		       80		      .byte.b	%10000000
   1801  f539		       c0		      .byte.b	%11000000
   1802  f53a		       e0		      .byte.b	%11100000
   1803  f53b		       f0		      .byte.b	%11110000
   1804  f53c		       f8		      .byte.b	%11111000
   1805  f53d		       fc		      .byte.b	%11111100
   1806  f53e		       fe		      .byte.b	%11111110
   1807  f53f
   1808  f53f				   game
   1809  f53f				   .L00 		;  rem Generated 7/20/2022 07:10:21 PM by Visual bB Version 1.0.0.568
   1810  f53f
   1811  f53f				   .L01 		;  rem **********************************
   1812  f53f
   1813  f53f				   .L02 		;  rem *<Apple Slayer> 		 *
   1814  f53f
   1815  f53f				   .L03 		;  rem *<Fruit Ninja like game>	 *
   1816  f53f
   1817  f53f				   .L04 		;  rem *<Felipe and Tomaz>		 *
   1818  f53f
   1819  f53f				   .L05 		;  rem *<contact info> 		 *
   1820  f53f
   1821  f53f				   .L06 		;  rem *<free>			       *
   1822  f53f
   1823  f53f				   .L07 		;  rem **********************************
   1824  f53f
   1825  f53f				   .
   1826  f53f							; 
   1827  f53f
   1828  f53f				   .L08 		;  set kernel_options pfcolors
   1829  f53f
   1830  f53f				   .L09 		;  set romsize 4k
   1831  f53f
   1832  f53f				   .L010		;  set tv ntsc
   1833  f53f
   1834  f53f				   .L011		;  include 6lives_statusbar.asm
   1835  f53f
   1836  f53f				   .L012		;  statusbarlength  =	144
   1837  f53f
   1838  f53f		       a9 90		      LDA	#144
   1839  f541		       85 f5		      STA	statusbarlength
   1840  f543				   .L013		;  const scorefade  =	0
   1841  f543
   1842  f543				   .L014		;  scorecolor	=  $1C
   1843  f543
   1844  f543		       a9 1c		      LDA	#$1C
   1845  f545		       85 a3		      STA	scorecolor
   1846  f547				   .L015		;  const logo_color = $0E
   1847  f547
   1848  f547				   .L016		;  const logo_height = 92
   1849  f547
   1850  f547				   .L017		;  COLUBK = $00
   1851  f547
   1852  f547		       a9 00		      LDA	#$00
   1853  f549		       85 09		      STA	COLUBK
   1854  f54b				   .
   1855  f54b							; 
   1856  f54b
   1857  f54b				   .
   1858  f54b							; 
   1859  f54b
   1860  f54b				   .L018		;  dim sounda	=  a
   1861  f54b
   1862  f54b				   .L019		;  dim soundb	=  b
   1863  f54b
   1864  f54b				   .L020		;  dim counter  =  c
   1865  f54b
   1866  f54b				   .L021		;  dim d  =  d
   1867  f54b
   1868  f54b				   .L022		;  dim e  =  e
   1869  f54b
   1870  f54b				   .L023		;  dim f  =  f
   1871  f54b
   1872  f54b				   .L024		;  dim g  =  g
   1873  f54b
   1874  f54b				   .L025		;  dim h  =  h
   1875  f54b
   1876  f54b				   .L026		;  dim i  =  i
   1877  f54b
   1878  f54b				   .L027		;  dim j  =  j
   1879  f54b
   1880  f54b				   .L028		;  dim k  =  k
   1881  f54b
   1882  f54b				   .L029		;  dim l  =  l
   1883  f54b
   1884  f54b				   .L030		;  dim m  =  m
   1885  f54b
   1886  f54b				   .L031		;  dim n  =  n
   1887  f54b
   1888  f54b				   .L032		;  dim o  =  o
   1889  f54b
   1890  f54b				   .L033		;  dim p  =  p
   1891  f54b
   1892  f54b				   .L034		;  dim q  =  q
   1893  f54b
   1894  f54b				   .L035		;  dim rand16	=  r
   1895  f54b
   1896  f54b				   .L036		;  dim statusbarcolor	=  s
   1897  f54b
   1898  f54b				   .L037		;  dim t  =  t
   1899  f54b
   1900  f54b				   .L038		;  dim u  =  u
   1901  f54b
   1902  f54b				   .L039		;  dim v  =  v
   1903  f54b
   1904  f54b				   .L040		;  dim w  =  w
   1905  f54b
   1906  f54b				   .L041		;  dim x  =  x
   1907  f54b
   1908  f54b				   .L042		;  dim y  =  y
   1909  f54b
   1910  f54b				   .L043		;  dim z  =  z
   1911  f54b
   1912  f54b				   .L044		;  dim _sc1  =  score
   1913  f54b
   1914  f54b				   .L045		;  dim _sc2  =  score + 1
   1915  f54b
   1916  f54b				   .L046		;  dim _sc3  =  score + 2
   1917  f54b
   1918  f54b				   .
   1919  f54b							; 
   1920  f54b
   1921  f54b				   .L047		;  rem start/restart ........................................................................
   1922  f54b
   1923  f54b				   .
   1924  f54b							; 
   1925  f54b
   1926  f54b				   .start_restart
   1927  f54b							; start_restart
   1928  f54b
   1929  f54b				   .
   1930  f54b							; 
   1931  f54b
   1932  f54b				   .L048		;  AUDV0  =  0  :  AUDV1  =  0
   1933  f54b
   1934  f54b		       a9 00		      LDA	#0
   1935  f54d		       85 19		      STA	AUDV0
   1936  f54f		       85 1a		      STA	AUDV1
   1937  f551				   .L049		;  a  =  0  :	b  =  0  :  c  =  0  :	d  =  0  :  e  =  0  :	f  =  0  :  g  =  0  :	h  =  0  :  i  =  0
   1938  f551
   1939  f551		       a9 00		      LDA	#0
   1940  f553		       85 d4		      STA	a
   1941  f555		       85 d5		      STA	b
   1942  f557		       85 d6		      STA	c
   1943  f559		       85 d7		      STA	d
   1944  f55b		       85 d8		      STA	e
   1945  f55d		       85 d9		      STA	f
   1946  f55f		       85 da		      STA	g
   1947  f561		       85 db		      STA	h
   1948  f563		       85 dc		      STA	i
   1949  f565				   .L050		;  j  =  0  :	k  =  0  :  l  =  0  :	m  =  0  :  n  =  0  :	o  =  0  :  p  =  0  :	q  =  0  :  r  =  0
   1950  f565
   1951  f565		       a9 00		      LDA	#0
   1952  f567		       85 dd		      STA	j
   1953  f569		       85 de		      STA	k
   1954  f56b		       85 df		      STA	l
   1955  f56d		       85 e0		      STA	m
   1956  f56f		       85 e1		      STA	n
   1957  f571		       85 e2		      STA	o
   1958  f573		       85 e3		      STA	p
   1959  f575		       85 e4		      STA	q
   1960  f577		       85 e5		      STA	r
   1961  f579				   .L051		;  s  =  0  :	t  =  0  :  u  =  0  :	v  =  0  :  w  =  0  :	x  =  0  :  z  =  0
   1962  f579
   1963  f579		       a9 00		      LDA	#0
   1964  f57b		       85 e6		      STA	s
   1965  f57d		       85 e7		      STA	t
   1966  f57f		       85 e8		      STA	u
   1967  f581		       85 e9		      STA	v
   1968  f583		       85 ea		      STA	w
   1969  f585		       85 eb		      STA	x
   1970  f587		       85 ed		      STA	z
   1971  f589				   .L052		;  player0y  =  200  :  player1y  =  200  :  bally  =	200
   1972  f589
   1973  f589		       a9 c8		      LDA	#200
   1974  f58b		       85 85		      STA	player0y
   1975  f58d		       85 86		      STA	player1y
   1976  f58f		       85 89		      STA	bally
   1977  f591				   .
   1978  f591							; 
   1979  f591
   1980  f591				   .L053		;  rem title ........................................................................
   1981  f591
   1982  f591				   .
   1983  f591							; 
   1984  f591
   1985  f591				   .SubTitleLoop
   1986  f591							; SubTitleLoop
   1987  f591
   1988  f591				   .L054		;  if joy0fire then goto main
   1989  f591
   1990  f591		       24 0c		      bit	INPT4
   1991  f593		       30 03		      BMI	.skipL054
   1992  f595				   .condpart0
   1993  f595		       4c b8 f9 	      jmp	.main
   1994  f598
   1995  f598				   .skipL054
   1996  f598				   .L055		;  gosub drawlogo
   1997  f598
   1998  f598		       20 60 f6 	      jsr	.drawlogo
   1999  f59b
   2000  f59b				   .L056		;  goto SubTitleLoop
   2001  f59b
   2002  f59b		       4c 91 f5 	      jmp	.SubTitleLoop
   2003  f59e
   2004  f59e				   .
   2005  f59e							; 
   2006  f59e
   2007  f59e				   .SubMainLoop
   2008  f59e							; SubMainLoop
   2009  f59e
   2010  f59e				   .L057		;  COLUPF = $0E
   2011  f59e
   2012  f59e		       a9 0e		      LDA	#$0E
   2013  f5a0		       85 08		      STA	COLUPF
   2014  f5a2				   .L058		;  drawscreen
   2015  f5a2
   2016  f5a2		       20 c7 f3 	      jsr	drawscreen
   2017  f5a5				   .L059		;  goto SubMainLoop
   2018  f5a5
   2019  f5a5		       4c 9e f5 	      jmp	.SubMainLoop
   2020  f5a8
   2021  f5a8				   .L060		;  inline abb.asm
   2022  f5a8
------- FILE abb.asm LEVEL 2 PASS 3
      0  f5a8					      include	abb.asm
      1  f5a8				   LogoFrame
      0  f5a8					      VERTICAL_SYNC
      1  f5a8		       a9 02		      LDA	#$02
      2  f5aa		       85 02		      STA	WSYNC
      3  f5ac		       85 00		      STA	VSYNC
      4  f5ae		       85 02		      STA	WSYNC
      5  f5b0		       85 02		      STA	WSYNC
      6  f5b2		       4a		      LSR
      7  f5b3		       85 02		      STA	WSYNC
      8  f5b5		       85 00		      STA	VSYNC
      3  f5b7
      4  f5b7							; 37 lines of VBLANK
      5  f5b7		       a9 2c		      lda	#44	; 2	 (5)
      6  f5b9		       8d 96 02 	      sta	TIM64T	; 3	 (8)
      0  f5bc					      sleep	5	; 5	 (13)
      1  f5bc				   .CYCLES    SET	5
      2  f5bc
      3  f5bc				  -	      IF	.CYCLES < 2
      4  f5bc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5bc				  -	      ERR
      6  f5bc					      ENDIF
      7  f5bc
      8  f5bc					      IF	.CYCLES & 1
      9  f5bc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5bc		       04 00		      nop	0
     11  f5be				  -	      ELSE
     12  f5be				  -	      bit	VSYNC
     13  f5be					      ENDIF
     14  f5be				   .CYCLES    SET	.CYCLES - 3
     15  f5be					      ENDIF
     16  f5be
     17  f5be					      REPEAT	.CYCLES / 2
     18  f5be		       ea		      nop
     19  f5bf					      REPEND
      8  f5bf		       a9 01		      lda	#1	; 2	 (15)
      9  f5c1		       85 25		      sta	VDELP0	; 3	 (18)
     10  f5c3		       85 26		      sta	VDELP1	; 3	 (21)
     11  f5c5		       a9 a6		      lda	#$A6	; 2	 (23)
     12  f5c7		       85 08		      sta	COLUPF	; 3	 (26)
      0  f5c9					      sleep	10	; 10	 (36)
      1  f5c9				   .CYCLES    SET	10
      2  f5c9
      3  f5c9				  -	      IF	.CYCLES < 2
      4  f5c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5c9				  -	      ERR
      6  f5c9					      ENDIF
      7  f5c9
      8  f5c9				  -	      IF	.CYCLES & 1
      9  f5c9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5c9				  -	      nop	0
     11  f5c9				  -	      ELSE
     12  f5c9				  -	      bit	VSYNC
     13  f5c9				  -	      ENDIF
     14  f5c9				  -.CYCLES    SET	.CYCLES - 3
     15  f5c9					      ENDIF
     16  f5c9
     17  f5c9					      REPEAT	.CYCLES / 2
     18  f5c9		       ea		      nop
     17  f5c9					      REPEND
     18  f5ca		       ea		      nop
     17  f5ca					      REPEND
     18  f5cb		       ea		      nop
     17  f5cb					      REPEND
     18  f5cc		       ea		      nop
     17  f5cc					      REPEND
     18  f5cd		       ea		      nop
     19  f5ce					      REPEND
     14  f5ce		       85 10		      sta	RESP0	; 3	 (39)
     15  f5d0		       85 11		      sta	RESP1	; 3	 (42)
     16  f5d2		       a9 20		      lda	#$20	; 2	 (44)
     17  f5d4		       85 21		      sta	HMP1	; 2	 (47)
     18  f5d6		       a9 10		      lda	#$10	; 2	 (49)
     19  f5d8		       85 20		      sta	HMP0	; 3	 (52)
     20  f5da		       a9 33		      lda	#$33	; 2	 (54)
     21  f5dc		       85 04		      sta	NUSIZ0	; 3	 (57)
     22  f5de		       85 05		      STA	NUSIZ1	; 3	 (60)
     23  f5e0		       85 02		      sta	WSYNC
     24  f5e2		       85 2a		      sta	HMOVE
     25  f5e4		       a9 0e		      lda	#logo_color
     26  f5e6		       85 06		      sta	COLUP0
     27  f5e8		       85 07		      sta	COLUP1
     28  f5ea
     29  f5ea
     30  f5ea				   LogoWaitVBlank
     31  f5ea		       ad 84 02 	      lda	INTIM
     32  f5ed		       d0 fb		      bne	LogoWaitVBlank	; loop until timer expires
     33  f5ef		       85 02		      sta	WSYNC
     34  f5f1
     35  f5f1							; disable VBLANK
     36  f5f1		       a9 00		      lda	#0
     37  f5f3		       85 01		      sta	VBLANK
     38  f5f5
     39  f5f5							; waste 51 scanlines
     40  f5f5							;	ldx #51
     41  f5f5		       a2 32		      ldx	#(96 - (logo_height/2))
     42  f5f7				   LogoVisibleScreen
     43  f5f7		       85 02		      sta	WSYNC
     44  f5f9		       ca		      dex
     45  f5fa		       d0 fb		      bne	LogoVisibleScreen
     46  f5fc
     47  f5fc
     48  f5fc
     49  f5fc							; Blank Screen and Set Playfield
     50  f5fc
     51  f5fc		       a0 5b		      ldy	#logo_height-1
     52  f5fe		       b9 5c f9 	      lda	logo_colors,y
     53  f601		       85 06		      sta	COLUP0
     54  f603		       85 07		      sta	COLUP1
     55  f605
     56  f605		       4c 08 f6 	      jmp	LogoLoop
     57  f608
     58  f608				  -	      if	>. != >[.+(logo_kernel_size)]
     59  f608				  -	      align	256
     60  f608					      endif
     61  f608
     62  f608
     63  f608				   LogoLoop
     64  f608		       85 02		      sta	WSYNC	; 3	 (0)
     65  f60a		       84 9c		      sty	temp1	; 3	 (3)
     66  f60c		       b9 68 f6 	      lda	logo_0,y	; 4	 (7)
     67  f60f		       85 1b		      sta	GRP0	; 3	 (10) 0 -> [GRP0]
     68  f611		       b9 00 f7 	      lda	logo_1,y	; 4	 (14)
     69  f614		       85 1c		      sta	GRP1	; 3	 (17) 1 -> [GRP1] ; 0 -> GRP0
     70  f616		       b9 5c f7 	      lda	logo_2,y	; 4	 (21)
     71  f619		       85 1b		      sta	GRP0	; 3	 (24*) 2 -> [GRP0] ; 1 -> GRP1
     72  f61b		       be 5c f8 	      ldx	logo_4,y	; 4	 (28) 4 -> X
     73  f61e		       b9 00 f9 	      lda	logo_5,y	; 4	 (32)
     74  f621		       85 9d		      sta	temp2	; 3	 (35)
     75  f623		       b9 00 f8 	      lda	logo_3,y	; 4	 (39) 3 -> A
     76  f626		       a4 9d		      ldy	temp2	; 3	 (42) 5 -> Y
     77  f628		       85 1c		      sta	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
     78  f62a		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
     79  f62c		       84 1c		      sty	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
     80  f62e		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
     81  f630		       a4 9c		      ldy	temp1	; 3	 (57)
     82  f632		       b9 5b f9 	      lda	logo_colors-1,y	; 4	 (61)
     83  f635		       85 06		      sta	COLUP0	; 3	 (64)
     84  f637		       85 07		      sta	COLUP1	; 3	 (67)
     85  f639		       88		      dey		; 2	 (69)
     86  f63a		       10 cc		      bpl	LogoLoop	; 3	 (72)
     87  f63a		       00 34	   logo_kernel_size =	* - LogoLoop
     88  f63c
     89  f63c		       a0 00		      ldy	#0
     90  f63e		       84 1b		      sty	GRP0
     91  f640		       84 1c		      sty	GRP1
     92  f642		       84 1b		      sty	GRP0
     93  f644		       84 1c		      sty	GRP1
     94  f646							;	ldx #40
     95  f646		       a2 31		      ldx	#((96 - (logo_height/2))-1)
     96  f648				   LogoGap
     97  f648		       85 02		      sta	WSYNC
     98  f64a		       ca		      dex		; 2	 (2)
     99  f64b		       d0 fb		      bne	LogoGap	; 2	 (4)
    100  f64d
    101  f64d				   LogoOverscanStart
    102  f64d							; Enable VBLANK
    103  f64d		       a9 02		      lda	#2
    104  f64f		       85 01		      sta	VBLANK
    105  f651							; overscan
    106  f651		       a2 23		      ldx	#35
    107  f653		       8e 96 02 	      stx	TIM64T
    108  f656		       ad 84 02 	      lda	INTIM
    109  f659		       18		      clc
    110  f65a		       69 80		      adc	#128
    111  f65c		       8d 96 02 	      sta	TIM64T
    112  f65f		       60		      rts
    113  f660
    114  f660				   .drawlogo
    115  f660		       ad 84 02 	      lda	INTIM
    116  f663		       30 fb		      bmi	.drawlogo	; loop until timer expires
    117  f665		       4c a8 f5 	      jmp	LogoFrame
    118  f668
    119  f668
    120  f668				  -	      if	>. != >[.+(logo_height)]
    121  f668				  -	      align	256
    122  f668					      endif
    123  f668
    124  f668							; Paste image information here
    125  f668
    126  f668				   logo_0
    127  f668		       00		      BYTE.b	%00000000
    128  f669		       00		      BYTE.b	%00000000
    129  f66a		       00		      BYTE.b	%00000000
    130  f66b		       00		      BYTE.b	%00000000
    131  f66c		       00		      BYTE.b	%00000000
    132  f66d		       00		      BYTE.b	%00000000
    133  f66e		       03		      BYTE.b	%00000011
    134  f66f		       02		      BYTE.b	%00000010
    135  f670		       00		      BYTE.b	%00000000
    136  f671		       00		      BYTE.b	%00000000
    137  f672		       00		      BYTE.b	%00000000
    138  f673		       00		      BYTE.b	%00000000
    139  f674		       00		      BYTE.b	%00000000
    140  f675		       00		      BYTE.b	%00000000
    141  f676		       00		      BYTE.b	%00000000
    142  f677		       00		      BYTE.b	%00000000
    143  f678		       00		      BYTE.b	%00000000
    144  f679		       00		      BYTE.b	%00000000
    145  f67a		       00		      BYTE.b	%00000000
    146  f67b		       00		      BYTE.b	%00000000
    147  f67c		       00		      BYTE.b	%00000000
    148  f67d		       00		      BYTE.b	%00000000
    149  f67e		       00		      BYTE.b	%00000000
    150  f67f		       00		      BYTE.b	%00000000
    151  f680		       00		      BYTE.b	%00000000
    152  f681		       00		      BYTE.b	%00000000
    153  f682		       00		      BYTE.b	%00000000
    154  f683		       00		      BYTE.b	%00000000
    155  f684		       00		      BYTE.b	%00000000
    156  f685		       00		      BYTE.b	%00000000
    157  f686		       00		      BYTE.b	%00000000
    158  f687		       00		      BYTE.b	%00000000
    159  f688		       00		      BYTE.b	%00000000
    160  f689		       00		      BYTE.b	%00000000
    161  f68a		       00		      BYTE.b	%00000000
    162  f68b		       00		      BYTE.b	%00000000
    163  f68c		       00		      BYTE.b	%00000000
    164  f68d		       00		      BYTE.b	%00000000
    165  f68e		       00		      BYTE.b	%00000000
    166  f68f		       00		      BYTE.b	%00000000
    167  f690		       00		      BYTE.b	%00000000
    168  f691		       97		      BYTE.b	%10010111
    169  f692		       00		      BYTE.b	%00000000
    170  f693		       97		      BYTE.b	%10010111
    171  f694		       00		      BYTE.b	%00000000
    172  f695		       00		      BYTE.b	%00000000
    173  f696		       02		      BYTE.b	%00000010
    174  f697		       02		      BYTE.b	%00000010
    175  f698		       02		      BYTE.b	%00000010
    176  f699		       02		      BYTE.b	%00000010
    177  f69a		       02		      BYTE.b	%00000010
    178  f69b		       02		      BYTE.b	%00000010
    179  f69c		       02		      BYTE.b	%00000010
    180  f69d		       02		      BYTE.b	%00000010
    181  f69e		       22		      BYTE.b	%00100010
    182  f69f		       22		      BYTE.b	%00100010
    183  f6a0		       12		      BYTE.b	%00010010
    184  f6a1		       12		      BYTE.b	%00010010
    185  f6a2		       0a		      BYTE.b	%00001010
    186  f6a3		       0a		      BYTE.b	%00001010
    187  f6a4		       07		      BYTE.b	%00000111
    188  f6a5		       07		      BYTE.b	%00000111
    189  f6a6		       3f		      BYTE.b	%00111111
    190  f6a7		       02		      BYTE.b	%00000010
    191  f6a8		       02		      BYTE.b	%00000010
    192  f6a9		       02		      BYTE.b	%00000010
    193  f6aa		       02		      BYTE.b	%00000010
    194  f6ab		       00		      BYTE.b	%00000000
    195  f6ac		       00		      BYTE.b	%00000000
    196  f6ad		       00		      BYTE.b	%00000000
    197  f6ae		       00		      BYTE.b	%00000000
    198  f6af		       02		      BYTE.b	%00000010
    199  f6b0		       02		      BYTE.b	%00000010
    200  f6b1		       02		      BYTE.b	%00000010
    201  f6b2		       02		      BYTE.b	%00000010
    202  f6b3		       02		      BYTE.b	%00000010
    203  f6b4		       02		      BYTE.b	%00000010
    204  f6b5		       02		      BYTE.b	%00000010
    205  f6b6		       22		      BYTE.b	%00100010
    206  f6b7		       22		      BYTE.b	%00100010
    207  f6b8		       12		      BYTE.b	%00010010
    208  f6b9		       12		      BYTE.b	%00010010
    209  f6ba		       0a		      BYTE.b	%00001010
    210  f6bb		       0a		      BYTE.b	%00001010
    211  f6bc		       07		      BYTE.b	%00000111
    212  f6bd		       07		      BYTE.b	%00000111
    213  f6be		       3f		      BYTE.b	%00111111
    214  f6bf		       02		      BYTE.b	%00000010
    215  f6c0		       02		      BYTE.b	%00000010
    216  f6c1		       02		      BYTE.b	%00000010
    217  f6c2		       02		      BYTE.b	%00000010
    218  f6c3		       00		      BYTE.b	%00000000
    219  f6c4
    220  f6c4
    221  f6c4					      if	>. != >[.+(logo_height)]
    222  f700		       00 00 00 00*	      align	256
    223  f700					      endif
    224  f700
    225  f700				   logo_1
    226  f700		       00		      BYTE.b	%00000000
    227  f701		       00		      BYTE.b	%00000000
    228  f702		       00		      BYTE.b	%00000000
    229  f703		       00		      BYTE.b	%00000000
    230  f704		       02		      BYTE.b	%00000010
    231  f705		       02		      BYTE.b	%00000010
    232  f706		       57		      BYTE.b	%01010111
    233  f707		       ab		      BYTE.b	%10101011
    234  f708		       02		      BYTE.b	%00000010
    235  f709		       02		      BYTE.b	%00000010
    236  f70a		       00		      BYTE.b	%00000000
    237  f70b		       00		      BYTE.b	%00000000
    238  f70c		       00		      BYTE.b	%00000000
    239  f70d		       00		      BYTE.b	%00000000
    240  f70e		       00		      BYTE.b	%00000000
    241  f70f		       00		      BYTE.b	%00000000
    242  f710		       00		      BYTE.b	%00000000
    243  f711		       08		      BYTE.b	%00001000
    244  f712		       09		      BYTE.b	%00001001
    245  f713		       09		      BYTE.b	%00001001
    246  f714		       09		      BYTE.b	%00001001
    247  f715		       09		      BYTE.b	%00001001
    248  f716		       1c		      BYTE.b	%00011100
    249  f717		       00		      BYTE.b	%00000000
    250  f718		       00		      BYTE.b	%00000000
    251  f719		       08		      BYTE.b	%00001000
    252  f71a		       08		      BYTE.b	%00001000
    253  f71b		       0c		      BYTE.b	%00001100
    254  f71c		       0a		      BYTE.b	%00001010
    255  f71d		       0a		      BYTE.b	%00001010
    256  f71e		       0a		      BYTE.b	%00001010
    257  f71f		       0c		      BYTE.b	%00001100
    258  f720		       00		      BYTE.b	%00000000
    259  f721		       00		      BYTE.b	%00000000
    260  f722		       00		      BYTE.b	%00000000
    261  f723		       25		      BYTE.b	%00100101
    262  f724		       25		      BYTE.b	%00100101
    263  f725		       27		      BYTE.b	%00100111
    264  f726		       75		      BYTE.b	%01110101
    265  f727		       00		      BYTE.b	%00000000
    266  f728		       00		      BYTE.b	%00000000
    267  f729		       ff		      BYTE.b	%11111111
    268  f72a		       00		      BYTE.b	%00000000
    269  f72b		       ff		      BYTE.b	%11111111
    270  f72c		       00		      BYTE.b	%00000000
    271  f72d		       00		      BYTE.b	%00000000
    272  f72e		       10		      BYTE.b	%00010000
    273  f72f		       14		      BYTE.b	%00010100
    274  f730		       16		      BYTE.b	%00010110
    275  f731		       15		      BYTE.b	%00010101
    276  f732		       14		      BYTE.b	%00010100
    277  f733		       12		      BYTE.b	%00010010
    278  f734		       1f		      BYTE.b	%00011111
    279  f735		       02		      BYTE.b	%00000010
    280  f736		       0f		      BYTE.b	%00001111
    281  f737		       18		      BYTE.b	%00011000
    282  f738		       54		      BYTE.b	%01010100
    283  f739		       53		      BYTE.b	%01010011
    284  f73a		       91		      BYTE.b	%10010001
    285  f73b		       90		      BYTE.b	%10010000
    286  f73c		       0f		      BYTE.b	%00001111
    287  f73d		       11		      BYTE.b	%00010001
    288  f73e		       c9		      BYTE.b	%11001001
    289  f73f		       04		      BYTE.b	%00000100
    290  f740		       02		      BYTE.b	%00000010
    291  f741		       01		      BYTE.b	%00000001
    292  f742		       01		      BYTE.b	%00000001
    293  f743		       00		      BYTE.b	%00000000
    294  f744		       00		      BYTE.b	%00000000
    295  f745		       00		      BYTE.b	%00000000
    296  f746		       00		      BYTE.b	%00000000
    297  f747		       02		      BYTE.b	%00000010
    298  f748		       02		      BYTE.b	%00000010
    299  f749		       02		      BYTE.b	%00000010
    300  f74a		       02		      BYTE.b	%00000010
    301  f74b		       02		      BYTE.b	%00000010
    302  f74c		       02		      BYTE.b	%00000010
    303  f74d		       02		      BYTE.b	%00000010
    304  f74e		       22		      BYTE.b	%00100010
    305  f74f		       22		      BYTE.b	%00100010
    306  f750		       12		      BYTE.b	%00010010
    307  f751		       52		      BYTE.b	%01010010
    308  f752		       8a		      BYTE.b	%10001010
    309  f753		       8a		      BYTE.b	%10001010
    310  f754		       07		      BYTE.b	%00000111
    311  f755		       07		      BYTE.b	%00000111
    312  f756		       bf		      BYTE.b	%10111111
    313  f757		       02		      BYTE.b	%00000010
    314  f758		       02		      BYTE.b	%00000010
    315  f759		       02		      BYTE.b	%00000010
    316  f75a		       02		      BYTE.b	%00000010
    317  f75b		       00		      BYTE.b	%00000000
    318  f75c
    319  f75c
    320  f75c				  -	      if	>. != >[.+(logo_height)]
    321  f75c				  -	      align	256
    322  f75c					      endif
    323  f75c
    324  f75c				   logo_2
    325  f75c		       07		      BYTE.b	%00000111
    326  f75d		       0f		      BYTE.b	%00001111
    327  f75e		       1f		      BYTE.b	%00011111
    328  f75f		       1f		      BYTE.b	%00011111
    329  f760		       0f		      BYTE.b	%00001111
    330  f761		       00		      BYTE.b	%00000000
    331  f762		       ff		      BYTE.b	%11111111
    332  f763		       ff		      BYTE.b	%11111111
    333  f764		       00		      BYTE.b	%00000000
    334  f765		       0f		      BYTE.b	%00001111
    335  f766		       1f		      BYTE.b	%00011111
    336  f767		       1f		      BYTE.b	%00011111
    337  f768		       0d		      BYTE.b	%00001101
    338  f769		       03		      BYTE.b	%00000011
    339  f76a		       01		      BYTE.b	%00000001
    340  f76b		       00		      BYTE.b	%00000000
    341  f76c		       00		      BYTE.b	%00000000
    342  f76d		       91		      BYTE.b	%10010001
    343  f76e		       51		      BYTE.b	%01010001
    344  f76f		       51		      BYTE.b	%01010001
    345  f770		       55		      BYTE.b	%01010101
    346  f771		       55		      BYTE.b	%01010101
    347  f772		       9f		      BYTE.b	%10011111
    348  f773		       00		      BYTE.b	%00000000
    349  f774		       00		      BYTE.b	%00000000
    350  f775		       ab		      BYTE.b	%10101011
    351  f776		       aa		      BYTE.b	%10101010
    352  f777		       aa		      BYTE.b	%10101010
    353  f778		       ea		      BYTE.b	%11101010
    354  f779		       aa		      BYTE.b	%10101010
    355  f77a		       aa		      BYTE.b	%10101010
    356  f77b		       aa		      BYTE.b	%10101010
    357  f77c		       00		      BYTE.b	%00000000
    358  f77d		       00		      BYTE.b	%00000000
    359  f77e		       20		      BYTE.b	%00100000
    360  f77f		       41		      BYTE.b	%01000001
    361  f780		       61		      BYTE.b	%01100001
    362  f781		       41		      BYTE.b	%01000001
    363  f782		       63		      BYTE.b	%01100011
    364  f783		       00		      BYTE.b	%00000000
    365  f784		       00		      BYTE.b	%00000000
    366  f785		       fa		      BYTE.b	%11111010
    367  f786		       01		      BYTE.b	%00000001
    368  f787		       fa		      BYTE.b	%11111010
    369  f788		       00		      BYTE.b	%00000000
    370  f789		       00		      BYTE.b	%00000000
    371  f78a		       40		      BYTE.b	%01000000
    372  f78b		       20		      BYTE.b	%00100000
    373  f78c		       10		      BYTE.b	%00010000
    374  f78d		       50		      BYTE.b	%01010000
    375  f78e		       90		      BYTE.b	%10010000
    376  f78f		       90		      BYTE.b	%10010000
    377  f790		       f0		      BYTE.b	%11110000
    378  f791		       00		      BYTE.b	%00000000
    379  f792		       e0		      BYTE.b	%11100000
    380  f793		       10		      BYTE.b	%00010000
    381  f794		       90		      BYTE.b	%10010000
    382  f795		       90		      BYTE.b	%10010000
    383  f796		       50		      BYTE.b	%01010000
    384  f797		       11		      BYTE.b	%00010001
    385  f798		       e0		      BYTE.b	%11100000
    386  f799		       10		      BYTE.b	%00010000
    387  f79a		       20		      BYTE.b	%00100000
    388  f79b		       41		      BYTE.b	%01000001
    389  f79c		       81		      BYTE.b	%10000001
    390  f79d		       01		      BYTE.b	%00000001
    391  f79e		       00		      BYTE.b	%00000000
    392  f79f		       02		      BYTE.b	%00000010
    393  f7a0		       1f		      BYTE.b	%00011111
    394  f7a1		       1f		      BYTE.b	%00011111
    395  f7a2		       02		      BYTE.b	%00000010
    396  f7a3		       00		      BYTE.b	%00000000
    397  f7a4		       00		      BYTE.b	%00000000
    398  f7a5		       00		      BYTE.b	%00000000
    399  f7a6		       00		      BYTE.b	%00000000
    400  f7a7		       00		      BYTE.b	%00000000
    401  f7a8		       00		      BYTE.b	%00000000
    402  f7a9		       00		      BYTE.b	%00000000
    403  f7aa		       20		      BYTE.b	%00100000
    404  f7ab		       20		      BYTE.b	%00100000
    405  f7ac		       40		      BYTE.b	%01000000
    406  f7ad		       40		      BYTE.b	%01000000
    407  f7ae		       80		      BYTE.b	%10000000
    408  f7af		       80		      BYTE.b	%10000000
    409  f7b0		       00		      BYTE.b	%00000000
    410  f7b1		       00		      BYTE.b	%00000000
    411  f7b2		       e0		      BYTE.b	%11100000
    412  f7b3		       00		      BYTE.b	%00000000
    413  f7b4		       00		      BYTE.b	%00000000
    414  f7b5		       00		      BYTE.b	%00000000
    415  f7b6		       00		      BYTE.b	%00000000
    416  f7b7		       00		      BYTE.b	%00000000
    417  f7b8
    418  f7b8
    419  f7b8					      if	>. != >[.+(logo_height)]
    420  f800		       00 00 00 00*	      align	256
    421  f800					      endif
    422  f800
    423  f800				   logo_3
    424  f800		       80		      BYTE.b	%10000000
    425  f801		       c1		      BYTE.b	%11000001
    426  f802		       e0		      BYTE.b	%11100000
    427  f803		       e4		      BYTE.b	%11100100
    428  f804		       c0		      BYTE.b	%11000000
    429  f805		       00		      BYTE.b	%00000000
    430  f806		       ff		      BYTE.b	%11111111
    431  f807		       ff		      BYTE.b	%11111111
    432  f808		       00		      BYTE.b	%00000000
    433  f809		       c8		      BYTE.b	%11001000
    434  f80a		       e4		      BYTE.b	%11100100
    435  f80b		       e0		      BYTE.b	%11100000
    436  f80c		       c0		      BYTE.b	%11000000
    437  f80d		       00		      BYTE.b	%00000000
    438  f80e		       80		      BYTE.b	%10000000
    439  f80f		       00		      BYTE.b	%00000000
    440  f810		       00		      BYTE.b	%00000000
    441  f811		       57		      BYTE.b	%01010111
    442  f812		       54		      BYTE.b	%01010100
    443  f813		       52		      BYTE.b	%01010010
    444  f814		       71		      BYTE.b	%01110001
    445  f815		       50		      BYTE.b	%01010000
    446  f816		       77		      BYTE.b	%01110111
    447  f817		       00		      BYTE.b	%00000000
    448  f818		       00		      BYTE.b	%00000000
    449  f819		       40		      BYTE.b	%01000000
    450  f81a		       20		      BYTE.b	%00100000
    451  f81b		       20		      BYTE.b	%00100000
    452  f81c		       00		      BYTE.b	%00000000
    453  f81d		       20		      BYTE.b	%00100000
    454  f81e		       00		      BYTE.b	%00000000
    455  f81f		       00		      BYTE.b	%00000000
    456  f820		       00		      BYTE.b	%00000000
    457  f821		       00		      BYTE.b	%00000000
    458  f822		       10		      BYTE.b	%00010000
    459  f823		       25		      BYTE.b	%00100101
    460  f824		       37		      BYTE.b	%00110111
    461  f825		       25		      BYTE.b	%00100101
    462  f826		       b6		      BYTE.b	%10110110
    463  f827		       00		      BYTE.b	%00000000
    464  f828		       00		      BYTE.b	%00000000
    465  f829		       bf		      BYTE.b	%10111111
    466  f82a		       00		      BYTE.b	%00000000
    467  f82b		       bf		      BYTE.b	%10111111
    468  f82c		       00		      BYTE.b	%00000000
    469  f82d		       00		      BYTE.b	%00000000
    470  f82e		       00		      BYTE.b	%00000000
    471  f82f		       00		      BYTE.b	%00000000
    472  f830		       1b		      BYTE.b	%00011011
    473  f831		       12		      BYTE.b	%00010010
    474  f832		       0a		      BYTE.b	%00001010
    475  f833		       1b		      BYTE.b	%00011011
    476  f834		       00		      BYTE.b	%00000000
    477  f835		       00		      BYTE.b	%00000000
    478  f836		       00		      BYTE.b	%00000000
    479  f837		       00		      BYTE.b	%00000000
    480  f838		       00		      BYTE.b	%00000000
    481  f839		       00		      BYTE.b	%00000000
    482  f83a		       cd		      BYTE.b	%11001101
    483  f83b		       29		      BYTE.b	%00101001
    484  f83c		       29		      BYTE.b	%00101001
    485  f83d		       29		      BYTE.b	%00101001
    486  f83e		       c9		      BYTE.b	%11001001
    487  f83f		       09		      BYTE.b	%00001001
    488  f840		       09		      BYTE.b	%00001001
    489  f841		       29		      BYTE.b	%00101001
    490  f842		       c8		      BYTE.b	%11001000
    491  f843		       00		      BYTE.b	%00000000
    492  f844		       ff		      BYTE.b	%11111111
    493  f845		       ff		      BYTE.b	%11111111
    494  f846		       00		      BYTE.b	%00000000
    495  f847		       8a		      BYTE.b	%10001010
    496  f848		       8a		      BYTE.b	%10001010
    497  f849		       8a		      BYTE.b	%10001010
    498  f84a		       fa		      BYTE.b	%11111010
    499  f84b		       52		      BYTE.b	%01010010
    500  f84c		       53		      BYTE.b	%01010011
    501  f84d		       52		      BYTE.b	%01010010
    502  f84e		       22		      BYTE.b	%00100010
    503  f84f		       23		      BYTE.b	%00100011
    504  f850		       00		      BYTE.b	%00000000
    505  f851		       00		      BYTE.b	%00000000
    506  f852		       00		      BYTE.b	%00000000
    507  f853		       00		      BYTE.b	%00000000
    508  f854		       00		      BYTE.b	%00000000
    509  f855		       00		      BYTE.b	%00000000
    510  f856		       00		      BYTE.b	%00000000
    511  f857		       00		      BYTE.b	%00000000
    512  f858		       00		      BYTE.b	%00000000
    513  f859		       00		      BYTE.b	%00000000
    514  f85a		       00		      BYTE.b	%00000000
    515  f85b		       00		      BYTE.b	%00000000
    516  f85c
    517  f85c
    518  f85c				  -	      if	>. != >[.+(logo_height)]
    519  f85c				  -	      align	256
    520  f85c					      endif
    521  f85c
    522  f85c				   logo_4
    523  f85c		       00		      BYTE.b	%00000000
    524  f85d		       00		      BYTE.b	%00000000
    525  f85e		       00		      BYTE.b	%00000000
    526  f85f		       00		      BYTE.b	%00000000
    527  f860		       00		      BYTE.b	%00000000
    528  f861		       00		      BYTE.b	%00000000
    529  f862		       fe		      BYTE.b	%11111110
    530  f863		       ff		      BYTE.b	%11111111
    531  f864		       00		      BYTE.b	%00000000
    532  f865		       00		      BYTE.b	%00000000
    533  f866		       00		      BYTE.b	%00000000
    534  f867		       00		      BYTE.b	%00000000
    535  f868		       00		      BYTE.b	%00000000
    536  f869		       80		      BYTE.b	%10000000
    537  f86a		       00		      BYTE.b	%00000000
    538  f86b		       00		      BYTE.b	%00000000
    539  f86c		       00		      BYTE.b	%00000000
    540  f86d		       a0		      BYTE.b	%10100000
    541  f86e		       00		      BYTE.b	%00000000
    542  f86f		       00		      BYTE.b	%00000000
    543  f870		       00		      BYTE.b	%00000000
    544  f871		       80		      BYTE.b	%10000000
    545  f872		       80		      BYTE.b	%10000000
    546  f873		       00		      BYTE.b	%00000000
    547  f874		       00		      BYTE.b	%00000000
    548  f875		       00		      BYTE.b	%00000000
    549  f876		       00		      BYTE.b	%00000000
    550  f877		       00		      BYTE.b	%00000000
    551  f878		       00		      BYTE.b	%00000000
    552  f879		       00		      BYTE.b	%00000000
    553  f87a		       00		      BYTE.b	%00000000
    554  f87b		       00		      BYTE.b	%00000000
    555  f87c		       00		      BYTE.b	%00000000
    556  f87d		       00		      BYTE.b	%00000000
    557  f87e		       00		      BYTE.b	%00000000
    558  f87f		       45		      BYTE.b	%01000101
    559  f880		       44		      BYTE.b	%01000100
    560  f881		       55		      BYTE.b	%01010101
    561  f882		       7c		      BYTE.b	%01111100
    562  f883		       00		      BYTE.b	%00000000
    563  f884		       00		      BYTE.b	%00000000
    564  f885		       ff		      BYTE.b	%11111111
    565  f886		       00		      BYTE.b	%00000000
    566  f887		       ff		      BYTE.b	%11111111
    567  f888		       00		      BYTE.b	%00000000
    568  f889		       00		      BYTE.b	%00000000
    569  f88a		       00		      BYTE.b	%00000000
    570  f88b		       00		      BYTE.b	%00000000
    571  f88c		       b6		      BYTE.b	%10110110
    572  f88d		       a4		      BYTE.b	%10100100
    573  f88e		       92		      BYTE.b	%10010010
    574  f88f		       b6		      BYTE.b	%10110110
    575  f890		       00		      BYTE.b	%00000000
    576  f891		       00		      BYTE.b	%00000000
    577  f892		       00		      BYTE.b	%00000000
    578  f893		       00		      BYTE.b	%00000000
    579  f894		       00		      BYTE.b	%00000000
    580  f895		       00		      BYTE.b	%00000000
    581  f896		       49		      BYTE.b	%01001001
    582  f897		       49		      BYTE.b	%01001001
    583  f898		       49		      BYTE.b	%01001001
    584  f899		       49		      BYTE.b	%01001001
    585  f89a		       d5		      BYTE.b	%11010101
    586  f89b		       55		      BYTE.b	%01010101
    587  f89c		       55		      BYTE.b	%01010101
    588  f89d		       d5		      BYTE.b	%11010101
    589  f89e		       95		      BYTE.b	%10010101
    590  f89f		       00		      BYTE.b	%00000000
    591  f8a0		       ff		      BYTE.b	%11111111
    592  f8a1		       ff		      BYTE.b	%11111111
    593  f8a2		       00		      BYTE.b	%00000000
    594  f8a3		       23		      BYTE.b	%00100011
    595  f8a4		       22		      BYTE.b	%00100010
    596  f8a5		       22		      BYTE.b	%00100010
    597  f8a6		       22		      BYTE.b	%00100010
    598  f8a7		       22		      BYTE.b	%00100010
    599  f8a8		       32		      BYTE.b	%00110010
    600  f8a9		       aa		      BYTE.b	%10101010
    601  f8aa		       aa		      BYTE.b	%10101010
    602  f8ab		       32		      BYTE.b	%00110010
    603  f8ac		       00		      BYTE.b	%00000000
    604  f8ad		       00		      BYTE.b	%00000000
    605  f8ae		       00		      BYTE.b	%00000000
    606  f8af		       00		      BYTE.b	%00000000
    607  f8b0		       00		      BYTE.b	%00000000
    608  f8b1		       00		      BYTE.b	%00000000
    609  f8b2		       00		      BYTE.b	%00000000
    610  f8b3		       00		      BYTE.b	%00000000
    611  f8b4		       00		      BYTE.b	%00000000
    612  f8b5		       00		      BYTE.b	%00000000
    613  f8b6		       00		      BYTE.b	%00000000
    614  f8b7		       00		      BYTE.b	%00000000
    615  f8b8
    616  f8b8
    617  f8b8					      if	>. != >[.+(logo_height)]
    618  f900		       00 00 00 00*	      align	256
    619  f900					      endif
    620  f900
    621  f900				   logo_5
    622  f900		       00		      BYTE.b	%00000000
    623  f901		       00		      BYTE.b	%00000000
    624  f902		       00		      BYTE.b	%00000000
    625  f903		       00		      BYTE.b	%00000000
    626  f904		       00		      BYTE.b	%00000000
    627  f905		       00		      BYTE.b	%00000000
    628  f906		       00		      BYTE.b	%00000000
    629  f907		       00		      BYTE.b	%00000000
    630  f908		       00		      BYTE.b	%00000000
    631  f909		       00		      BYTE.b	%00000000
    632  f90a		       00		      BYTE.b	%00000000
    633  f90b		       00		      BYTE.b	%00000000
    634  f90c		       00		      BYTE.b	%00000000
    635  f90d		       00		      BYTE.b	%00000000
    636  f90e		       00		      BYTE.b	%00000000
    637  f90f		       00		      BYTE.b	%00000000
    638  f910		       00		      BYTE.b	%00000000
    639  f911		       00		      BYTE.b	%00000000
    640  f912		       00		      BYTE.b	%00000000
    641  f913		       00		      BYTE.b	%00000000
    642  f914		       00		      BYTE.b	%00000000
    643  f915		       00		      BYTE.b	%00000000
    644  f916		       00		      BYTE.b	%00000000
    645  f917		       00		      BYTE.b	%00000000
    646  f918		       00		      BYTE.b	%00000000
    647  f919		       00		      BYTE.b	%00000000
    648  f91a		       00		      BYTE.b	%00000000
    649  f91b		       00		      BYTE.b	%00000000
    650  f91c		       00		      BYTE.b	%00000000
    651  f91d		       00		      BYTE.b	%00000000
    652  f91e		       00		      BYTE.b	%00000000
    653  f91f		       00		      BYTE.b	%00000000
    654  f920		       00		      BYTE.b	%00000000
    655  f921		       00		      BYTE.b	%00000000
    656  f922		       00		      BYTE.b	%00000000
    657  f923		       00		      BYTE.b	%00000000
    658  f924		       00		      BYTE.b	%00000000
    659  f925		       00		      BYTE.b	%00000000
    660  f926		       00		      BYTE.b	%00000000
    661  f927		       00		      BYTE.b	%00000000
    662  f928		       00		      BYTE.b	%00000000
    663  f929		       e9		      BYTE.b	%11101001
    664  f92a		       00		      BYTE.b	%00000000
    665  f92b		       e9		      BYTE.b	%11101001
    666  f92c		       00		      BYTE.b	%00000000
    667  f92d		       00		      BYTE.b	%00000000
    668  f92e		       00		      BYTE.b	%00000000
    669  f92f		       00		      BYTE.b	%00000000
    670  f930		       00		      BYTE.b	%00000000
    671  f931		       00		      BYTE.b	%00000000
    672  f932		       00		      BYTE.b	%00000000
    673  f933		       00		      BYTE.b	%00000000
    674  f934		       00		      BYTE.b	%00000000
    675  f935		       00		      BYTE.b	%00000000
    676  f936		       00		      BYTE.b	%00000000
    677  f937		       00		      BYTE.b	%00000000
    678  f938		       00		      BYTE.b	%00000000
    679  f939		       00		      BYTE.b	%00000000
    680  f93a		       a8		      BYTE.b	%10101000
    681  f93b		       28		      BYTE.b	%00101000
    682  f93c		       28		      BYTE.b	%00101000
    683  f93d		       30		      BYTE.b	%00110000
    684  f93e		       20		      BYTE.b	%00100000
    685  f93f		       b8		      BYTE.b	%10111000
    686  f940		       28		      BYTE.b	%00101000
    687  f941		       28		      BYTE.b	%00101000
    688  f942		       b0		      BYTE.b	%10110000
    689  f943		       00		      BYTE.b	%00000000
    690  f944		       fc		      BYTE.b	%11111100
    691  f945		       fe		      BYTE.b	%11111110
    692  f946		       00		      BYTE.b	%00000000
    693  f947		       70		      BYTE.b	%01110000
    694  f948		       40		      BYTE.b	%01000000
    695  f949		       40		      BYTE.b	%01000000
    696  f94a		       40		      BYTE.b	%01000000
    697  f94b		       60		      BYTE.b	%01100000
    698  f94c		       40		      BYTE.b	%01000000
    699  f94d		       40		      BYTE.b	%01000000
    700  f94e		       40		      BYTE.b	%01000000
    701  f94f		       70		      BYTE.b	%01110000
    702  f950		       00		      BYTE.b	%00000000
    703  f951		       00		      BYTE.b	%00000000
    704  f952		       00		      BYTE.b	%00000000
    705  f953		       00		      BYTE.b	%00000000
    706  f954		       00		      BYTE.b	%00000000
    707  f955		       00		      BYTE.b	%00000000
    708  f956		       00		      BYTE.b	%00000000
    709  f957		       00		      BYTE.b	%00000000
    710  f958		       00		      BYTE.b	%00000000
    711  f959		       00		      BYTE.b	%00000000
    712  f95a		       00		      BYTE.b	%00000000
    713  f95b		       00		      BYTE.b	%00000000
    714  f95c
    715  f95c
    716  f95c				  -	      if	>. != >[.+(logo_height)]
    717  f95c				  -	      align	256
    718  f95c					      endif
    719  f95c
    720  f95c				   logo_colors
    721  f95c		       42		      .byte.b	$42
    722  f95d		       42		      .byte.b	$42
    723  f95e		       42		      .byte.b	$42
    724  f95f		       42		      .byte.b	$42
    725  f960		       42		      .byte.b	$42
    726  f961		       82		      .byte.b	$82
    727  f962		       0e		      .byte.b	$0E
    728  f963		       0a		      .byte.b	$0A
    729  f964		       82		      .byte.b	$82
    730  f965		       42		      .byte.b	$42
    731  f966		       42		      .byte.b	$42
    732  f967		       42		      .byte.b	$42
    733  f968		       42		      .byte.b	$42
    734  f969		       42		      .byte.b	$42
    735  f96a		       42		      .byte.b	$42
    736  f96b		       0e		      .byte.b	$0E
    737  f96c		       0e		      .byte.b	$0E
    738  f96d		       2e		      .byte.b	$2E
    739  f96e		       2e		      .byte.b	$2E
    740  f96f		       2e		      .byte.b	$2E
    741  f970		       2c		      .byte.b	$2C
    742  f971		       2c		      .byte.b	$2C
    743  f972		       2c		      .byte.b	$2C
    744  f973		       2a		      .byte.b	$2A
    745  f974		       2a		      .byte.b	$2A
    746  f975		       2a		      .byte.b	$2A
    747  f976		       28		      .byte.b	$28
    748  f977		       28		      .byte.b	$28
    749  f978		       28		      .byte.b	$28
    750  f979		       26		      .byte.b	$26
    751  f97a		       26		      .byte.b	$26
    752  f97b		       26		      .byte.b	$26
    753  f97c		       24		      .byte.b	$24
    754  f97d		       24		      .byte.b	$24
    755  f97e		       0e		      .byte.b	$0E
    756  f97f		       0c		      .byte.b	$0C
    757  f980		       0a		      .byte.b	$0A
    758  f981		       08		      .byte.b	$08
    759  f982		       06		      .byte.b	$06
    760  f983		       04		      .byte.b	$04
    761  f984		       0e		      .byte.b	$0E
    762  f985		       0e		      .byte.b	$0E
    763  f986		       0e		      .byte.b	$0E
    764  f987		       0e		      .byte.b	$0E
    765  f988		       0e		      .byte.b	$0E
    766  f989		       44		      .byte.b	$44
    767  f98a		       44		      .byte.b	$44
    768  f98b		       46		      .byte.b	$46
    769  f98c		       44		      .byte.b	$44
    770  f98d		       44		      .byte.b	$44
    771  f98e		       44		      .byte.b	$44
    772  f98f		       44		      .byte.b	$44
    773  f990		       44		      .byte.b	$44
    774  f991		       44		      .byte.b	$44
    775  f992		       44		      .byte.b	$44
    776  f993		       42		      .byte.b	$42
    777  f994		       42		      .byte.b	$42
    778  f995		       42		      .byte.b	$42
    779  f996		       42		      .byte.b	$42
    780  f997		       42		      .byte.b	$42
    781  f998		       42		      .byte.b	$42
    782  f999		       42		      .byte.b	$42
    783  f99a		       40		      .byte.b	$40
    784  f99b		       40		      .byte.b	$40
    785  f99c		       40		      .byte.b	$40
    786  f99d		       40		      .byte.b	$40
    787  f99e		       40		      .byte.b	$40
    788  f99f		       08		      .byte.b	$08
    789  f9a0		       0e		      .byte.b	$0E
    790  f9a1		       0a		      .byte.b	$0A
    791  f9a2		       08		      .byte.b	$08
    792  f9a3		       18		      .byte.b	$18
    793  f9a4		       18		      .byte.b	$18
    794  f9a5		       18		      .byte.b	$18
    795  f9a6		       16		      .byte.b	$16
    796  f9a7		       16		      .byte.b	$16
    797  f9a8		       16		      .byte.b	$16
    798  f9a9		       16		      .byte.b	$16
    799  f9aa		       14		      .byte.b	$14
    800  f9ab		       14		      .byte.b	$14
    801  f9ac		       14		      .byte.b	$14
    802  f9ad		       14		      .byte.b	$14
    803  f9ae		       14		      .byte.b	$14
    804  f9af		       12		      .byte.b	$12
    805  f9b0		       12		      .byte.b	$12
    806  f9b1		       12		      .byte.b	$12
    807  f9b2		       12		      .byte.b	$12
    808  f9b3		       10		      .byte.b	$10
    809  f9b4		       10		      .byte.b	$10
    810  f9b5		       10		      .byte.b	$10
    811  f9b6		       10		      .byte.b	$10
    812  f9b7		       10		      .byte.b	$10
    813  f9b8
    814  f9b8
------- FILE C:\bB\Ringo2600\Ringo2600\Atariando-PUC-Rio-2022\AppleSlayer.bas.asm
   2024  f9b8
   2025  f9b8				   .
   2026  f9b8							; 
   2027  f9b8
   2028  f9b8				   .L061		;  rem main_mainsetup........................................................................
   2029  f9b8
   2030  f9b8				   .
   2031  f9b8							; 
   2032  f9b8
   2033  f9b8				   .L062		;  rem mainloop  .........................................................................
   2034  f9b8
   2035  f9b8				   .
   2036  f9b8							; 
   2037  f9b8
   2038  f9b8				   .main
   2039  f9b8							; main
   2040  f9b8
   2041  f9b8				   .L063		;  scorecolor	=  $1E
   2042  f9b8
   2043  f9b8		       a9 1e		      LDA	#$1E
   2044  f9ba		       85 a3		      STA	scorecolor
   2045  f9bc				   .L064		;  statusbarcolor  =  $00
   2046  f9bc
   2047  f9bc		       a9 00		      LDA	#$00
   2048  f9be		       85 e6		      STA	statusbarcolor
   2049  f9c0				   .L065		;  COLUBK  =  $00
   2050  f9c0
   2051  f9c0		       a9 00		      LDA	#$00
   2052  f9c2		       85 09		      STA	COLUBK
   2053  f9c4				   .
   2054  f9c4							; 
   2055  f9c4
   2056  f9c4				   .L066		;  playfield:
   2057  f9c4
   2058  f9c4				  -	      ifconst	pfres
   2059  f9c4				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2060  f9c4					      else
   2061  f9c4		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2062  f9c6					      endif
   2063  f9c6		       4c f5 f9 	      jmp	pflabel0
   2064  f9c9				   PF_data0
   2065  f9c9		       00 e0		      .byte.b	%00000000, %11100000
   2066  f9cb					      if	(pfwidth>2)
   2067  f9cb		       ff ff		      .byte.b	%11111111, %11111111
   2068  f9cd					      endif
   2069  f9cd		       00 f8		      .byte.b	%00000000, %11111000
   2070  f9cf					      if	(pfwidth>2)
   2071  f9cf		       ff ff		      .byte.b	%11111111, %11111111
   2072  f9d1					      endif
   2073  f9d1		       00 fc		      .byte.b	%00000000, %11111100
   2074  f9d3					      if	(pfwidth>2)
   2075  f9d3		       ff ff		      .byte.b	%11111111, %11111111
   2076  f9d5					      endif
   2077  f9d5		       00 f0		      .byte.b	%00000000, %11110000
   2078  f9d7					      if	(pfwidth>2)
   2079  f9d7		       ff ff		      .byte.b	%11111111, %11111111
   2080  f9d9					      endif
   2081  f9d9		       00 c0		      .byte.b	%00000000, %11000000
   2082  f9db					      if	(pfwidth>2)
   2083  f9db		       ff ff		      .byte.b	%11111111, %11111111
   2084  f9dd					      endif
   2085  f9dd		       00 00		      .byte.b	%00000000, %00000000
   2086  f9df					      if	(pfwidth>2)
   2087  f9df		       1f ff		      .byte.b	%00011111, %11111111
   2088  f9e1					      endif
   2089  f9e1		       00 00		      .byte.b	%00000000, %00000000
   2090  f9e3					      if	(pfwidth>2)
   2091  f9e3		       00 54		      .byte.b	%00000000, %01010100
   2092  f9e5					      endif
   2093  f9e5		       00 00		      .byte.b	%00000000, %00000000
   2094  f9e7					      if	(pfwidth>2)
   2095  f9e7		       00 f8		      .byte.b	%00000000, %11111000
   2096  f9e9					      endif
   2097  f9e9		       00 00		      .byte.b	%00000000, %00000000
   2098  f9eb					      if	(pfwidth>2)
   2099  f9eb		       00 e0		      .byte.b	%00000000, %11100000
   2100  f9ed					      endif
   2101  f9ed		       00 00		      .byte.b	%00000000, %00000000
   2102  f9ef					      if	(pfwidth>2)
   2103  f9ef		       00 c0		      .byte.b	%00000000, %11000000
   2104  f9f1					      endif
   2105  f9f1		       00 00		      .byte.b	%00000000, %00000000
   2106  f9f3					      if	(pfwidth>2)
   2107  f9f3		       00 c0		      .byte.b	%00000000, %11000000
   2108  f9f5					      endif
   2109  f9f5				   pflabel0
   2110  f9f5		       bd c9 f9 	      lda	PF_data0,x
   2111  f9f8		       95 a4		      sta	playfield,x
   2112  f9fa		       ca		      dex
   2113  f9fb		       10 f8		      bpl	pflabel0
   2114  f9fd				   .
   2115  f9fd							; 
   2116  f9fd
   2117  f9fd				   .L067		;  pfcolors:
   2118  f9fd
   2119  f9fd		       a9 dc		      lda	# $DC
   2120  f9ff		       85 08		      sta	COLUPF
   2121  fa01				  -	      ifconst	pfres
   2122  fa01				  -	      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2123  fa01					      else
   2124  fa01		       a9 fd		      lda	#>(pfcolorlabel13-84)
   2125  fa03					      endif
   2126  fa03		       85 f1		      sta	pfcolortable+1
   2127  fa05				  -	      ifconst	pfres
   2128  fa05				  -	      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2129  fa05					      else
   2130  fa05		       a9 07		      lda	#<(pfcolorlabel13-84)
   2131  fa07					      endif
   2132  fa07		       85 f0		      sta	pfcolortable
   2133  fa09				   .L068		;  counter  =	180
   2134  fa09
   2135  fa09		       a9 b4		      LDA	#180
   2136  fa0b		       85 d6		      STA	counter
   2137  fa0d				   .
   2138  fa0d							; 
   2139  fa0d
   2140  fa0d				   .cutscene
   2141  fa0d							; cutscene
   2142  fa0d
   2143  fa0d				   .L069		;  drawscreen
   2144  fa0d
   2145  fa0d		       20 c7 f3 	      jsr	drawscreen
   2146  fa10				   .L070		;  if counter	>  0 then counter  =  counter  -  1 else goto mainsetup
   2147  fa10
   2148  fa10		       a9 00		      LDA	#0
   2149  fa12		       c5 d6		      CMP	counter
   2150  fa14		       b0 05		      BCS	.skipL070
   2151  fa16				   .condpart1
   2152  fa16		       c6 d6		      DEC	counter
   2153  fa18		       4c 1e fa 	      jmp	.skipelse0
   2154  fa1b				   .skipL070
   2155  fa1b		       4c 21 fa 	      jmp	.mainsetup
   2156  fa1e
   2157  fa1e				   .skipelse0
   2158  fa1e				   .L071		;  goto cutscene
   2159  fa1e
   2160  fa1e		       4c 0d fa 	      jmp	.cutscene
   2161  fa21
   2162  fa21				   .
   2163  fa21							; 
   2164  fa21
   2165  fa21				   .mainsetup
   2166  fa21							; mainsetup
   2167  fa21
   2168  fa21				   .L072		;  sounda  =  0
   2169  fa21
   2170  fa21		       a9 00		      LDA	#0
   2171  fa23		       85 d4		      STA	sounda
   2172  fa25				   .L073		;  missile1height  =  2
   2173  fa25
   2174  fa25		       a9 02		      LDA	#2
   2175  fa27		       85 87		      STA	missile1height
   2176  fa29				   .L074		;  missile1x  =  75
   2177  fa29
   2178  fa29		       a9 4b		      LDA	#75
   2179  fa2b		       85 83		      STA	missile1x
   2180  fa2d				   .L075		;  missile1y  =  50
   2181  fa2d
   2182  fa2d		       a9 32		      LDA	#50
   2183  fa2f		       85 88		      STA	missile1y
   2184  fa31				   .L076		;  ballx  =  60
   2185  fa31
   2186  fa31		       a9 3c		      LDA	#60
   2187  fa33		       85 84		      STA	ballx
   2188  fa35				   .L077		;  bally  =  90
   2189  fa35
   2190  fa35		       a9 5a		      LDA	#90
   2191  fa37		       85 89		      STA	bally
   2192  fa39				   .L078		;  COLUP1  =  $0E
   2193  fa39
   2194  fa39		       a9 0e		      LDA	#$0E
   2195  fa3b		       85 07		      STA	COLUP1
   2196  fa3d				   .L079		;  counter  =	0
   2197  fa3d
   2198  fa3d		       a9 00		      LDA	#0
   2199  fa3f		       85 d6		      STA	counter
   2200  fa41				   .L080		;  b  =  0
   2201  fa41
   2202  fa41		       a9 00		      LDA	#0
   2203  fa43		       85 d5		      STA	b
   2204  fa45				   .L081		;  b  =  0
   2205  fa45
   2206  fa45		       a9 00		      LDA	#0
   2207  fa47		       85 d5		      STA	b
   2208  fa49				   .L082		;  d  =  1
   2209  fa49
   2210  fa49		       a9 01		      LDA	#1
   2211  fa4b		       85 d7		      STA	d
   2212  fa4d				   .L083		;  e  =  0
   2213  fa4d
   2214  fa4d		       a9 00		      LDA	#0
   2215  fa4f		       85 d8		      STA	e
   2216  fa51				   .L084		;  player0x  =  90
   2217  fa51
   2218  fa51		       a9 5a		      LDA	#90
   2219  fa53		       85 80		      STA	player0x
   2220  fa55				   .L085		;  player0y  =  5
   2221  fa55
   2222  fa55		       a9 05		      LDA	#5
   2223  fa57		       85 85		      STA	player0y
   2224  fa59				   .L086		;  f  =  $64
   2225  fa59
   2226  fa59		       a9 64		      LDA	#$64
   2227  fa5b		       85 d9		      STA	f
   2228  fa5d				   .L087		;  COLUPF  =  $00
   2229  fa5d
   2230  fa5d		       a9 00		      LDA	#$00
   2231  fa5f		       85 08		      STA	COLUPF
   2232  fa61				   .L088		;  statusbarcolor  =  $CE
   2233  fa61
   2234  fa61		       a9 ce		      LDA	#$CE
   2235  fa63		       85 e6		      STA	statusbarcolor
   2236  fa65				   .L089		;  statusbarlength  =	140
   2237  fa65
   2238  fa65		       a9 8c		      LDA	#140
   2239  fa67		       85 f5		      STA	statusbarlength
   2240  fa69				   .L090		;  NUSIZ1  =  $10
   2241  fa69
   2242  fa69		       a9 10		      LDA	#$10
   2243  fa6b		       85 05		      STA	NUSIZ1
   2244  fa6d				   .L091		;  AUDV0  =  0
   2245  fa6d
   2246  fa6d		       a9 00		      LDA	#0
   2247  fa6f		       85 19		      STA	AUDV0
   2248  fa71				   .
   2249  fa71							; 
   2250  fa71
   2251  fa71				   .L092		;  playfield:
   2252  fa71
   2253  fa71				  -	      ifconst	pfres
   2254  fa71				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2255  fa71					      else
   2256  fa71		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2257  fa73					      endif
   2258  fa73		       4c a2 fa 	      jmp	pflabel1
   2259  fa76				   PF_data1
   2260  fa76		       00 00		      .byte.b	%00000000, %00000000
   2261  fa78					      if	(pfwidth>2)
   2262  fa78		       00 00		      .byte.b	%00000000, %00000000
   2263  fa7a					      endif
   2264  fa7a		       00 00		      .byte.b	%00000000, %00000000
   2265  fa7c					      if	(pfwidth>2)
   2266  fa7c		       00 00		      .byte.b	%00000000, %00000000
   2267  fa7e					      endif
   2268  fa7e		       00 00		      .byte.b	%00000000, %00000000
   2269  fa80					      if	(pfwidth>2)
   2270  fa80		       00 00		      .byte.b	%00000000, %00000000
   2271  fa82					      endif
   2272  fa82		       00 00		      .byte.b	%00000000, %00000000
   2273  fa84					      if	(pfwidth>2)
   2274  fa84		       00 00		      .byte.b	%00000000, %00000000
   2275  fa86					      endif
   2276  fa86		       00 00		      .byte.b	%00000000, %00000000
   2277  fa88					      if	(pfwidth>2)
   2278  fa88		       00 00		      .byte.b	%00000000, %00000000
   2279  fa8a					      endif
   2280  fa8a		       00 00		      .byte.b	%00000000, %00000000
   2281  fa8c					      if	(pfwidth>2)
   2282  fa8c		       00 00		      .byte.b	%00000000, %00000000
   2283  fa8e					      endif
   2284  fa8e		       00 00		      .byte.b	%00000000, %00000000
   2285  fa90					      if	(pfwidth>2)
   2286  fa90		       00 00		      .byte.b	%00000000, %00000000
   2287  fa92					      endif
   2288  fa92		       00 00		      .byte.b	%00000000, %00000000
   2289  fa94					      if	(pfwidth>2)
   2290  fa94		       00 00		      .byte.b	%00000000, %00000000
   2291  fa96					      endif
   2292  fa96		       00 00		      .byte.b	%00000000, %00000000
   2293  fa98					      if	(pfwidth>2)
   2294  fa98		       00 00		      .byte.b	%00000000, %00000000
   2295  fa9a					      endif
   2296  fa9a		       00 00		      .byte.b	%00000000, %00000000
   2297  fa9c					      if	(pfwidth>2)
   2298  fa9c		       00 00		      .byte.b	%00000000, %00000000
   2299  fa9e					      endif
   2300  fa9e		       00 00		      .byte.b	%00000000, %00000000
   2301  faa0					      if	(pfwidth>2)
   2302  faa0		       00 00		      .byte.b	%00000000, %00000000
   2303  faa2					      endif
   2304  faa2				   pflabel1
   2305  faa2		       bd 76 fa 	      lda	PF_data1,x
   2306  faa5		       95 a4		      sta	playfield,x
   2307  faa7		       ca		      dex
   2308  faa8		       10 f8		      bpl	pflabel1
   2309  faaa				   .
   2310  faaa							; 
   2311  faaa
   2312  faaa				   .mainsetup2
   2313  faaa							; mainsetup2
   2314  faaa
   2315  faaa				   .L093		;  player0:
   2316  faaa
   2317  faaa		       a2 83		      LDX	#<playerL093_0
   2318  faac		       86 8a		      STX	player0pointerlo
   2319  faae		       a9 fd		      LDA	#>playerL093_0
   2320  fab0		       85 8b		      STA	player0pointerhi
   2321  fab2		       a9 0a		      LDA	#10
   2322  fab4		       85 8e		      STA	player0height
   2323  fab6				   .
   2324  fab6							; 
   2325  fab6
   2326  fab6				   .
   2327  fab6							; 
   2328  fab6
   2329  fab6				   .
   2330  fab6							; 
   2331  fab6
   2332  fab6				   .
   2333  fab6							; 
   2334  fab6
   2335  fab6				   .
   2336  fab6							; 
   2337  fab6
   2338  fab6				   .mainloop
   2339  fab6							; mainloop
   2340  fab6
   2341  fab6				   .
   2342  fab6							; 
   2343  fab6
   2344  fab6				   .L094		;  g  =  g  +	1
   2345  fab6
   2346  fab6		       e6 da		      INC	g
   2347  fab8				   .L095		;  counter  =	counter  +  1
   2348  fab8
   2349  fab8		       e6 d6		      INC	counter
   2350  faba				   .L096		;  COLUP0  =  $46
   2351  faba
   2352  faba		       a9 46		      LDA	#$46
   2353  fabc		       85 06		      STA	COLUP0
   2354  fabe				   .L097		;  COLUP1  =  $0E
   2355  fabe
   2356  fabe		       a9 0e		      LDA	#$0E
   2357  fac0		       85 07		      STA	COLUP1
   2358  fac2				   .
   2359  fac2							; 
   2360  fac2
   2361  fac2				   .L098		;  AUDV0  =  sounda
   2362  fac2
   2363  fac2		       a5 d4		      LDA	sounda
   2364  fac4		       85 19		      STA	AUDV0
   2365  fac6				   .L099		;  AUDC0  =  8
   2366  fac6
   2367  fac6		       a9 08		      LDA	#8
   2368  fac8		       85 15		      STA	AUDC0
   2369  faca				   .L0100		;  AUDF0  =  3
   2370  faca
   2371  faca		       a9 03		      LDA	#3
   2372  facc		       85 17		      STA	AUDF0
   2373  face				   .
   2374  face							; 
   2375  face
   2376  face				   .
   2377  face							; 
   2378  face
   2379  face				   .L0101		;  if g  >  1 then player0y  =  player0y  +  d  :  f  =  f  -	$01  :	g  =  0
   2380  face
   2381  face		       a9 01		      LDA	#1
   2382  fad0		       c5 da		      CMP	g
   2383  fad2		       b0 12		      BCS	.skipL0101
   2384  fad4				   .condpart2
   2385  fad4		       a5 85		      LDA	player0y
   2386  fad6		       18		      CLC
   2387  fad7		       65 d7		      ADC	d
   2388  fad9		       85 85		      STA	player0y
   2389  fadb		       a5 d9		      LDA	f
   2390  fadd		       38		      SEC
   2391  fade		       e9 01		      SBC	#$01
   2392  fae0		       85 d9		      STA	f
   2393  fae2		       a9 00		      LDA	#0
   2394  fae4		       85 da		      STA	g
   2395  fae6				   .skipL0101
   2396  fae6				   .
   2397  fae6							; 
   2398  fae6
   2399  fae6				   .
   2400  fae6							; 
   2401  fae6
   2402  fae6				   .L0102		;  if sounda  >  0 then e  =  e  +  1	:  NUSIZ1  =  $30
   2403  fae6
   2404  fae6		       a9 00		      LDA	#0
   2405  fae8		       c5 d4		      CMP	sounda
   2406  faea		       b0 06		      BCS	.skipL0102
   2407  faec				   .condpart3
   2408  faec		       e6 d8		      INC	e
   2409  faee		       a9 30		      LDA	#$30
   2410  faf0		       85 05		      STA	NUSIZ1
   2411  faf2				   .skipL0102
   2412  faf2				   .L0103		;  if e  >  10 then e	=  0  :  sounda  =  sounda  -  1
   2413  faf2
   2414  faf2		       a9 0a		      LDA	#10
   2415  faf4		       c5 d8		      CMP	e
   2416  faf6		       b0 06		      BCS	.skipL0103
   2417  faf8				   .condpart4
   2418  faf8		       a9 00		      LDA	#0
   2419  fafa		       85 d8		      STA	e
   2420  fafc		       c6 d4		      DEC	sounda
   2421  fafe				   .skipL0103
   2422  fafe				   .
   2423  fafe							; 
   2424  fafe
   2425  fafe				   .
   2426  fafe							; 
   2427  fafe
   2428  fafe				   .L0104		;  if counter	>  60 then b  =  b  +  1  :  counter  =  0
   2429  fafe
   2430  fafe		       a9 3c		      LDA	#60
   2431  fb00		       c5 d6		      CMP	counter
   2432  fb02		       b0 06		      BCS	.skipL0104
   2433  fb04				   .condpart5
   2434  fb04		       e6 d5		      INC	b
   2435  fb06		       a9 00		      LDA	#0
   2436  fb08		       85 d6		      STA	counter
   2437  fb0a				   .skipL0104
   2438  fb0a				   .
   2439  fb0a							; 
   2440  fb0a
   2441  fb0a				   .L0105		;  if b  >  30 then b	=  0  :  d  =  d  +  1
   2442  fb0a
   2443  fb0a		       a9 1e		      LDA	#30
   2444  fb0c		       c5 d5		      CMP	b
   2445  fb0e		       b0 06		      BCS	.skipL0105
   2446  fb10				   .condpart6
   2447  fb10		       a9 00		      LDA	#0
   2448  fb12		       85 d5		      STA	b
   2449  fb14		       e6 d7		      INC	d
   2450  fb16				   .skipL0105
   2451  fb16				   .
   2452  fb16							; 
   2453  fb16
   2454  fb16				   .
   2455  fb16							; 
   2456  fb16
   2457  fb16				   .L0106		;  if joy0right then if missile1x  <  146 then missile1x  =  missile1x  +  4
   2458  fb16
   2459  fb16		       2c 80 02 	      bit	SWCHA
   2460  fb19		       30 0d		      BMI	.skipL0106
   2461  fb1b				   .condpart7
   2462  fb1b		       a5 83		      LDA	missile1x
   2463  fb1d		       c9 92		      CMP	#146
   2464  fb1f		       b0 07		      BCS	.skip7then
   2465  fb21				   .condpart8
   2466  fb21		       a5 83		      LDA	missile1x
   2467  fb23		       18		      CLC
   2468  fb24		       69 04		      ADC	#4
   2469  fb26		       85 83		      STA	missile1x
   2470  fb28				   .skip7then
   2471  fb28				   .skipL0106
   2472  fb28				   .L0107		;  if joy0left then if missile1x  >  14 then missile1x  =  missile1x  -  4
   2473  fb28
   2474  fb28		       2c 80 02 	      bit	SWCHA
   2475  fb2b		       70 0d		      BVS	.skipL0107
   2476  fb2d				   .condpart9
   2477  fb2d		       a9 0e		      LDA	#14
   2478  fb2f		       c5 83		      CMP	missile1x
   2479  fb31		       b0 07		      BCS	.skip9then
   2480  fb33				   .condpart10
   2481  fb33		       a5 83		      LDA	missile1x
   2482  fb35		       38		      SEC
   2483  fb36		       e9 04		      SBC	#4
   2484  fb38		       85 83		      STA	missile1x
   2485  fb3a				   .skip9then
   2486  fb3a				   .skipL0107
   2487  fb3a				   .L0108		;  if joy0up then if missile1y  >  16 then missile1y  =  missile1y  -	2
   2488  fb3a
   2489  fb3a		       a9 10		      lda	#$10
   2490  fb3c		       2c 80 02 	      bit	SWCHA
   2491  fb3f		       d0 0d		      BNE	.skipL0108
   2492  fb41				   .condpart11
   2493  fb41		       a9 10		      LDA	#16
   2494  fb43		       c5 88		      CMP	missile1y
   2495  fb45		       b0 07		      BCS	.skip11then
   2496  fb47				   .condpart12
   2497  fb47		       a5 88		      LDA	missile1y
   2498  fb49		       38		      SEC
   2499  fb4a		       e9 02		      SBC	#2
   2500  fb4c		       85 88		      STA	missile1y
   2501  fb4e				   .skip11then
   2502  fb4e				   .skipL0108
   2503  fb4e				   .L0109		;  if joy0down then if missile1y  <  148 then missile1y  =  missile1y	+  2
   2504  fb4e
   2505  fb4e		       a9 20		      lda	#$20
   2506  fb50		       2c 80 02 	      bit	SWCHA
   2507  fb53		       d0 0d		      BNE	.skipL0109
   2508  fb55				   .condpart13
   2509  fb55		       a5 88		      LDA	missile1y
   2510  fb57		       c9 94		      CMP	#148
   2511  fb59		       b0 07		      BCS	.skip13then
   2512  fb5b				   .condpart14
   2513  fb5b		       a5 88		      LDA	missile1y
   2514  fb5d		       18		      CLC
   2515  fb5e		       69 02		      ADC	#2
   2516  fb60		       85 88		      STA	missile1y
   2517  fb62				   .skip13then
   2518  fb62				   .skipL0109
   2519  fb62				   .
   2520  fb62							; 
   2521  fb62
   2522  fb62				   .
   2523  fb62							; 
   2524  fb62
   2525  fb62				   .
   2526  fb62							; 
   2527  fb62
   2528  fb62				   .L0110		;  if joy0fire then COLUP1  =	$FE  :	sounda	=  4  :  if missile1x  <  130 then missile1x  =  missile1x  +  8
   2529  fb62
   2530  fb62		       24 0c		      bit	INPT4
   2531  fb64		       30 15		      BMI	.skipL0110
   2532  fb66				   .condpart15
   2533  fb66		       a9 fe		      LDA	#$FE
   2534  fb68		       85 07		      STA	COLUP1
   2535  fb6a		       a9 04		      LDA	#4
   2536  fb6c		       85 d4		      STA	sounda
   2537  fb6e		       a5 83		      LDA	missile1x
   2538  fb70		       c9 82		      CMP	#130
   2539  fb72		       b0 07		      BCS	.skip15then
   2540  fb74				   .condpart16
   2541  fb74		       a5 83		      LDA	missile1x
   2542  fb76		       18		      CLC
   2543  fb77		       69 08		      ADC	#8
   2544  fb79		       85 83		      STA	missile1x
   2545  fb7b				   .skip15then
   2546  fb7b				   .skipL0110
   2547  fb7b				   .
   2548  fb7b							; 
   2549  fb7b
   2550  fb7b				   .
   2551  fb7b							; 
   2552  fb7b
   2553  fb7b				   .L0111		;  if collision(player0,missile1)  &&	joy0fire then score  =	score  +  f  :	f  =  $64  :  goto cut
   2554  fb7b
   2555  fb7b		       24 01		      bit	CXM1P
   2556  fb7d		       10 20		      BPL	.skipL0111
   2557  fb7f				   .condpart17
   2558  fb7f		       24 0c		      bit	INPT4
   2559  fb81		       30 1c		      BMI	.skip17then
   2560  fb83				   .condpart18
   2561  fb83		       f8		      SED
   2562  fb84		       18		      CLC
   2563  fb85		       a5 95		      LDA	score+2
   2564  fb87		       65 d9		      ADC	f
   2565  fb89		       85 95		      STA	score+2
   2566  fb8b		       a5 94		      LDA	score+1
   2567  fb8d		       69 00		      ADC	#0
   2568  fb8f		       85 94		      STA	score+1
   2569  fb91		       a5 93		      LDA	score
   2570  fb93		       69 00		      ADC	#0
   2571  fb95		       85 93		      STA	score
   2572  fb97		       d8		      CLD
   2573  fb98		       a9 64		      LDA	#$64
   2574  fb9a		       85 d9		      STA	f
   2575  fb9c		       4c e9 fb 	      jmp	.cut
   2576  fb9f
   2577  fb9f				   .skip17then
   2578  fb9f				   .skipL0111
   2579  fb9f				   .
   2580  fb9f							; 
   2581  fb9f
   2582  fb9f				   .
   2583  fb9f							; 
   2584  fb9f
   2585  fb9f				   .
   2586  fb9f							; 
   2587  fb9f
   2588  fb9f				   .L0112		;  if player0y  >  100 then statusbarlength  =  statusbarlength  -  20  :  player0y  =  5  :  f  =  100  :  player0x  =   ( rand & 127 )  + 20  :  COLUBK  =  $0E  :  AUDV0  =  4  :  AUDC0  =  8  :  AUDF0  =  20
   2589  fb9f
   2590  fb9f		       a9 64		      LDA	#100
   2591  fba1		       c5 85		      CMP	player0y
   2592  fba3		       b0 29		      BCS	.skipL0112
   2593  fba5				   .condpart19
   2594  fba5		       a5 f5		      LDA	statusbarlength
   2595  fba7		       38		      SEC
   2596  fba8		       e9 14		      SBC	#20
   2597  fbaa		       85 f5		      STA	statusbarlength
   2598  fbac		       a9 05		      LDA	#5
   2599  fbae		       85 85		      STA	player0y
   2600  fbb0		       a9 64		      LDA	#100
   2601  fbb2		       85 d9		      STA	f
   2602  fbb4							; complex statement detected
   2603  fbb4		       20 b9 f3 	      jsr	randomize
   2604  fbb7		       29 7f		      AND	#127
   2605  fbb9		       18		      CLC
   2606  fbba		       69 14		      ADC	#20
   2607  fbbc		       85 80		      STA	player0x
   2608  fbbe		       a9 0e		      LDA	#$0E
   2609  fbc0		       85 09		      STA	COLUBK
   2610  fbc2		       a9 04		      LDA	#4
   2611  fbc4		       85 19		      STA	AUDV0
   2612  fbc6		       a9 08		      LDA	#8
   2613  fbc8		       85 15		      STA	AUDC0
   2614  fbca		       a9 14		      LDA	#20
   2615  fbcc		       85 17		      STA	AUDF0
   2616  fbce				   .skipL0112
   2617  fbce				   .
   2618  fbce							; 
   2619  fbce
   2620  fbce				   .
   2621  fbce							; 
   2622  fbce
   2623  fbce				   .L0113		;  drawscreen
   2624  fbce
   2625  fbce		       20 c7 f3 	      jsr	drawscreen
   2626  fbd1				   .
   2627  fbd1							; 
   2628  fbd1
   2629  fbd1				   .L0114		;  NUSIZ1  =  $10
   2630  fbd1
   2631  fbd1		       a9 10		      LDA	#$10
   2632  fbd3		       85 05		      STA	NUSIZ1
   2633  fbd5				   .L0115		;  COLUBK  =  $00
   2634  fbd5
   2635  fbd5		       a9 00		      LDA	#$00
   2636  fbd7		       85 09		      STA	COLUBK
   2637  fbd9				   .
   2638  fbd9							; 
   2639  fbd9
   2640  fbd9				   .
   2641  fbd9							; 
   2642  fbd9
   2643  fbd9				   .L0116		;  if statusbarlength	=  0 then b  =	32  :  goto gameover
   2644  fbd9
   2645  fbd9		       a5 f5		      LDA	statusbarlength
   2646  fbdb		       c9 00		      CMP	#0
   2647  fbdd		       d0 07		      BNE	.skipL0116
   2648  fbdf				   .condpart20
   2649  fbdf		       a9 20		      LDA	#32
   2650  fbe1		       85 d5		      STA	b
   2651  fbe3		       4c cc fc 	      jmp	.gameover
   2652  fbe6
   2653  fbe6				   .skipL0116
   2654  fbe6				   .
   2655  fbe6							; 
   2656  fbe6
   2657  fbe6				   .L0117		;  goto mainloop
   2658  fbe6
   2659  fbe6		       4c b6 fa 	      jmp	.mainloop
   2660  fbe9
   2661  fbe9				   .
   2662  fbe9							; 
   2663  fbe9
   2664  fbe9				   .cut
   2665  fbe9							; cut
   2666  fbe9
   2667  fbe9				   .L0118		;  h  =  h  +	1
   2668  fbe9
   2669  fbe9		       e6 db		      INC	h
   2670  fbeb				   .L0119		;  COLUP0  =  $46
   2671  fbeb
   2672  fbeb		       a9 46		      LDA	#$46
   2673  fbed		       85 06		      STA	COLUP0
   2674  fbef				   .L0120		;  COLUP1  =  $FE
   2675  fbef
   2676  fbef		       a9 fe		      LDA	#$FE
   2677  fbf1		       85 07		      STA	COLUP1
   2678  fbf3				   .L0121		;  NUSIZ1  =  $30
   2679  fbf3
   2680  fbf3		       a9 30		      LDA	#$30
   2681  fbf5		       85 05		      STA	NUSIZ1
   2682  fbf7				   .L0122		;  if h  =  3 then player0:
   2683  fbf7
   2684  fbf7		       a5 db		      LDA	h
   2685  fbf9		       c9 03		      CMP	#3
   2686  fbfb		       d0 0c		      BNE	.skipL0122
   2687  fbfd				   .condpart21
   2688  fbfd		       a2 8e		      LDX	#<player21then_0
   2689  fbff		       86 8a		      STX	player0pointerlo
   2690  fc01		       a9 fd		      LDA	#>player21then_0
   2691  fc03		       85 8b		      STA	player0pointerhi
   2692  fc05		       a9 0a		      LDA	#10
   2693  fc07		       85 8e		      STA	player0height
   2694  fc09				   .skipL0122
   2695  fc09				   .L0123		;  if h  =  6 then player0:
   2696  fc09
   2697  fc09		       a5 db		      LDA	h
   2698  fc0b		       c9 06		      CMP	#6
   2699  fc0d		       d0 0c		      BNE	.skipL0123
   2700  fc0f				   .condpart22
   2701  fc0f		       a2 99		      LDX	#<player22then_0
   2702  fc11		       86 8a		      STX	player0pointerlo
   2703  fc13		       a9 fd		      LDA	#>player22then_0
   2704  fc15		       85 8b		      STA	player0pointerhi
   2705  fc17		       a9 0a		      LDA	#10
   2706  fc19		       85 8e		      STA	player0height
   2707  fc1b				   .skipL0123
   2708  fc1b				   .L0124		;  if h  =  9 then player0:
   2709  fc1b
   2710  fc1b		       a5 db		      LDA	h
   2711  fc1d		       c9 09		      CMP	#9
   2712  fc1f		       d0 0c		      BNE	.skipL0124
   2713  fc21				   .condpart23
   2714  fc21		       a2 a4		      LDX	#<player23then_0
   2715  fc23		       86 8a		      STX	player0pointerlo
   2716  fc25		       a9 fd		      LDA	#>player23then_0
   2717  fc27		       85 8b		      STA	player0pointerhi
   2718  fc29		       a9 0a		      LDA	#10
   2719  fc2b		       85 8e		      STA	player0height
   2720  fc2d				   .skipL0124
   2721  fc2d				   .L0125		;  if h  =  12 then player0:
   2722  fc2d
   2723  fc2d		       a5 db		      LDA	h
   2724  fc2f		       c9 0c		      CMP	#12
   2725  fc31		       d0 0c		      BNE	.skipL0125
   2726  fc33				   .condpart24
   2727  fc33		       a2 af		      LDX	#<player24then_0
   2728  fc35		       86 8a		      STX	player0pointerlo
   2729  fc37		       a9 fd		      LDA	#>player24then_0
   2730  fc39		       85 8b		      STA	player0pointerhi
   2731  fc3b		       a9 0a		      LDA	#10
   2732  fc3d		       85 8e		      STA	player0height
   2733  fc3f				   .skipL0125
   2734  fc3f				   .L0126		;  if h  =  15 then player0:
   2735  fc3f
   2736  fc3f		       a5 db		      LDA	h
   2737  fc41		       c9 0f		      CMP	#15
   2738  fc43		       d0 0c		      BNE	.skipL0126
   2739  fc45				   .condpart25
   2740  fc45		       a2 ba		      LDX	#<player25then_0
   2741  fc47		       86 8a		      STX	player0pointerlo
   2742  fc49		       a9 fd		      LDA	#>player25then_0
   2743  fc4b		       85 8b		      STA	player0pointerhi
   2744  fc4d		       a9 0a		      LDA	#10
   2745  fc4f		       85 8e		      STA	player0height
   2746  fc51				   .skipL0126
   2747  fc51				   .
   2748  fc51							; 
   2749  fc51
   2750  fc51				   .L0127		;  if h  =  18 then player0:
   2751  fc51
   2752  fc51		       a5 db		      LDA	h
   2753  fc53		       c9 12		      CMP	#18
   2754  fc55		       d0 0c		      BNE	.skipL0127
   2755  fc57				   .condpart26
   2756  fc57		       a2 c5		      LDX	#<player26then_0
   2757  fc59		       86 8a		      STX	player0pointerlo
   2758  fc5b		       a9 fd		      LDA	#>player26then_0
   2759  fc5d		       85 8b		      STA	player0pointerhi
   2760  fc5f		       a9 0a		      LDA	#10
   2761  fc61		       85 8e		      STA	player0height
   2762  fc63				   .skipL0127
   2763  fc63				   .
   2764  fc63							; 
   2765  fc63
   2766  fc63				   .L0128		;  if h  =  21 then player0:
   2767  fc63
   2768  fc63		       a5 db		      LDA	h
   2769  fc65		       c9 15		      CMP	#21
   2770  fc67		       d0 0c		      BNE	.skipL0128
   2771  fc69				   .condpart27
   2772  fc69		       a2 d0		      LDX	#<player27then_0
   2773  fc6b		       86 8a		      STX	player0pointerlo
   2774  fc6d		       a9 fd		      LDA	#>player27then_0
   2775  fc6f		       85 8b		      STA	player0pointerhi
   2776  fc71		       a9 0a		      LDA	#10
   2777  fc73		       85 8e		      STA	player0height
   2778  fc75				   .skipL0128
   2779  fc75				   .
   2780  fc75							; 
   2781  fc75
   2782  fc75				   .L0129		;  if h  =  24 then player0:
   2783  fc75
   2784  fc75		       a5 db		      LDA	h
   2785  fc77		       c9 18		      CMP	#24
   2786  fc79		       d0 0c		      BNE	.skipL0129
   2787  fc7b				   .condpart28
   2788  fc7b		       a2 db		      LDX	#<player28then_0
   2789  fc7d		       86 8a		      STX	player0pointerlo
   2790  fc7f		       a9 fd		      LDA	#>player28then_0
   2791  fc81		       85 8b		      STA	player0pointerhi
   2792  fc83		       a9 0a		      LDA	#10
   2793  fc85		       85 8e		      STA	player0height
   2794  fc87				   .skipL0129
   2795  fc87				   .
   2796  fc87							; 
   2797  fc87
   2798  fc87				   .L0130		;  if h  =  27 then player0:
   2799  fc87
   2800  fc87		       a5 db		      LDA	h
   2801  fc89		       c9 1b		      CMP	#27
   2802  fc8b		       d0 0c		      BNE	.skipL0130
   2803  fc8d				   .condpart29
   2804  fc8d		       a2 e6		      LDX	#<player29then_0
   2805  fc8f		       86 8a		      STX	player0pointerlo
   2806  fc91		       a9 fd		      LDA	#>player29then_0
   2807  fc93		       85 8b		      STA	player0pointerhi
   2808  fc95		       a9 0a		      LDA	#10
   2809  fc97		       85 8e		      STA	player0height
   2810  fc99				   .skipL0130
   2811  fc99				   .
   2812  fc99							; 
   2813  fc99
   2814  fc99				   .L0131		;  if h  =  30 then player0:
   2815  fc99
   2816  fc99		       a5 db		      LDA	h
   2817  fc9b		       c9 1e		      CMP	#30
   2818  fc9d		       d0 0c		      BNE	.skipL0131
   2819  fc9f				   .condpart30
   2820  fc9f		       a2 f1		      LDX	#<player30then_0
   2821  fca1		       86 8a		      STX	player0pointerlo
   2822  fca3		       a9 fd		      LDA	#>player30then_0
   2823  fca5		       85 8b		      STA	player0pointerhi
   2824  fca7		       a9 0a		      LDA	#10
   2825  fca9		       85 8e		      STA	player0height
   2826  fcab				   .skipL0131
   2827  fcab				   .
   2828  fcab							; 
   2829  fcab
   2830  fcab				   .L0132		;  if h = 30 then h  =  0  :  player0y  =  5  :  player0x  =	( rand & 127 )	+ 20  :  goto mainsetup2
   2831  fcab
   2832  fcab		       a5 db		      LDA	h
   2833  fcad		       c9 1e		      CMP	#30
   2834  fcaf		       d0 15		      BNE	.skipL0132
   2835  fcb1				   .condpart31
   2836  fcb1		       a9 00		      LDA	#0
   2837  fcb3		       85 db		      STA	h
   2838  fcb5		       a9 05		      LDA	#5
   2839  fcb7		       85 85		      STA	player0y
   2840  fcb9							; complex statement detected
   2841  fcb9		       20 b9 f3 	      jsr	randomize
   2842  fcbc		       29 7f		      AND	#127
   2843  fcbe		       18		      CLC
   2844  fcbf		       69 14		      ADC	#20
   2845  fcc1		       85 80		      STA	player0x
   2846  fcc3		       4c aa fa 	      jmp	.mainsetup2
   2847  fcc6
   2848  fcc6				   .skipL0132
   2849  fcc6				   .L0133		;  drawscreen
   2850  fcc6
   2851  fcc6		       20 c7 f3 	      jsr	drawscreen
   2852  fcc9				   .L0134		;  goto cut
   2853  fcc9
   2854  fcc9		       4c e9 fb 	      jmp	.cut
   2855  fccc
   2856  fccc				   .
   2857  fccc							; 
   2858  fccc
   2859  fccc				   .gameover
   2860  fccc							; gameover
   2861  fccc
   2862  fccc				   .L0135		;  COLUP0  =  $00
   2863  fccc
   2864  fccc		       a9 00		      LDA	#$00
   2865  fcce		       85 06		      STA	COLUP0
   2866  fcd0				   .L0136		;  COLUP1  =  $00
   2867  fcd0
   2868  fcd0		       a9 00		      LDA	#$00
   2869  fcd2		       85 07		      STA	COLUP1
   2870  fcd4				   .L0137		;  missile1y  =  200
   2871  fcd4
   2872  fcd4		       a9 c8		      LDA	#200
   2873  fcd6		       85 88		      STA	missile1y
   2874  fcd8				   .L0138		;  COLUBK = $00
   2875  fcd8
   2876  fcd8		       a9 00		      LDA	#$00
   2877  fcda		       85 09		      STA	COLUBK
   2878  fcdc				   .
   2879  fcdc							; 
   2880  fcdc
   2881  fcdc				   .L0139		;  playfield:
   2882  fcdc
   2883  fcdc				  -	      ifconst	pfres
   2884  fcdc				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2885  fcdc					      else
   2886  fcdc		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2887  fcde					      endif
   2888  fcde		       4c 0d fd 	      jmp	pflabel2
   2889  fce1				   PF_data2
   2890  fce1		       00 00		      .byte.b	%00000000, %00000000
   2891  fce3					      if	(pfwidth>2)
   2892  fce3		       00 00		      .byte.b	%00000000, %00000000
   2893  fce5					      endif
   2894  fce5		       00 f8		      .byte.b	%00000000, %11111000
   2895  fce7					      if	(pfwidth>2)
   2896  fce7		       f8 00		      .byte.b	%11111000, %00000000
   2897  fce9					      endif
   2898  fce9		       00 10		      .byte.b	%00000000, %00010000
   2899  fceb					      if	(pfwidth>2)
   2900  fceb		       80 00		      .byte.b	%10000000, %00000000
   2901  fced					      endif
   2902  fced		       00 f8		      .byte.b	%00000000, %11111000
   2903  fcef					      if	(pfwidth>2)
   2904  fcef		       98 00		      .byte.b	%10011000, %00000000
   2905  fcf1					      endif
   2906  fcf1		       00 90		      .byte.b	%00000000, %10010000
   2907  fcf3					      if	(pfwidth>2)
   2908  fcf3		       e0 00		      .byte.b	%11100000, %00000000
   2909  fcf5					      endif
   2910  fcf5		       00 60		      .byte.b	%00000000, %01100000
   2911  fcf7					      if	(pfwidth>2)
   2912  fcf7		       88 00		      .byte.b	%10001000, %00000000
   2913  fcf9					      endif
   2914  fcf9		       00 58		      .byte.b	%00000000, %01011000
   2915  fcfb					      if	(pfwidth>2)
   2916  fcfb		       f8 00		      .byte.b	%11111000, %00000000
   2917  fcfd					      endif
   2918  fcfd		       60 00		      .byte.b	%01100000, %00000000
   2919  fcff					      if	(pfwidth>2)
   2920  fcff		       00 00		      .byte.b	%00000000, %00000000
   2921  fd01					      endif
   2922  fd01		       66 77		      .byte.b	%01100110, %01110111
   2923  fd03					      if	(pfwidth>2)
   2924  fd03		       25 6e		      .byte.b	%00100101, %01101110
   2925  fd05					      endif
   2926  fd05		       2a 37		      .byte.b	%00101010, %00110111
   2927  fd07					      if	(pfwidth>2)
   2928  fd07		       55 26		      .byte.b	%01010101, %00100110
   2929  fd09					      endif
   2930  fd09		       66 75		      .byte.b	%01100110, %01110101
   2931  fd0b					      if	(pfwidth>2)
   2932  fd0b		       22 2e		      .byte.b	%00100010, %00101110
   2933  fd0d					      endif
   2934  fd0d				   pflabel2
   2935  fd0d		       bd e1 fc 	      lda	PF_data2,x
   2936  fd10		       95 a4		      sta	playfield,x
   2937  fd12		       ca		      dex
   2938  fd13		       10 f8		      bpl	pflabel2
   2939  fd15				   .
   2940  fd15							; 
   2941  fd15
   2942  fd15				   .L0140		;  pfcolors:
   2943  fd15
   2944  fd15		       a9 2e		      lda	# $2E
   2945  fd17		       85 08		      sta	COLUPF
   2946  fd19				  -	      ifconst	pfres
   2947  fd19				  -	      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   2948  fd19					      else
   2949  fd19		       a9 fd		      lda	#>(pfcolorlabel13-83)
   2950  fd1b					      endif
   2951  fd1b		       85 f1		      sta	pfcolortable+1
   2952  fd1d				  -	      ifconst	pfres
   2953  fd1d				  -	      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   2954  fd1d					      else
   2955  fd1d		       a9 08		      lda	#<(pfcolorlabel13-83)
   2956  fd1f					      endif
   2957  fd1f		       85 f0		      sta	pfcolortable
   2958  fd21				   .
   2959  fd21							; 
   2960  fd21
   2961  fd21				   .L0141		;  AUDV0  =  b  :  AUDC0  =  14  :  AUDF0  =  20
   2962  fd21
   2963  fd21		       a5 d5		      LDA	b
   2964  fd23		       85 19		      STA	AUDV0
   2965  fd25		       a9 0e		      LDA	#14
   2966  fd27		       85 15		      STA	AUDC0
   2967  fd29		       a9 14		      LDA	#20
   2968  fd2b		       85 17		      STA	AUDF0
   2969  fd2d				   .L0142		;  if joy0fire then counter  =  counter  +  1 else counter  =	0
   2970  fd2d
   2971  fd2d		       24 0c		      bit	INPT4
   2972  fd2f		       30 05		      BMI	.skipL0142
   2973  fd31				   .condpart32
   2974  fd31		       e6 d6		      INC	counter
   2975  fd33		       4c 3a fd 	      jmp	.skipelse1
   2976  fd36				   .skipL0142
   2977  fd36		       a9 00		      LDA	#0
   2978  fd38		       85 d6		      STA	counter
   2979  fd3a				   .skipelse1
   2980  fd3a				   .L0143		;  if b  >  0 then b  =  b  -	1
   2981  fd3a
   2982  fd3a		       a9 00		      LDA	#0
   2983  fd3c		       c5 d5		      CMP	b
   2984  fd3e		       b0 02		      BCS	.skipL0143
   2985  fd40				   .condpart33
   2986  fd40		       c6 d5		      DEC	b
   2987  fd42				   .skipL0143
   2988  fd42				   .L0144		;  if counter	>  50 then reboot
   2989  fd42
   2990  fd42		       a9 32		      LDA	#50
   2991  fd44		       c5 d6		      CMP	counter
   2992  fd46		       b0 03		      BCS	.skipL0144
   2993  fd48				   .condpart34
   2994  fd48		       6c fc ff 	      JMP	($FFFC)
   2995  fd4b				   .skipL0144
   2996  fd4b				   .L0145		;  if switchreset then reboot
   2997  fd4b
   2998  fd4b		       a9 01		      lda	#1
   2999  fd4d		       2c 82 02 	      bit	SWCHB
   3000  fd50		       d0 03		      BNE	.skipL0145
   3001  fd52				   .condpart35
   3002  fd52		       6c fc ff 	      JMP	($FFFC)
   3003  fd55				   .skipL0145
   3004  fd55				   .
   3005  fd55							; 
   3006  fd55
   3007  fd55				   .L0146		;  drawscreen
   3008  fd55
   3009  fd55		       20 c7 f3 	      jsr	drawscreen
   3010  fd58				   .
   3011  fd58							; 
   3012  fd58
   3013  fd58				   .L0147		;  goto gameover 
   3014  fd58		       4c cc fc 	      jmp	.gameover
   3015  fd5b				  -	      ifconst	pfres
   3016  fd5b				  -	      if	(<*) > (254-pfres*pfwidth)
   3017  fd5b				  -	      align	256
   3018  fd5b				  -	      endif
   3019  fd5b				  -	      if	(<*) < (136-pfres*pfwidth)
   3020  fd5b				  -	      repeat	((136-pfres*pfwidth)-(<*))
   3021  fd5b				  -	      .byte	0
   3022  fd5b				  -	      repend
   3023  fd5b				  -	      endif
   3024  fd5b					      else
   3025  fd5b				  -	      if	(<*) > 206
   3026  fd5b				  -	      align	256
   3027  fd5b					      endif
   3028  fd5b				  -	      if	(<*) < 88
   3029  fd5b				  -	      repeat	(88-(<*))
   3030  fd5b				  -	      .byte	0
   3031  fd5b				  -	      repend
   3032  fd5b					      endif
   3033  fd5b					      endif
   3034  fd5b				   pfcolorlabel13
   3035  fd5b		       dc 2c 00 00	      .byte.b	$DC, $2C,0,0
   3036  fd5f		       dc 2a 00 00	      .byte.b	$DC, $2A,0,0
   3037  fd63		       dc 28 00 00	      .byte.b	$DC, $28,0,0
   3038  fd67		       dc 26 00 00	      .byte.b	$DC, $26,0,0
   3039  fd6b		       dc 24 00 00	      .byte.b	$DC, $24,0,0
   3040  fd6f		       26 22 00 00	      .byte.b	$26, $22,0,0
   3041  fd73		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3042  fd77		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3043  fd7b		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3044  fd7f		       26 0e 00 00	      .byte.b	$26, $0E,0,0
   3045  fd83				  -	      if	(<*) > (<(*+10))
   3046  fd83				  -	      repeat	($100-<*)
   3047  fd83				  -	      .byte	0
   3048  fd83				  -	      repend
   3049  fd83					      endif
   3050  fd83				   playerL093_0
   3051  fd83		       2c		      .byte.b	%00101100
   3052  fd84		       7e		      .byte.b	%01111110
   3053  fd85		       ff		      .byte.b	%11111111
   3054  fd86		       ff		      .byte.b	%11111111
   3055  fd87		       ff		      .byte.b	%11111111
   3056  fd88		       ff		      .byte.b	%11111111
   3057  fd89		       ff		      .byte.b	%11111111
   3058  fd8a		       6e		      .byte.b	%01101110
   3059  fd8b		       18		      .byte.b	%00011000
   3060  fd8c		       0c		      .byte.b	%00001100
   3061  fd8d		       00		      .byte.b	%00000000
   3062  fd8e				  -	      if	(<*) > (<(*+10))
   3063  fd8e				  -	      repeat	($100-<*)
   3064  fd8e				  -	      .byte	0
   3065  fd8e				  -	      repend
   3066  fd8e					      endif
   3067  fd8e				   player21then_0
   3068  fd8e		       2c		      .byte.b	%00101100
   3069  fd8f		       7e		      .byte.b	%01111110
   3070  fd90		       ff		      .byte.b	%11111111
   3071  fd91		       ff		      .byte.b	%11111111
   3072  fd92		       ff		      .byte.b	%11111111
   3073  fd93		       ff		      .byte.b	%11111111
   3074  fd94		       ff		      .byte.b	%11111111
   3075  fd95		       ff		      .byte.b	%11111111
   3076  fd96		       6e		      .byte.b	%01101110
   3077  fd97		       18		      .byte.b	%00011000
   3078  fd98		       0c		      .byte.b	%00001100
   3079  fd99				  -	      if	(<*) > (<(*+10))
   3080  fd99				  -	      repeat	($100-<*)
   3081  fd99				  -	      .byte	0
   3082  fd99				  -	      repend
   3083  fd99					      endif
   3084  fd99				   player22then_0
   3085  fd99		       2c		      .byte.b	%00101100
   3086  fd9a		       7e		      .byte.b	%01111110
   3087  fd9b		       ff		      .byte.b	%11111111
   3088  fd9c		       ff		      .byte.b	%11111111
   3089  fd9d		       ff		      .byte.b	%11111111
   3090  fd9e		       0f		      .byte.b	%00001111
   3091  fd9f		       ff		      .byte.b	%11111111
   3092  fda0		       ff		      .byte.b	%11111111
   3093  fda1		       6e		      .byte.b	%01101110
   3094  fda2		       18		      .byte.b	%00011000
   3095  fda3		       0c		      .byte.b	%00001100
   3096  fda4				  -	      if	(<*) > (<(*+10))
   3097  fda4				  -	      repeat	($100-<*)
   3098  fda4				  -	      .byte	0
   3099  fda4				  -	      repend
   3100  fda4					      endif
   3101  fda4				   player23then_0
   3102  fda4		       2c		      .byte.b	%00101100
   3103  fda5		       7e		      .byte.b	%01111110
   3104  fda6		       ff		      .byte.b	%11111111
   3105  fda7		       ff		      .byte.b	%11111111
   3106  fda8		       ff		      .byte.b	%11111111
   3107  fda9		       00		      .byte.b	%00000000
   3108  fdaa		       ff		      .byte.b	%11111111
   3109  fdab		       ff		      .byte.b	%11111111
   3110  fdac		       6e		      .byte.b	%01101110
   3111  fdad		       18		      .byte.b	%00011000
   3112  fdae		       0c		      .byte.b	%00001100
   3113  fdaf				  -	      if	(<*) > (<(*+10))
   3114  fdaf				  -	      repeat	($100-<*)
   3115  fdaf				  -	      .byte	0
   3116  fdaf				  -	      repend
   3117  fdaf					      endif
   3118  fdaf				   player24then_0
   3119  fdaf		       2c		      .byte.b	%00101100
   3120  fdb0		       7e		      .byte.b	%01111110
   3121  fdb1		       ff		      .byte.b	%11111111
   3122  fdb2		       ff		      .byte.b	%11111111
   3123  fdb3		       ff		      .byte.b	%11111111
   3124  fdb4		       00		      .byte.b	%00000000
   3125  fdb5		       ff		      .byte.b	%11111111
   3126  fdb6		       ff		      .byte.b	%11111111
   3127  fdb7		       6e		      .byte.b	%01101110
   3128  fdb8		       18		      .byte.b	%00011000
   3129  fdb9		       0c		      .byte.b	%00001100
   3130  fdba				  -	      if	(<*) > (<(*+10))
   3131  fdba				  -	      repeat	($100-<*)
   3132  fdba				  -	      .byte	0
   3133  fdba				  -	      repend
   3134  fdba					      endif
   3135  fdba				   player25then_0
   3136  fdba		       2c		      .byte.b	%00101100
   3137  fdbb		       7e		      .byte.b	%01111110
   3138  fdbc		       ff		      .byte.b	%11111111
   3139  fdbd		       ff		      .byte.b	%11111111
   3140  fdbe		       ff		      .byte.b	%11111111
   3141  fdbf		       00		      .byte.b	%00000000
   3142  fdc0		       ff		      .byte.b	%11111111
   3143  fdc1		       ff		      .byte.b	%11111111
   3144  fdc2		       6e		      .byte.b	%01101110
   3145  fdc3		       18		      .byte.b	%00011000
   3146  fdc4		       0c		      .byte.b	%00001100
   3147  fdc5				  -	      if	(<*) > (<(*+10))
   3148  fdc5				  -	      repeat	($100-<*)
   3149  fdc5				  -	      .byte	0
   3150  fdc5				  -	      repend
   3151  fdc5					      endif
   3152  fdc5				   player26then_0
   3153  fdc5		       04		      .byte.b	%00000100
   3154  fdc6		       2a		      .byte.b	%00101010
   3155  fdc7		       55		      .byte.b	%01010101
   3156  fdc8		       aa		      .byte.b	%10101010
   3157  fdc9		       55		      .byte.b	%01010101
   3158  fdca		       00		      .byte.b	%00000000
   3159  fdcb		       aa		      .byte.b	%10101010
   3160  fdcc		       55		      .byte.b	%01010101
   3161  fdcd		       2a		      .byte.b	%00101010
   3162  fdce		       10		      .byte.b	%00010000
   3163  fdcf		       08		      .byte.b	%00001000
   3164  fdd0				  -	      if	(<*) > (<(*+10))
   3165  fdd0				  -	      repeat	($100-<*)
   3166  fdd0				  -	      .byte	0
   3167  fdd0				  -	      repend
   3168  fdd0					      endif
   3169  fdd0				   player27then_0
   3170  fdd0		       04		      .byte.b	%00000100
   3171  fdd1		       00		      .byte.b	%00000000
   3172  fdd2		       55		      .byte.b	%01010101
   3173  fdd3		       00		      .byte.b	%00000000
   3174  fdd4		       55		      .byte.b	%01010101
   3175  fdd5		       00		      .byte.b	%00000000
   3176  fdd6		       aa		      .byte.b	%10101010
   3177  fdd7		       00		      .byte.b	%00000000
   3178  fdd8		       2a		      .byte.b	%00101010
   3179  fdd9		       00		      .byte.b	%00000000
   3180  fdda		       08		      .byte.b	%00001000
   3181  fddb				  -	      if	(<*) > (<(*+10))
   3182  fddb				  -	      repeat	($100-<*)
   3183  fddb				  -	      .byte	0
   3184  fddb				  -	      repend
   3185  fddb					      endif
   3186  fddb				   player28then_0
   3187  fddb		       00		      .byte.b	%00000000
   3188  fddc		       00		      .byte.b	%00000000
   3189  fddd		       44		      .byte.b	%01000100
   3190  fdde		       00		      .byte.b	%00000000
   3191  fddf		       11		      .byte.b	%00010001
   3192  fde0		       00		      .byte.b	%00000000
   3193  fde1		       88		      .byte.b	%10001000
   3194  fde2		       00		      .byte.b	%00000000
   3195  fde3		       22		      .byte.b	%00100010
   3196  fde4		       00		      .byte.b	%00000000
   3197  fde5		       08		      .byte.b	%00001000
   3198  fde6				  -	      if	(<*) > (<(*+10))
   3199  fde6				  -	      repeat	($100-<*)
   3200  fde6				  -	      .byte	0
   3201  fde6				  -	      repend
   3202  fde6					      endif
   3203  fde6				   player29then_0
   3204  fde6		       00		      .byte.b	%00000000
   3205  fde7		       00		      .byte.b	%00000000
   3206  fde8		       00		      .byte.b	%00000000
   3207  fde9		       00		      .byte.b	%00000000
   3208  fdea		       11		      .byte.b	%00010001
   3209  fdeb		       00		      .byte.b	%00000000
   3210  fdec		       88		      .byte.b	%10001000
   3211  fded		       00		      .byte.b	%00000000
   3212  fdee		       00		      .byte.b	%00000000
   3213  fdef		       00		      .byte.b	%00000000
   3214  fdf0		       08		      .byte.b	%00001000
   3215  fdf1				  -	      if	(<*) > (<(*+10))
   3216  fdf1				  -	      repeat	($100-<*)
   3217  fdf1				  -	      .byte	0
   3218  fdf1				  -	      repend
   3219  fdf1					      endif
   3220  fdf1				   player30then_0
   3221  fdf1		       00		      .byte.b	%00000000
   3222  fdf2		       00		      .byte.b	%00000000
   3223  fdf3		       00		      .byte.b	%00000000
   3224  fdf4		       00		      .byte.b	%00000000
   3225  fdf5		       01		      .byte.b	%00000001
   3226  fdf6		       00		      .byte.b	%00000000
   3227  fdf7		       80		      .byte.b	%10000000
   3228  fdf8		       00		      .byte.b	%00000000
   3229  fdf9		       00		      .byte.b	%00000000
   3230  fdfa		       00		      .byte.b	%00000000
   3231  fdfb		       08		      .byte.b	%00001000
   3232  fdfc					      if	ECHOFIRST
      416 bytes of ROM space left
   3233  fdfc					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3234  fdfc					      endif
   3235  fdfc		       00 01	   ECHOFIRST  =	1
   3236  fdfc
   3237  fdfc
   3238  fdfc
   3239  fdfc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3240  fdfc
   3241  fdfc							; feel free to modify the score graphics - just keep each digit 8 high
   3242  fdfc							; and keep the conditional compilation stuff intact
   3243  fdfc				  -	      ifconst	ROM2k
   3244  fdfc				  -	      ORG	$F7AC-8
   3245  fdfc					      else
   3246  fdfc				  -	      ifconst	bankswitch
   3247  fdfc				  -	      if	bankswitch == 8
   3248  fdfc				  -	      ORG	$2F94-bscode_length
   3249  fdfc				  -	      RORG	$FF94-bscode_length
   3250  fdfc				  -	      endif
   3251  fdfc				  -	      if	bankswitch == 16
   3252  fdfc				  -	      ORG	$4F94-bscode_length
   3253  fdfc				  -	      RORG	$FF94-bscode_length
   3254  fdfc				  -	      endif
   3255  fdfc				  -	      if	bankswitch == 32
   3256  fdfc				  -	      ORG	$8F94-bscode_length
   3257  fdfc				  -	      RORG	$FF94-bscode_length
   3258  fdfc				  -	      endif
   3259  fdfc				  -	      if	bankswitch == 64
   3260  fdfc				  -	      ORG	$10F80-bscode_length
   3261  fdfc				  -	      RORG	$1FF80-bscode_length
   3262  fdfc				  -	      endif
   3263  fdfc					      else
   3264  ff9c					      ORG	$FF9C
   3265  ff9c					      endif
   3266  ff9c					      endif
   3267  ff9c
   3268  ff9c							; font equates
   3269  ff9c		       00 01	   .21stcentury =	1
   3270  ff9c		       00 02	   alarmclock =	2
   3271  ff9c		       00 03	   handwritten =	3
   3272  ff9c		       00 04	   interrupted =	4
   3273  ff9c		       00 05	   retroputer =	5
   3274  ff9c		       00 06	   whimsey    =	6
   3275  ff9c		       00 07	   tiny       =	7
   3276  ff9c		       00 08	   hex	      =	8
   3277  ff9c
   3278  ff9c				  -	      ifconst	font
   3279  ff9c				  -	      if	font == hex
   3280  ff9c				  -	      ORG	. - 48
   3281  ff9c				  -	      endif
   3282  ff9c					      endif
   3283  ff9c
   3284  ff9c				   scoretable
   3285  ff9c
   3286  ff9c				  -	      ifconst	font
   3287  ff9c				  -	      if	font == .21stcentury
   3288  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3289  ff9c				  -	      endif
   3290  ff9c				  -	      if	font == alarmclock
   3291  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3292  ff9c				  -	      endif
   3293  ff9c				  -	      if	font == handwritten
   3294  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3295  ff9c				  -	      endif
   3296  ff9c				  -	      if	font == interrupted
   3297  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3298  ff9c				  -	      endif
   3299  ff9c				  -	      if	font == retroputer
   3300  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3301  ff9c				  -	      endif
   3302  ff9c				  -	      if	font == whimsey
   3303  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3304  ff9c				  -	      endif
   3305  ff9c				  -	      if	font == tiny
   3306  ff9c				  -	      include	"score_graphics.asm.tiny"
   3307  ff9c				  -	      endif
   3308  ff9c				  -	      if	font == hex
   3309  ff9c				  -	      include	"score_graphics.asm.hex"
   3310  ff9c				  -	      endif
   3311  ff9c					      else		; default font
   3312  ff9c
   3313  ff9c		       3c		      .byte.b	%00111100
   3314  ff9d		       66		      .byte.b	%01100110
   3315  ff9e		       66		      .byte.b	%01100110
   3316  ff9f		       66		      .byte.b	%01100110
   3317  ffa0		       66		      .byte.b	%01100110
   3318  ffa1		       66		      .byte.b	%01100110
   3319  ffa2		       66		      .byte.b	%01100110
   3320  ffa3		       3c		      .byte.b	%00111100
   3321  ffa4
   3322  ffa4		       7e		      .byte.b	%01111110
   3323  ffa5		       18		      .byte.b	%00011000
   3324  ffa6		       18		      .byte.b	%00011000
   3325  ffa7		       18		      .byte.b	%00011000
   3326  ffa8		       18		      .byte.b	%00011000
   3327  ffa9		       38		      .byte.b	%00111000
   3328  ffaa		       18		      .byte.b	%00011000
   3329  ffab		       08		      .byte.b	%00001000
   3330  ffac
   3331  ffac		       7e		      .byte.b	%01111110
   3332  ffad		       60		      .byte.b	%01100000
   3333  ffae		       60		      .byte.b	%01100000
   3334  ffaf		       3c		      .byte.b	%00111100
   3335  ffb0		       06		      .byte.b	%00000110
   3336  ffb1		       06		      .byte.b	%00000110
   3337  ffb2		       46		      .byte.b	%01000110
   3338  ffb3		       3c		      .byte.b	%00111100
   3339  ffb4
   3340  ffb4		       3c		      .byte.b	%00111100
   3341  ffb5		       46		      .byte.b	%01000110
   3342  ffb6		       06		      .byte.b	%00000110
   3343  ffb7		       06		      .byte.b	%00000110
   3344  ffb8		       1c		      .byte.b	%00011100
   3345  ffb9		       06		      .byte.b	%00000110
   3346  ffba		       46		      .byte.b	%01000110
   3347  ffbb		       3c		      .byte.b	%00111100
   3348  ffbc
   3349  ffbc		       0c		      .byte.b	%00001100
   3350  ffbd		       0c		      .byte.b	%00001100
   3351  ffbe		       7e		      .byte.b	%01111110
   3352  ffbf		       4c		      .byte.b	%01001100
   3353  ffc0		       4c		      .byte.b	%01001100
   3354  ffc1		       2c		      .byte.b	%00101100
   3355  ffc2		       1c		      .byte.b	%00011100
   3356  ffc3		       0c		      .byte.b	%00001100
   3357  ffc4
   3358  ffc4		       3c		      .byte.b	%00111100
   3359  ffc5		       46		      .byte.b	%01000110
   3360  ffc6		       06		      .byte.b	%00000110
   3361  ffc7		       06		      .byte.b	%00000110
   3362  ffc8		       3c		      .byte.b	%00111100
   3363  ffc9		       60		      .byte.b	%01100000
   3364  ffca		       60		      .byte.b	%01100000
   3365  ffcb		       7e		      .byte.b	%01111110
   3366  ffcc
   3367  ffcc		       3c		      .byte.b	%00111100
   3368  ffcd		       66		      .byte.b	%01100110
   3369  ffce		       66		      .byte.b	%01100110
   3370  ffcf		       66		      .byte.b	%01100110
   3371  ffd0		       7c		      .byte.b	%01111100
   3372  ffd1		       60		      .byte.b	%01100000
   3373  ffd2		       62		      .byte.b	%01100010
   3374  ffd3		       3c		      .byte.b	%00111100
   3375  ffd4
   3376  ffd4		       30		      .byte.b	%00110000
   3377  ffd5		       30		      .byte.b	%00110000
   3378  ffd6		       30		      .byte.b	%00110000
   3379  ffd7		       18		      .byte.b	%00011000
   3380  ffd8		       0c		      .byte.b	%00001100
   3381  ffd9		       06		      .byte.b	%00000110
   3382  ffda		       42		      .byte.b	%01000010
   3383  ffdb		       3e		      .byte.b	%00111110
   3384  ffdc
   3385  ffdc		       3c		      .byte.b	%00111100
   3386  ffdd		       66		      .byte.b	%01100110
   3387  ffde		       66		      .byte.b	%01100110
   3388  ffdf		       66		      .byte.b	%01100110
   3389  ffe0		       3c		      .byte.b	%00111100
   3390  ffe1		       66		      .byte.b	%01100110
   3391  ffe2		       66		      .byte.b	%01100110
   3392  ffe3		       3c		      .byte.b	%00111100
   3393  ffe4
   3394  ffe4		       3c		      .byte.b	%00111100
   3395  ffe5		       46		      .byte.b	%01000110
   3396  ffe6		       06		      .byte.b	%00000110
   3397  ffe7		       3e		      .byte.b	%00111110
   3398  ffe8		       66		      .byte.b	%01100110
   3399  ffe9		       66		      .byte.b	%01100110
   3400  ffea		       66		      .byte.b	%01100110
   3401  ffeb		       3c		      .byte.b	%00111100
   3402  ffec
   3403  ffec					      ifnconst	DPC_kernel_options
   3404  ffec
   3405  ffec		       00		      .byte.b	%00000000
   3406  ffed		       00		      .byte.b	%00000000
   3407  ffee		       00		      .byte.b	%00000000
   3408  ffef		       00		      .byte.b	%00000000
   3409  fff0		       00		      .byte.b	%00000000
   3410  fff1		       00		      .byte.b	%00000000
   3411  fff2		       00		      .byte.b	%00000000
   3412  fff3		       00		      .byte.b	%00000000
   3413  fff4
   3414  fff4					      endif
   3415  fff4
   3416  fff4					      endif
   3417  fff4
   3418  fff4				  -	      ifconst	ROM2k
   3419  fff4				  -	      ORG	$F7FC
   3420  fff4					      else
   3421  fff4				  -	      ifconst	bankswitch
   3422  fff4				  -	      if	bankswitch == 8
   3423  fff4				  -	      ORG	$2FF4-bscode_length
   3424  fff4				  -	      RORG	$FFF4-bscode_length
   3425  fff4				  -	      endif
   3426  fff4				  -	      if	bankswitch == 16
   3427  fff4				  -	      ORG	$4FF4-bscode_length
   3428  fff4				  -	      RORG	$FFF4-bscode_length
   3429  fff4				  -	      endif
   3430  fff4				  -	      if	bankswitch == 32
   3431  fff4				  -	      ORG	$8FF4-bscode_length
   3432  fff4				  -	      RORG	$FFF4-bscode_length
   3433  fff4				  -	      endif
   3434  fff4				  -	      if	bankswitch == 64
   3435  fff4				  -	      ORG	$10FE0-bscode_length
   3436  fff4				  -	      RORG	$1FFE0-bscode_length
   3437  fff4				  -	      endif
   3438  fff4					      else
   3439  fffc					      ORG	$FFFC
   3440  fffc					      endif
   3441  fffc					      endif
   3442  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3443  fffc
   3444  fffc				  -	      ifconst	bankswitch
   3445  fffc				  -	      if	bankswitch == 8
   3446  fffc				  -	      ORG	$2FFC
   3447  fffc				  -	      RORG	$FFFC
   3448  fffc				  -	      endif
   3449  fffc				  -	      if	bankswitch == 16
   3450  fffc				  -	      ORG	$4FFC
   3451  fffc				  -	      RORG	$FFFC
   3452  fffc				  -	      endif
   3453  fffc				  -	      if	bankswitch == 32
   3454  fffc				  -	      ORG	$8FFC
   3455  fffc				  -	      RORG	$FFFC
   3456  fffc				  -	      endif
   3457  fffc				  -	      if	bankswitch == 64
   3458  fffc				  -	      ORG	$10FF0
   3459  fffc				  -	      RORG	$1FFF0
   3460  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3461  fffc				  -	      ORG	$10FF8
   3462  fffc				  -	      RORG	$1FFF8
   3463  fffc				  -	      ifconst	superchip
   3464  fffc				  -	      .byte	"E","F","S","C"
   3465  fffc				  -	      else
   3466  fffc				  -	      .byte	"E","F","E","F"
   3467  fffc				  -	      endif
   3468  fffc				  -	      ORG	$10FFC
   3469  fffc				  -	      RORG	$1FFFC
   3470  fffc				  -	      endif
   3471  fffc					      else
   3472  fffc				  -	      ifconst	ROM2k
   3473  fffc				  -	      ORG	$F7FC
   3474  fffc					      else
   3475  fffc					      ORG	$FFFC
   3476  fffc					      endif
   3477  fffc					      endif
   3478  fffc		       00 f0		      .word.w	(start & $ffff)
   3479  fffe		       00 f0		      .word.w	(start & $ffff)
